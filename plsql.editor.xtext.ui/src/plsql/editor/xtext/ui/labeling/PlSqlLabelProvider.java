/*
 * generated by Xtext
 */
package plsql.editor.xtext.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import plsql.editor.xtext.plSql.LoopVariableDeclaration;
import plsql.editor.xtext.plSql.ParameterDeclaration;
import plsql.editor.xtext.plSql.ParameterSequence;
import plsql.editor.xtext.plSql.Procedure;
import plsql.editor.xtext.plSql.ProcedureDeclaration;
import plsql.editor.xtext.plSql.ProcedureDefinition;
import plsql.editor.xtext.plSql.VariableDeclaration;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class PlSqlLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public PlSqlLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	String text(Procedure ele) {
		return getProcedureText(ele.getName(), ele.getParameters());
	}

	String image(Procedure ele) {
		return "procedure.gif";
	}

	String text(ProcedureDeclaration ele) {
		return getProcedureText(ele.getName(), ele.getParameters());
	}

	String image(ProcedureDeclaration ele) {
		return "local_procedure.gif";
	}

	String text(ProcedureDefinition ele) {
		return getProcedureText(ele.getName(), ele.getParameters());
	}

	String image(ProcedureDefinition ele) {
		return "local_procedure.gif";
	}

	String text(VariableDeclaration ele) {
		return ele.getName() + " : " + ele.getDataType();
	}

	String image(VariableDeclaration ele) {
		return "variable.gif";
	}

	String text(ParameterDeclaration ele) {
		return ele.getName() + " : " + ele.getDataType();
	}

	String image(ParameterDeclaration ele) {
		return "variable.gif";
	}

	String text(LoopVariableDeclaration ele) {
		return ele.getName();
	}

	String image(LoopVariableDeclaration ele) {
		return "variable.gif";
	}

	private static String getProcedureText(String name, ParameterSequence parameters) {
		return name + "(" + getParameterString(parameters) + ")";
	}

	private static String getParameterString(ParameterSequence parameters) {
		if (parameters == null) {
			return "";
		}

		StringBuffer parameterSb = new StringBuffer();
		for (ParameterDeclaration parameter : parameters.getParameters()) {
			if (parameterSb.length() > 0) {
				parameterSb.append(", ");
			}
			String behavior = parameter.getBehavior();
			if (behavior != null) {
				parameterSb.append(behavior).append(' ');
			}
			parameterSb.append(parameter.getDataType());
		}
		return parameterSb.toString();
	}
}
