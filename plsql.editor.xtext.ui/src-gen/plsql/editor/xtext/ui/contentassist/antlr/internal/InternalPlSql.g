/*
* generated by Xtext
*/
grammar InternalPlSql;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package plsql.editor.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package plsql.editor.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import plsql.editor.xtext.services.PlSqlGrammarAccess;

}

@parser::members {
 
 	private PlSqlGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(PlSqlGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleCompilationUnit
entryRuleCompilationUnit 
:
{ before(grammarAccess.getCompilationUnitRule()); }
	 ruleCompilationUnit
{ after(grammarAccess.getCompilationUnitRule()); } 
	 EOF 
;

// Rule CompilationUnit
ruleCompilationUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompilationUnitAccess().getAlternatives()); }
(rule__CompilationUnit__Alternatives)
{ after(grammarAccess.getCompilationUnitAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedure
entryRuleProcedure 
:
{ before(grammarAccess.getProcedureRule()); }
	 ruleProcedure
{ after(grammarAccess.getProcedureRule()); } 
	 EOF 
;

// Rule Procedure
ruleProcedure
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcedureAccess().getGroup()); }
(rule__Procedure__Group__0)
{ after(grammarAccess.getProcedureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackage
entryRulePackage 
:
{ before(grammarAccess.getPackageRule()); }
	 rulePackage
{ after(grammarAccess.getPackageRule()); } 
	 EOF 
;

// Rule Package
rulePackage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageAccess().getGroup()); }
(rule__Package__Group__0)
{ after(grammarAccess.getPackageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedureDeclaration
entryRuleProcedureDeclaration 
:
{ before(grammarAccess.getProcedureDeclarationRule()); }
	 ruleProcedureDeclaration
{ after(grammarAccess.getProcedureDeclarationRule()); } 
	 EOF 
;

// Rule ProcedureDeclaration
ruleProcedureDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getGroup()); }
(rule__ProcedureDeclaration__Group__0)
{ after(grammarAccess.getProcedureDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedureDefinition
entryRuleProcedureDefinition 
:
{ before(grammarAccess.getProcedureDefinitionRule()); }
	 ruleProcedureDefinition
{ after(grammarAccess.getProcedureDefinitionRule()); } 
	 EOF 
;

// Rule ProcedureDefinition
ruleProcedureDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcedureDefinitionAccess().getGroup()); }
(rule__ProcedureDefinition__Group__0)
{ after(grammarAccess.getProcedureDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterSequence
entryRuleParameterSequence 
:
{ before(grammarAccess.getParameterSequenceRule()); }
	 ruleParameterSequence
{ after(grammarAccess.getParameterSequenceRule()); } 
	 EOF 
;

// Rule ParameterSequence
ruleParameterSequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterSequenceAccess().getGroup()); }
(rule__ParameterSequence__Group__0)
{ after(grammarAccess.getParameterSequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration 
:
{ before(grammarAccess.getParameterDeclarationRule()); }
	 ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationRule()); } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterDeclarationAccess().getGroup()); }
(rule__ParameterDeclaration__Group__0)
{ after(grammarAccess.getParameterDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterValue
entryRuleParameterValue 
:
{ before(grammarAccess.getParameterValueRule()); }
	 ruleParameterValue
{ after(grammarAccess.getParameterValueRule()); } 
	 EOF 
;

// Rule ParameterValue
ruleParameterValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterValueAccess().getGroup()); }
(rule__ParameterValue__Group__0)
{ after(grammarAccess.getParameterValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterBehavior
entryRuleParameterBehavior 
:
{ before(grammarAccess.getParameterBehaviorRule()); }
	 ruleParameterBehavior
{ after(grammarAccess.getParameterBehaviorRule()); } 
	 EOF 
;

// Rule ParameterBehavior
ruleParameterBehavior
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterBehaviorAccess().getAlternatives()); }
(rule__ParameterBehavior__Alternatives)
{ after(grammarAccess.getParameterBehaviorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedureInvokerRightsClause
entryRuleProcedureInvokerRightsClause 
:
{ before(grammarAccess.getProcedureInvokerRightsClauseRule()); }
	 ruleProcedureInvokerRightsClause
{ after(grammarAccess.getProcedureInvokerRightsClauseRule()); } 
	 EOF 
;

// Rule ProcedureInvokerRightsClause
ruleProcedureInvokerRightsClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcedureInvokerRightsClauseAccess().getRightAssignment()); }
(rule__ProcedureInvokerRightsClause__RightAssignment)
{ after(grammarAccess.getProcedureInvokerRightsClauseAccess().getRightAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionInvokerRightsClause
entryRuleFunctionInvokerRightsClause 
:
{ before(grammarAccess.getFunctionInvokerRightsClauseRule()); }
	 ruleFunctionInvokerRightsClause
{ after(grammarAccess.getFunctionInvokerRightsClauseRule()); } 
	 EOF 
;

// Rule FunctionInvokerRightsClause
ruleFunctionInvokerRightsClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionInvokerRightsClauseAccess().getRightAssignment()); }
(rule__FunctionInvokerRightsClause__RightAssignment)
{ after(grammarAccess.getFunctionInvokerRightsClauseAccess().getRightAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePragma
entryRulePragma 
:
{ before(grammarAccess.getPragmaRule()); }
	 rulePragma
{ after(grammarAccess.getPragmaRule()); } 
	 EOF 
;

// Rule Pragma
rulePragma
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPragmaAccess().getAlternatives()); }
(rule__Pragma__Alternatives)
{ after(grammarAccess.getPragmaAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePragmaRestrictReferences
entryRulePragmaRestrictReferences 
:
{ before(grammarAccess.getPragmaRestrictReferencesRule()); }
	 rulePragmaRestrictReferences
{ after(grammarAccess.getPragmaRestrictReferencesRule()); } 
	 EOF 
;

// Rule PragmaRestrictReferences
rulePragmaRestrictReferences
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getGroup()); }
(rule__PragmaRestrictReferences__Group__0)
{ after(grammarAccess.getPragmaRestrictReferencesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePragmaRestrictReferencesRestriction
entryRulePragmaRestrictReferencesRestriction 
:
{ before(grammarAccess.getPragmaRestrictReferencesRestrictionRule()); }
	 rulePragmaRestrictReferencesRestriction
{ after(grammarAccess.getPragmaRestrictReferencesRestrictionRule()); } 
	 EOF 
;

// Rule PragmaRestrictReferencesRestriction
rulePragmaRestrictReferencesRestriction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getAlternatives()); }
(rule__PragmaRestrictReferencesRestriction__Alternatives)
{ after(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubprogramName
entryRuleSubprogramName 
:
{ before(grammarAccess.getSubprogramNameRule()); }
	 ruleSubprogramName
{ after(grammarAccess.getSubprogramNameRule()); } 
	 EOF 
;

// Rule SubprogramName
ruleSubprogramName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubprogramNameAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getSubprogramNameAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePragmaTimestamp
entryRulePragmaTimestamp 
:
{ before(grammarAccess.getPragmaTimestampRule()); }
	 rulePragmaTimestamp
{ after(grammarAccess.getPragmaTimestampRule()); } 
	 EOF 
;

// Rule PragmaTimestamp
rulePragmaTimestamp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPragmaTimestampAccess().getGroup()); }
(rule__PragmaTimestamp__Group__0)
{ after(grammarAccess.getPragmaTimestampAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataType
entryRuleDataType 
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeAccess().getAlternatives()); }
(rule__DataType__Alternatives)
{ after(grammarAccess.getDataTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedureContent
entryRuleProcedureContent 
:
{ before(grammarAccess.getProcedureContentRule()); }
	 ruleProcedureContent
{ after(grammarAccess.getProcedureContentRule()); } 
	 EOF 
;

// Rule ProcedureContent
ruleProcedureContent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcedureContentAccess().getAlternatives()); }
(rule__ProcedureContent__Alternatives)
{ after(grammarAccess.getProcedureContentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedureImplementation
entryRuleProcedureImplementation 
:
{ before(grammarAccess.getProcedureImplementationRule()); }
	 ruleProcedureImplementation
{ after(grammarAccess.getProcedureImplementationRule()); } 
	 EOF 
;

// Rule ProcedureImplementation
ruleProcedureImplementation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcedureImplementationAccess().getGroup()); }
(rule__ProcedureImplementation__Group__0)
{ after(grammarAccess.getProcedureImplementationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionContent
entryRuleFunctionContent 
:
{ before(grammarAccess.getFunctionContentRule()); }
	 ruleFunctionContent
{ after(grammarAccess.getFunctionContentRule()); } 
	 EOF 
;

// Rule FunctionContent
ruleFunctionContent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionContentAccess().getFunctionImplementationParserRuleCall()); }
	ruleFunctionImplementation
{ after(grammarAccess.getFunctionContentAccess().getFunctionImplementationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionImplementation
entryRuleFunctionImplementation 
:
{ before(grammarAccess.getFunctionImplementationRule()); }
	 ruleFunctionImplementation
{ after(grammarAccess.getFunctionImplementationRule()); } 
	 EOF 
;

// Rule FunctionImplementation
ruleFunctionImplementation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionImplementationAccess().getGroup()); }
(rule__FunctionImplementation__Group__0)
{ after(grammarAccess.getFunctionImplementationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionClause
entryRuleFunctionClause 
:
{ before(grammarAccess.getFunctionClauseRule()); }
	 ruleFunctionClause
{ after(grammarAccess.getFunctionClauseRule()); } 
	 EOF 
;

// Rule FunctionClause
ruleFunctionClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionClauseAccess().getAlternatives()); }
(rule__FunctionClause__Alternatives)
{ after(grammarAccess.getFunctionClauseAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeterministicClause
entryRuleDeterministicClause 
:
{ before(grammarAccess.getDeterministicClauseRule()); }
	 ruleDeterministicClause
{ after(grammarAccess.getDeterministicClauseRule()); } 
	 EOF 
;

// Rule DeterministicClause
ruleDeterministicClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeterministicClauseAccess().getGroup()); }
(rule__DeterministicClause__Group__0)
{ after(grammarAccess.getDeterministicClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleResultCacheClause
entryRuleResultCacheClause 
:
{ before(grammarAccess.getResultCacheClauseRule()); }
	 ruleResultCacheClause
{ after(grammarAccess.getResultCacheClauseRule()); } 
	 EOF 
;

// Rule ResultCacheClause
ruleResultCacheClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getResultCacheClauseAccess().getGroup()); }
(rule__ResultCacheClause__Group__0)
{ after(grammarAccess.getResultCacheClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePipelinedClause
entryRulePipelinedClause 
:
{ before(grammarAccess.getPipelinedClauseRule()); }
	 rulePipelinedClause
{ after(grammarAccess.getPipelinedClauseRule()); } 
	 EOF 
;

// Rule PipelinedClause
rulePipelinedClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPipelinedClauseAccess().getGroup()); }
(rule__PipelinedClause__Group__0)
{ after(grammarAccess.getPipelinedClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatementBody
entryRuleStatementBody 
:
{ before(grammarAccess.getStatementBodyRule()); }
	 ruleStatementBody
{ after(grammarAccess.getStatementBodyRule()); } 
	 EOF 
;

// Rule StatementBody
ruleStatementBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementBodyAccess().getGroup()); }
(rule__StatementBody__Group__0)
{ after(grammarAccess.getStatementBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclareSection
entryRuleDeclareSection 
:
{ before(grammarAccess.getDeclareSectionRule()); }
	 ruleDeclareSection
{ after(grammarAccess.getDeclareSectionRule()); } 
	 EOF 
;

// Rule DeclareSection
ruleDeclareSection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclareSectionAccess().getGroup()); }
(rule__DeclareSection__Group__0)
{ after(grammarAccess.getDeclareSectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleItem
entryRuleItem 
:
{ before(grammarAccess.getItemRule()); }
	 ruleItem
{ after(grammarAccess.getItemRule()); } 
	 EOF 
;

// Rule Item
ruleItem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getItemAccess().getAlternatives()); }
(rule__Item__Alternatives)
{ after(grammarAccess.getItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleItemDeclaration
entryRuleItemDeclaration 
:
{ before(grammarAccess.getItemDeclarationRule()); }
	 ruleItemDeclaration
{ after(grammarAccess.getItemDeclarationRule()); } 
	 EOF 
;

// Rule ItemDeclaration
ruleItemDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getItemDeclarationAccess().getVariableDeclarationParserRuleCall()); }
	ruleVariableDeclaration
{ after(grammarAccess.getItemDeclarationAccess().getVariableDeclarationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExternalProcedureDeclaration
entryRuleExternalProcedureDeclaration 
:
{ before(grammarAccess.getExternalProcedureDeclarationRule()); }
	 ruleExternalProcedureDeclaration
{ after(grammarAccess.getExternalProcedureDeclarationRule()); } 
	 EOF 
;

// Rule ExternalProcedureDeclaration
ruleExternalProcedureDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExternalProcedureDeclarationAccess().getGroup()); }
(rule__ExternalProcedureDeclaration__Group__0)
{ after(grammarAccess.getExternalProcedureDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNOT_NULL
entryRuleNOT_NULL 
:
{ before(grammarAccess.getNOT_NULLRule()); }
	 ruleNOT_NULL
{ after(grammarAccess.getNOT_NULLRule()); } 
	 EOF 
;

// Rule NOT_NULL
ruleNOT_NULL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNOT_NULLAccess().getGroup()); }
(rule__NOT_NULL__Group__0)
{ after(grammarAccess.getNOT_NULLAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableValue
entryRuleVariableValue 
:
{ before(grammarAccess.getVariableValueRule()); }
	 ruleVariableValue
{ after(grammarAccess.getVariableValueRule()); } 
	 EOF 
;

// Rule VariableValue
ruleVariableValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableValueAccess().getGroup()); }
(rule__VariableValue__Group__0)
{ after(grammarAccess.getVariableValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntLiteralExpression
entryRuleIntLiteralExpression 
:
{ before(grammarAccess.getIntLiteralExpressionRule()); }
	 ruleIntLiteralExpression
{ after(grammarAccess.getIntLiteralExpressionRule()); } 
	 EOF 
;

// Rule IntLiteralExpression
ruleIntLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntLiteralExpressionAccess().getValueAssignment()); }
(rule__IntLiteralExpression__ValueAssignment)
{ after(grammarAccess.getIntLiteralExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteralExpression
entryRuleStringLiteralExpression 
:
{ before(grammarAccess.getStringLiteralExpressionRule()); }
	 ruleStringLiteralExpression
{ after(grammarAccess.getStringLiteralExpressionRule()); } 
	 EOF 
;

// Rule StringLiteralExpression
ruleStringLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralExpressionAccess().getValueAssignment()); }
(rule__StringLiteralExpression__ValueAssignment)
{ after(grammarAccess.getStringLiteralExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteralExpression
entryRuleBooleanLiteralExpression 
:
{ before(grammarAccess.getBooleanLiteralExpressionRule()); }
	 ruleBooleanLiteralExpression
{ after(grammarAccess.getBooleanLiteralExpressionRule()); } 
	 EOF 
;

// Rule BooleanLiteralExpression
ruleBooleanLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralExpressionAccess().getValueAssignment()); }
(rule__BooleanLiteralExpression__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullLiteralExpression
entryRuleNullLiteralExpression 
:
{ before(grammarAccess.getNullLiteralExpressionRule()); }
	 ruleNullLiteralExpression
{ after(grammarAccess.getNullLiteralExpressionRule()); } 
	 EOF 
;

// Rule NullLiteralExpression
ruleNullLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullLiteralExpressionAccess().getGroup()); }
(rule__NullLiteralExpression__Group__0)
{ after(grammarAccess.getNullLiteralExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableRefExpression
entryRuleVariableRefExpression 
:
{ before(grammarAccess.getVariableRefExpressionRule()); }
	 ruleVariableRefExpression
{ after(grammarAccess.getVariableRefExpressionRule()); } 
	 EOF 
;

// Rule VariableRefExpression
ruleVariableRefExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableRefExpressionAccess().getVariableAssignment()); }
(rule__VariableRefExpression__VariableAssignment)
{ after(grammarAccess.getVariableRefExpressionAccess().getVariableAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLabel
entryRuleLabel 
:
{ before(grammarAccess.getLabelRule()); }
	 ruleLabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule Label
ruleLabel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLabelAccess().getGroup()); }
(rule__Label__Group__0)
{ after(grammarAccess.getLabelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentStatement
entryRuleAssignmentStatement 
:
{ before(grammarAccess.getAssignmentStatementRule()); }
	 ruleAssignmentStatement
{ after(grammarAccess.getAssignmentStatementRule()); } 
	 EOF 
;

// Rule AssignmentStatement
ruleAssignmentStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentStatementAccess().getGroup()); }
(rule__AssignmentStatement__Group__0)
{ after(grammarAccess.getAssignmentStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentTarget
entryRuleAssignmentTarget 
:
{ before(grammarAccess.getAssignmentTargetRule()); }
	 ruleAssignmentTarget
{ after(grammarAccess.getAssignmentTargetRule()); } 
	 EOF 
;

// Rule AssignmentTarget
ruleAssignmentTarget
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentTargetAccess().getVariableAssignmentTargetParserRuleCall()); }
	ruleVariableAssignmentTarget
{ after(grammarAccess.getAssignmentTargetAccess().getVariableAssignmentTargetParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableAssignmentTarget
entryRuleVariableAssignmentTarget 
:
{ before(grammarAccess.getVariableAssignmentTargetRule()); }
	 ruleVariableAssignmentTarget
{ after(grammarAccess.getVariableAssignmentTargetRule()); } 
	 EOF 
;

// Rule VariableAssignmentTarget
ruleVariableAssignmentTarget
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAssignmentTargetAccess().getVariableAssignment()); }
(rule__VariableAssignmentTarget__VariableAssignment)
{ after(grammarAccess.getVariableAssignmentTargetAccess().getVariableAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockStatement
entryRuleBlockStatement 
:
{ before(grammarAccess.getBlockStatementRule()); }
	 ruleBlockStatement
{ after(grammarAccess.getBlockStatementRule()); } 
	 EOF 
;

// Rule BlockStatement
ruleBlockStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockStatementAccess().getGroup()); }
(rule__BlockStatement__Group__0)
{ after(grammarAccess.getBlockStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCaseStatement
entryRuleCaseStatement 
:
{ before(grammarAccess.getCaseStatementRule()); }
	 ruleCaseStatement
{ after(grammarAccess.getCaseStatementRule()); } 
	 EOF 
;

// Rule CaseStatement
ruleCaseStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCaseStatementAccess().getGroup()); }
(rule__CaseStatement__Group__0)
{ after(grammarAccess.getCaseStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCaseStatementWhenBranch
entryRuleCaseStatementWhenBranch 
:
{ before(grammarAccess.getCaseStatementWhenBranchRule()); }
	 ruleCaseStatementWhenBranch
{ after(grammarAccess.getCaseStatementWhenBranchRule()); } 
	 EOF 
;

// Rule CaseStatementWhenBranch
ruleCaseStatementWhenBranch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCaseStatementWhenBranchAccess().getGroup()); }
(rule__CaseStatementWhenBranch__Group__0)
{ after(grammarAccess.getCaseStatementWhenBranchAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCaseStatementElseBranch
entryRuleCaseStatementElseBranch 
:
{ before(grammarAccess.getCaseStatementElseBranchRule()); }
	 ruleCaseStatementElseBranch
{ after(grammarAccess.getCaseStatementElseBranchRule()); } 
	 EOF 
;

// Rule CaseStatementElseBranch
ruleCaseStatementElseBranch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCaseStatementElseBranchAccess().getGroup()); }
(rule__CaseStatementElseBranch__Group__0)
{ after(grammarAccess.getCaseStatementElseBranchAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCloseStatement
entryRuleCloseStatement 
:
{ before(grammarAccess.getCloseStatementRule()); }
	 ruleCloseStatement
{ after(grammarAccess.getCloseStatementRule()); } 
	 EOF 
;

// Rule CloseStatement
ruleCloseStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCloseStatementAccess().getGroup()); }
(rule__CloseStatement__Group__0)
{ after(grammarAccess.getCloseStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContinueStatement
entryRuleContinueStatement 
:
{ before(grammarAccess.getContinueStatementRule()); }
	 ruleContinueStatement
{ after(grammarAccess.getContinueStatementRule()); } 
	 EOF 
;

// Rule ContinueStatement
ruleContinueStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContinueStatementAccess().getGroup()); }
(rule__ContinueStatement__Group__0)
{ after(grammarAccess.getContinueStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExitStatement
entryRuleExitStatement 
:
{ before(grammarAccess.getExitStatementRule()); }
	 ruleExitStatement
{ after(grammarAccess.getExitStatementRule()); } 
	 EOF 
;

// Rule ExitStatement
ruleExitStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExitStatementAccess().getGroup()); }
(rule__ExitStatement__Group__0)
{ after(grammarAccess.getExitStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFetchStatement
entryRuleFetchStatement 
:
{ before(grammarAccess.getFetchStatementRule()); }
	 ruleFetchStatement
{ after(grammarAccess.getFetchStatementRule()); } 
	 EOF 
;

// Rule FetchStatement
ruleFetchStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFetchStatementAccess().getGroup()); }
(rule__FetchStatement__Group__0)
{ after(grammarAccess.getFetchStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFetchStatementIntoClause
entryRuleFetchStatementIntoClause 
:
{ before(grammarAccess.getFetchStatementIntoClauseRule()); }
	 ruleFetchStatementIntoClause
{ after(grammarAccess.getFetchStatementIntoClauseRule()); } 
	 EOF 
;

// Rule FetchStatementIntoClause
ruleFetchStatementIntoClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFetchStatementIntoClauseAccess().getAlternatives()); }
(rule__FetchStatementIntoClause__Alternatives)
{ after(grammarAccess.getFetchStatementIntoClauseAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFetchStatementSingleIntoClause
entryRuleFetchStatementSingleIntoClause 
:
{ before(grammarAccess.getFetchStatementSingleIntoClauseRule()); }
	 ruleFetchStatementSingleIntoClause
{ after(grammarAccess.getFetchStatementSingleIntoClauseRule()); } 
	 EOF 
;

// Rule FetchStatementSingleIntoClause
ruleFetchStatementSingleIntoClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFetchStatementSingleIntoClauseAccess().getGroup()); }
(rule__FetchStatementSingleIntoClause__Group__0)
{ after(grammarAccess.getFetchStatementSingleIntoClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFetchStatementBulkIntoClause
entryRuleFetchStatementBulkIntoClause 
:
{ before(grammarAccess.getFetchStatementBulkIntoClauseRule()); }
	 ruleFetchStatementBulkIntoClause
{ after(grammarAccess.getFetchStatementBulkIntoClauseRule()); } 
	 EOF 
;

// Rule FetchStatementBulkIntoClause
ruleFetchStatementBulkIntoClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFetchStatementBulkIntoClauseAccess().getGroup()); }
(rule__FetchStatementBulkIntoClause__Group__0)
{ after(grammarAccess.getFetchStatementBulkIntoClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGotoStatement
entryRuleGotoStatement 
:
{ before(grammarAccess.getGotoStatementRule()); }
	 ruleGotoStatement
{ after(grammarAccess.getGotoStatementRule()); } 
	 EOF 
;

// Rule GotoStatement
ruleGotoStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGotoStatementAccess().getGroup()); }
(rule__GotoStatement__Group__0)
{ after(grammarAccess.getGotoStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatement
entryRuleIfStatement 
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfStatementAccess().getGroup()); }
(rule__IfStatement__Group__0)
{ after(grammarAccess.getIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatementElsifBranch
entryRuleIfStatementElsifBranch 
:
{ before(grammarAccess.getIfStatementElsifBranchRule()); }
	 ruleIfStatementElsifBranch
{ after(grammarAccess.getIfStatementElsifBranchRule()); } 
	 EOF 
;

// Rule IfStatementElsifBranch
ruleIfStatementElsifBranch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfStatementElsifBranchAccess().getGroup()); }
(rule__IfStatementElsifBranch__Group__0)
{ after(grammarAccess.getIfStatementElsifBranchAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatementElseBranch
entryRuleIfStatementElseBranch 
:
{ before(grammarAccess.getIfStatementElseBranchRule()); }
	 ruleIfStatementElseBranch
{ after(grammarAccess.getIfStatementElseBranchRule()); } 
	 EOF 
;

// Rule IfStatementElseBranch
ruleIfStatementElseBranch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfStatementElseBranchAccess().getGroup()); }
(rule__IfStatementElseBranch__Group__0)
{ after(grammarAccess.getIfStatementElseBranchAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoopStatement
entryRuleLoopStatement 
:
{ before(grammarAccess.getLoopStatementRule()); }
	 ruleLoopStatement
{ after(grammarAccess.getLoopStatementRule()); } 
	 EOF 
;

// Rule LoopStatement
ruleLoopStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoopStatementAccess().getAlternatives()); }
(rule__LoopStatement__Alternatives)
{ after(grammarAccess.getLoopStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicLoopStatement
entryRuleBasicLoopStatement 
:
{ before(grammarAccess.getBasicLoopStatementRule()); }
	 ruleBasicLoopStatement
{ after(grammarAccess.getBasicLoopStatementRule()); } 
	 EOF 
;

// Rule BasicLoopStatement
ruleBasicLoopStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicLoopStatementAccess().getGroup()); }
(rule__BasicLoopStatement__Group__0)
{ after(grammarAccess.getBasicLoopStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileLoopStatement
entryRuleWhileLoopStatement 
:
{ before(grammarAccess.getWhileLoopStatementRule()); }
	 ruleWhileLoopStatement
{ after(grammarAccess.getWhileLoopStatementRule()); } 
	 EOF 
;

// Rule WhileLoopStatement
ruleWhileLoopStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileLoopStatementAccess().getGroup()); }
(rule__WhileLoopStatement__Group__0)
{ after(grammarAccess.getWhileLoopStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForLoopStatement
entryRuleForLoopStatement 
:
{ before(grammarAccess.getForLoopStatementRule()); }
	 ruleForLoopStatement
{ after(grammarAccess.getForLoopStatementRule()); } 
	 EOF 
;

// Rule ForLoopStatement
ruleForLoopStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForLoopStatementAccess().getGroup()); }
(rule__ForLoopStatement__Group__0)
{ after(grammarAccess.getForLoopStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnStatement
entryRuleReturnStatement 
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
(rule__ReturnStatement__Group__0)
{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullStatement
entryRuleNullStatement 
:
{ before(grammarAccess.getNullStatementRule()); }
	 ruleNullStatement
{ after(grammarAccess.getNullStatementRule()); } 
	 EOF 
;

// Rule NullStatement
ruleNullStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullStatementAccess().getGroup()); }
(rule__NullStatement__Group__0)
{ after(grammarAccess.getNullStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRaiseStatement
entryRuleRaiseStatement 
:
{ before(grammarAccess.getRaiseStatementRule()); }
	 ruleRaiseStatement
{ after(grammarAccess.getRaiseStatementRule()); } 
	 EOF 
;

// Rule RaiseStatement
ruleRaiseStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRaiseStatementAccess().getGroup()); }
(rule__RaiseStatement__Group__0)
{ after(grammarAccess.getRaiseStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableRef
entryRuleVariableRef 
:
{ before(grammarAccess.getVariableRefRule()); }
	 ruleVariableRef
{ after(grammarAccess.getVariableRefRule()); } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableRefAccess().getGroup()); }
(rule__VariableRef__Group__0)
{ after(grammarAccess.getVariableRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleName
entryRuleName 
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNameAccess().getDeclarationAssignment()); }
(rule__Name__DeclarationAssignment)
{ after(grammarAccess.getNameAccess().getDeclarationAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoopVariableDeclaration
entryRuleLoopVariableDeclaration 
:
{ before(grammarAccess.getLoopVariableDeclarationRule()); }
	 ruleLoopVariableDeclaration
{ after(grammarAccess.getLoopVariableDeclarationRule()); } 
	 EOF 
;

// Rule LoopVariableDeclaration
ruleLoopVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoopVariableDeclarationAccess().getNameAssignment()); }
(rule__LoopVariableDeclaration__NameAssignment)
{ after(grammarAccess.getLoopVariableDeclarationAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}






// Rule InvokerRight
ruleInvokerRight
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokerRightAccess().getAlternatives()); }
(rule__InvokerRight__Alternatives)
{ after(grammarAccess.getInvokerRightAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__CompilationUnit__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompilationUnitAccess().getProcedureParserRuleCall_0()); }
	ruleProcedure
{ after(grammarAccess.getCompilationUnitAccess().getProcedureParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCompilationUnitAccess().getFunctionParserRuleCall_1()); }
	ruleFunction
{ after(grammarAccess.getCompilationUnitAccess().getFunctionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCompilationUnitAccess().getPackageParserRuleCall_2()); }
	rulePackage
{ after(grammarAccess.getCompilationUnitAccess().getPackageParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Alternatives_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getISKeyword_5_0()); }

	'IS' 

{ after(grammarAccess.getProcedureAccess().getISKeyword_5_0()); }
)

    |(
{ before(grammarAccess.getProcedureAccess().getASKeyword_5_1()); }

	'AS' 

{ after(grammarAccess.getProcedureAccess().getASKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getISKeyword_4_0()); }

	'IS' 

{ after(grammarAccess.getPackageAccess().getISKeyword_4_0()); }
)

    |(
{ before(grammarAccess.getPackageAccess().getASKeyword_4_1()); }

	'AS' 

{ after(grammarAccess.getPackageAccess().getASKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDefinitionAccess().getISKeyword_3_0()); }

	'IS' 

{ after(grammarAccess.getProcedureDefinitionAccess().getISKeyword_3_0()); }
)

    |(
{ before(grammarAccess.getProcedureDefinitionAccess().getASKeyword_3_1()); }

	'AS' 

{ after(grammarAccess.getProcedureDefinitionAccess().getASKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Alternatives_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getISKeyword_7_0()); }

	'IS' 

{ after(grammarAccess.getFunctionAccess().getISKeyword_7_0()); }
)

    |(
{ before(grammarAccess.getFunctionAccess().getASKeyword_7_1()); }

	'AS' 

{ after(grammarAccess.getFunctionAccess().getASKeyword_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterValue__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterValueAccess().getColonEqualsSignKeyword_0_0()); }

	':=' 

{ after(grammarAccess.getParameterValueAccess().getColonEqualsSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getParameterValueAccess().getDEFAULTKeyword_0_1()); }

	'DEFAULT' 

{ after(grammarAccess.getParameterValueAccess().getDEFAULTKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterBehavior__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterBehaviorAccess().getINKeyword_0()); }

	'IN' 

{ after(grammarAccess.getParameterBehaviorAccess().getINKeyword_0()); }
)

    |(
{ before(grammarAccess.getParameterBehaviorAccess().getGroup_1()); }
(rule__ParameterBehavior__Group_1__0)
{ after(grammarAccess.getParameterBehaviorAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getParameterBehaviorAccess().getGroup_2()); }
(rule__ParameterBehavior__Group_2__0)
{ after(grammarAccess.getParameterBehaviorAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pragma__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaAccess().getPragmaRestrictReferencesParserRuleCall_0()); }
	rulePragmaRestrictReferences
{ after(grammarAccess.getPragmaAccess().getPragmaRestrictReferencesParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPragmaAccess().getPragmaTimestampParserRuleCall_1()); }
	rulePragmaTimestamp
{ after(grammarAccess.getPragmaAccess().getPragmaTimestampParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getSubprogramNameParserRuleCall_3_0()); }
	ruleSubprogramName
{ after(grammarAccess.getPragmaRestrictReferencesAccess().getSubprogramNameParserRuleCall_3_0()); }
)

    |(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getDEFAULTKeyword_3_1()); }

	'DEFAULT' 

{ after(grammarAccess.getPragmaRestrictReferencesAccess().getDEFAULTKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferencesRestriction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getRNDSKeyword_0()); }

	'RNDS' 

{ after(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getRNDSKeyword_0()); }
)

    |(
{ before(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getWNDSKeyword_1()); }

	'WNDS' 

{ after(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getWNDSKeyword_1()); }
)

    |(
{ before(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getRNPSKeyword_2()); }

	'RNPS' 

{ after(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getRNPSKeyword_2()); }
)

    |(
{ before(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getWNPSKeyword_3()); }

	'WNPS' 

{ after(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getWNPSKeyword_3()); }
)

    |(
{ before(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getTRUSTKeyword_4()); }

	'TRUST' 

{ after(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getTRUSTKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getGroup_0()); }
(rule__DataType__Group_0__0)
{ after(grammarAccess.getDataTypeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getDataTypeAccess().getGroup_1()); }
(rule__DataType__Group_1__0)
{ after(grammarAccess.getDataTypeAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getDataTypeAccess().getBOOLEANKeyword_2()); }

	'BOOLEAN' 

{ after(grammarAccess.getDataTypeAccess().getBOOLEANKeyword_2()); }
)

    |(
{ before(grammarAccess.getDataTypeAccess().getIDTerminalRuleCall_3()); }
	RULE_ID
{ after(grammarAccess.getDataTypeAccess().getIDTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureContent__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureContentAccess().getProcedureImplementationParserRuleCall_0()); }
	ruleProcedureImplementation
{ after(grammarAccess.getProcedureContentAccess().getProcedureImplementationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getProcedureContentAccess().getExternalProcedureDeclarationParserRuleCall_1()); }
	ruleExternalProcedureDeclaration
{ after(grammarAccess.getProcedureContentAccess().getExternalProcedureDeclarationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionClause__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionClauseAccess().getFunctionInvokerRightsClauseParserRuleCall_0()); }
	ruleFunctionInvokerRightsClause
{ after(grammarAccess.getFunctionClauseAccess().getFunctionInvokerRightsClauseParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFunctionClauseAccess().getDeterministicClauseParserRuleCall_1()); }
	ruleDeterministicClause
{ after(grammarAccess.getFunctionClauseAccess().getDeterministicClauseParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getFunctionClauseAccess().getResultCacheClauseParserRuleCall_2()); }
	ruleResultCacheClause
{ after(grammarAccess.getFunctionClauseAccess().getResultCacheClauseParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getFunctionClauseAccess().getPipelinedClauseParserRuleCall_3()); }
	rulePipelinedClause
{ after(grammarAccess.getFunctionClauseAccess().getPipelinedClauseParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemAccess().getItemDeclarationParserRuleCall_0()); }
	ruleItemDeclaration
{ after(grammarAccess.getItemAccess().getItemDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getItemAccess().getProcedureDeclarationParserRuleCall_1()); }
	ruleProcedureDeclaration
{ after(grammarAccess.getItemAccess().getProcedureDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getItemAccess().getProcedureDefinitionParserRuleCall_2()); }
	ruleProcedureDefinition
{ after(grammarAccess.getItemAccess().getProcedureDefinitionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getItemAccess().getPragmaParserRuleCall_3()); }
	rulePragma
{ after(grammarAccess.getItemAccess().getPragmaParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getColonEqualsSignKeyword_0_0()); }

	':=' 

{ after(grammarAccess.getVariableValueAccess().getColonEqualsSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getVariableValueAccess().getDEFAULTKeyword_0_1()); }

	'DEFAULT' 

{ after(grammarAccess.getVariableValueAccess().getDEFAULTKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getIntLiteralExpressionParserRuleCall_0()); }
	ruleIntLiteralExpression
{ after(grammarAccess.getExpressionAccess().getIntLiteralExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getStringLiteralExpressionParserRuleCall_1()); }
	ruleStringLiteralExpression
{ after(grammarAccess.getExpressionAccess().getStringLiteralExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getBooleanLiteralExpressionParserRuleCall_2()); }
	ruleBooleanLiteralExpression
{ after(grammarAccess.getExpressionAccess().getBooleanLiteralExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getNullLiteralExpressionParserRuleCall_3()); }
	ruleNullLiteralExpression
{ after(grammarAccess.getExpressionAccess().getNullLiteralExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getVariableRefExpressionParserRuleCall_4()); }
	ruleVariableRefExpression
{ after(grammarAccess.getExpressionAccess().getVariableRefExpressionParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteralExpression__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralExpressionAccess().getValueTRUEKeyword_0_0()); }

	'TRUE' 

{ after(grammarAccess.getBooleanLiteralExpressionAccess().getValueTRUEKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralExpressionAccess().getValueFALSEKeyword_0_1()); }

	'FALSE' 

{ after(grammarAccess.getBooleanLiteralExpressionAccess().getValueFALSEKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall_0()); }
	ruleAssignmentStatement
{ after(grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getBlockStatementParserRuleCall_1()); }
	ruleBlockStatement
{ after(grammarAccess.getStatementAccess().getBlockStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getCaseStatementParserRuleCall_2()); }
	ruleCaseStatement
{ after(grammarAccess.getStatementAccess().getCaseStatementParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getCloseStatementParserRuleCall_3()); }
	ruleCloseStatement
{ after(grammarAccess.getStatementAccess().getCloseStatementParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_4()); }
	ruleContinueStatement
{ after(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getExitStatementParserRuleCall_5()); }
	ruleExitStatement
{ after(grammarAccess.getStatementAccess().getExitStatementParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getFetchStatementParserRuleCall_6()); }
	ruleFetchStatement
{ after(grammarAccess.getStatementAccess().getFetchStatementParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getGotoStatementParserRuleCall_7()); }
	ruleGotoStatement
{ after(grammarAccess.getStatementAccess().getGotoStatementParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_8()); }
	ruleIfStatement
{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_9()); }
	ruleLoopStatement
{ after(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getNullStatementParserRuleCall_10()); }
	ruleNullStatement
{ after(grammarAccess.getStatementAccess().getNullStatementParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getRaiseStatementParserRuleCall_11()); }
	ruleRaiseStatement
{ after(grammarAccess.getStatementAccess().getRaiseStatementParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_12()); }
	ruleReturnStatement
{ after(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatementIntoClause__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementIntoClauseAccess().getFetchStatementSingleIntoClauseParserRuleCall_0()); }
	ruleFetchStatementSingleIntoClause
{ after(grammarAccess.getFetchStatementIntoClauseAccess().getFetchStatementSingleIntoClauseParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFetchStatementIntoClauseAccess().getFetchStatementBulkIntoClauseParserRuleCall_1()); }
	ruleFetchStatementBulkIntoClause
{ after(grammarAccess.getFetchStatementIntoClauseAccess().getFetchStatementBulkIntoClauseParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getBasicLoopStatementParserRuleCall_0()); }
	ruleBasicLoopStatement
{ after(grammarAccess.getLoopStatementAccess().getBasicLoopStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLoopStatementAccess().getWhileLoopStatementParserRuleCall_1()); }
	ruleWhileLoopStatement
{ after(grammarAccess.getLoopStatementAccess().getWhileLoopStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLoopStatementAccess().getForLoopStatementParserRuleCall_2()); }
	ruleForLoopStatement
{ after(grammarAccess.getLoopStatementAccess().getForLoopStatementParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InvokerRight__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokerRightAccess().getCURRENT_USEREnumLiteralDeclaration_0()); }
(	'CURRENT_USER' 
)
{ after(grammarAccess.getInvokerRightAccess().getCURRENT_USEREnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getInvokerRightAccess().getDEFINEREnumLiteralDeclaration_1()); }
(	'DEFINER' 
)
{ after(grammarAccess.getInvokerRightAccess().getDEFINEREnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Procedure__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__0__Impl
	rule__Procedure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getPROCEDUREKeyword_0()); }

	'PROCEDURE' 

{ after(grammarAccess.getProcedureAccess().getPROCEDUREKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__1__Impl
	rule__Procedure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getGroup_1()); }
(rule__Procedure__Group_1__0)?
{ after(grammarAccess.getProcedureAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__2__Impl
	rule__Procedure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getNameAssignment_2()); }
(rule__Procedure__NameAssignment_2)
{ after(grammarAccess.getProcedureAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__3__Impl
	rule__Procedure__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getGroup_3()); }
(rule__Procedure__Group_3__0)?
{ after(grammarAccess.getProcedureAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__4__Impl
	rule__Procedure__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getInvokerRightsAssignment_4()); }
(rule__Procedure__InvokerRightsAssignment_4)?
{ after(grammarAccess.getProcedureAccess().getInvokerRightsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__5__Impl
	rule__Procedure__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getAlternatives_5()); }
(rule__Procedure__Alternatives_5)
{ after(grammarAccess.getProcedureAccess().getAlternatives_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getContentAssignment_6()); }
(rule__Procedure__ContentAssignment_6)
{ after(grammarAccess.getProcedureAccess().getContentAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Procedure__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group_1__0__Impl
	rule__Procedure__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getSchemaNameAssignment_1_0()); }
(rule__Procedure__SchemaNameAssignment_1_0)
{ after(grammarAccess.getProcedureAccess().getSchemaNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getProcedureAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Procedure__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group_3__0__Impl
	rule__Procedure__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group_3__1__Impl
	rule__Procedure__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getParametersAssignment_3_1()); }
(rule__Procedure__ParametersAssignment_3_1)
{ after(grammarAccess.getProcedureAccess().getParametersAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getProcedureAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Package__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__0__Impl
	rule__Package__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getPACKAGEKeyword_0()); }

	'PACKAGE' 

{ after(grammarAccess.getPackageAccess().getPACKAGEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__1__Impl
	rule__Package__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getGroup_1()); }
(rule__Package__Group_1__0)?
{ after(grammarAccess.getPackageAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__2__Impl
	rule__Package__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getNameAssignment_2()); }
(rule__Package__NameAssignment_2)
{ after(grammarAccess.getPackageAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__3__Impl
	rule__Package__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getInvokerRightsAssignment_3()); }
(rule__Package__InvokerRightsAssignment_3)?
{ after(grammarAccess.getPackageAccess().getInvokerRightsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__4__Impl
	rule__Package__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getAlternatives_4()); }
(rule__Package__Alternatives_4)
{ after(grammarAccess.getPackageAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__5__Impl
	rule__Package__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getItemsAssignment_5()); }
(rule__Package__ItemsAssignment_5)*
{ after(grammarAccess.getPackageAccess().getItemsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__6__Impl
	rule__Package__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getENDKeyword_6()); }

	'END' 

{ after(grammarAccess.getPackageAccess().getENDKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__7__Impl
	rule__Package__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getEndNameAssignment_7()); }
(rule__Package__EndNameAssignment_7)?
{ after(grammarAccess.getPackageAccess().getEndNameAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getSemicolonKeyword_8()); }

	';' 

{ after(grammarAccess.getPackageAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Package__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group_1__0__Impl
	rule__Package__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getSchemaNameAssignment_1_0()); }
(rule__Package__SchemaNameAssignment_1_0)
{ after(grammarAccess.getPackageAccess().getSchemaNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getPackageAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcedureDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group__0__Impl
	rule__ProcedureDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getPROCEDUREKeyword_0()); }

	'PROCEDURE' 

{ after(grammarAccess.getProcedureDeclarationAccess().getPROCEDUREKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group__1__Impl
	rule__ProcedureDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getNameAssignment_1()); }
(rule__ProcedureDeclaration__NameAssignment_1)
{ after(grammarAccess.getProcedureDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group__2__Impl
	rule__ProcedureDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getGroup_2()); }
(rule__ProcedureDeclaration__Group_2__0)?
{ after(grammarAccess.getProcedureDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ProcedureDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group_2__0__Impl
	rule__ProcedureDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getProcedureDeclarationAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group_2__1__Impl
	rule__ProcedureDeclaration__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getParametersAssignment_2_1()); }
(rule__ProcedureDeclaration__ParametersAssignment_2_1)
{ after(grammarAccess.getProcedureDeclarationAccess().getParametersAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getProcedureDeclarationAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ProcedureDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDefinition__Group__0__Impl
	rule__ProcedureDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDefinitionAccess().getPROCEDUREKeyword_0()); }

	'PROCEDURE' 

{ after(grammarAccess.getProcedureDefinitionAccess().getPROCEDUREKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDefinition__Group__1__Impl
	rule__ProcedureDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDefinitionAccess().getNameAssignment_1()); }
(rule__ProcedureDefinition__NameAssignment_1)
{ after(grammarAccess.getProcedureDefinitionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDefinition__Group__2__Impl
	rule__ProcedureDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDefinitionAccess().getGroup_2()); }
(rule__ProcedureDefinition__Group_2__0)?
{ after(grammarAccess.getProcedureDefinitionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDefinition__Group__3__Impl
	rule__ProcedureDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDefinitionAccess().getAlternatives_3()); }
(rule__ProcedureDefinition__Alternatives_3)
{ after(grammarAccess.getProcedureDefinitionAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDefinitionAccess().getImplementationAssignment_4()); }
(rule__ProcedureDefinition__ImplementationAssignment_4)
{ after(grammarAccess.getProcedureDefinitionAccess().getImplementationAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ProcedureDefinition__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDefinition__Group_2__0__Impl
	rule__ProcedureDefinition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDefinitionAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getProcedureDefinitionAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDefinition__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDefinition__Group_2__1__Impl
	rule__ProcedureDefinition__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDefinitionAccess().getParametersAssignment_2_1()); }
(rule__ProcedureDefinition__ParametersAssignment_2_1)
{ after(grammarAccess.getProcedureDefinitionAccess().getParametersAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDefinition__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDefinition__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDefinitionAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getProcedureDefinitionAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getFUNCTIONKeyword_0()); }

	'FUNCTION' 

{ after(grammarAccess.getFunctionAccess().getFUNCTIONKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_1()); }
(rule__Function__Group_1__0)?
{ after(grammarAccess.getFunctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_2()); }
(rule__Function__NameAssignment_2)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_3()); }
(rule__Function__Group_3__0)?
{ after(grammarAccess.getFunctionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRETURNKeyword_4()); }

	'RETURN' 

{ after(grammarAccess.getFunctionAccess().getRETURNKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__5__Impl
	rule__Function__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getReturnTypeAssignment_5()); }
(rule__Function__ReturnTypeAssignment_5)
{ after(grammarAccess.getFunctionAccess().getReturnTypeAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__6__Impl
	rule__Function__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getFunctionClausesAssignment_6()); }
(rule__Function__FunctionClausesAssignment_6)
{ after(grammarAccess.getFunctionAccess().getFunctionClausesAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__7__Impl
	rule__Function__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getAlternatives_7()); }
(rule__Function__Alternatives_7)
{ after(grammarAccess.getFunctionAccess().getAlternatives_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getContentAssignment_8()); }
(rule__Function__ContentAssignment_8)
{ after(grammarAccess.getFunctionAccess().getContentAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Function__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_1__0__Impl
	rule__Function__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getSchemaNameAssignment_1_0()); }
(rule__Function__SchemaNameAssignment_1_0)
{ after(grammarAccess.getFunctionAccess().getSchemaNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getFunctionAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__0__Impl
	rule__Function__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__1__Impl
	rule__Function__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParametersAssignment_3_1()); }
(rule__Function__ParametersAssignment_3_1)
{ after(grammarAccess.getFunctionAccess().getParametersAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParameterSequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterSequence__Group__0__Impl
	rule__ParameterSequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterSequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterSequenceAccess().getParametersAssignment_0()); }
(rule__ParameterSequence__ParametersAssignment_0)
{ after(grammarAccess.getParameterSequenceAccess().getParametersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterSequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterSequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterSequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterSequenceAccess().getGroup_1()); }
(rule__ParameterSequence__Group_1__0)*
{ after(grammarAccess.getParameterSequenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterSequence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterSequence__Group_1__0__Impl
	rule__ParameterSequence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterSequence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterSequenceAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getParameterSequenceAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterSequence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterSequence__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterSequence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterSequenceAccess().getParametersAssignment_1_1()); }
(rule__ParameterSequence__ParametersAssignment_1_1)
{ after(grammarAccess.getParameterSequenceAccess().getParametersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__0__Impl
	rule__ParameterDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getNameAssignment_0()); }
(rule__ParameterDeclaration__NameAssignment_0)
{ after(grammarAccess.getParameterDeclarationAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__1__Impl
	rule__ParameterDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getBehaviorAssignment_1()); }
(rule__ParameterDeclaration__BehaviorAssignment_1)?
{ after(grammarAccess.getParameterDeclarationAccess().getBehaviorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__2__Impl
	rule__ParameterDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getDataTypeAssignment_2()); }
(rule__ParameterDeclaration__DataTypeAssignment_2)
{ after(grammarAccess.getParameterDeclarationAccess().getDataTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getValueAssignment_3()); }
(rule__ParameterDeclaration__ValueAssignment_3)?
{ after(grammarAccess.getParameterDeclarationAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ParameterValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterValue__Group__0__Impl
	rule__ParameterValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterValueAccess().getAlternatives_0()); }
(rule__ParameterValue__Alternatives_0)
{ after(grammarAccess.getParameterValueAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterValueAccess().getExpressionAssignment_1()); }
(rule__ParameterValue__ExpressionAssignment_1)
{ after(grammarAccess.getParameterValueAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterBehavior__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterBehavior__Group_1__0__Impl
	rule__ParameterBehavior__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterBehavior__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterBehaviorAccess().getOUTKeyword_1_0()); }

	'OUT' 

{ after(grammarAccess.getParameterBehaviorAccess().getOUTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterBehavior__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterBehavior__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterBehavior__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterBehaviorAccess().getNOCOPYKeyword_1_1()); }
(
	'NOCOPY' 
)?
{ after(grammarAccess.getParameterBehaviorAccess().getNOCOPYKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterBehavior__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterBehavior__Group_2__0__Impl
	rule__ParameterBehavior__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterBehavior__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterBehaviorAccess().getINKeyword_2_0()); }

	'IN' 

{ after(grammarAccess.getParameterBehaviorAccess().getINKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterBehavior__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterBehavior__Group_2__1__Impl
	rule__ParameterBehavior__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterBehavior__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterBehaviorAccess().getOUTKeyword_2_1()); }

	'OUT' 

{ after(grammarAccess.getParameterBehaviorAccess().getOUTKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterBehavior__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterBehavior__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterBehavior__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterBehaviorAccess().getNOCOPYKeyword_2_2()); }
(
	'NOCOPY' 
)?
{ after(grammarAccess.getParameterBehaviorAccess().getNOCOPYKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PragmaRestrictReferences__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaRestrictReferences__Group__0__Impl
	rule__PragmaRestrictReferences__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getPRAGMAKeyword_0()); }

	'PRAGMA' 

{ after(grammarAccess.getPragmaRestrictReferencesAccess().getPRAGMAKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaRestrictReferences__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaRestrictReferences__Group__1__Impl
	rule__PragmaRestrictReferences__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getRESTRICT_REFERENCESKeyword_1()); }

	'RESTRICT_REFERENCES' 

{ after(grammarAccess.getPragmaRestrictReferencesAccess().getRESTRICT_REFERENCESKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaRestrictReferences__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaRestrictReferences__Group__2__Impl
	rule__PragmaRestrictReferences__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getPragmaRestrictReferencesAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaRestrictReferences__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaRestrictReferences__Group__3__Impl
	rule__PragmaRestrictReferences__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getAlternatives_3()); }
(rule__PragmaRestrictReferences__Alternatives_3)
{ after(grammarAccess.getPragmaRestrictReferencesAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaRestrictReferences__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaRestrictReferences__Group__4__Impl
	rule__PragmaRestrictReferences__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getCommaKeyword_4()); }

	',' 

{ after(grammarAccess.getPragmaRestrictReferencesAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaRestrictReferences__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaRestrictReferences__Group__5__Impl
	rule__PragmaRestrictReferences__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsAssignment_5()); }
(rule__PragmaRestrictReferences__RestrictionsAssignment_5)
{ after(grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaRestrictReferences__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaRestrictReferences__Group__6__Impl
	rule__PragmaRestrictReferences__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getGroup_6()); }
(rule__PragmaRestrictReferences__Group_6__0)*
{ after(grammarAccess.getPragmaRestrictReferencesAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaRestrictReferences__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaRestrictReferences__Group__7__Impl
	rule__PragmaRestrictReferences__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getPragmaRestrictReferencesAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaRestrictReferences__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaRestrictReferences__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getSemicolonKeyword_8()); }

	';' 

{ after(grammarAccess.getPragmaRestrictReferencesAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__PragmaRestrictReferences__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaRestrictReferences__Group_6__0__Impl
	rule__PragmaRestrictReferences__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getCommaKeyword_6_0()); }

	',' 

{ after(grammarAccess.getPragmaRestrictReferencesAccess().getCommaKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaRestrictReferences__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaRestrictReferences__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsAssignment_6_1()); }
(rule__PragmaRestrictReferences__RestrictionsAssignment_6_1)
{ after(grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PragmaTimestamp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaTimestamp__Group__0__Impl
	rule__PragmaTimestamp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaTimestamp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaTimestampAccess().getPRAGMAKeyword_0()); }

	'PRAGMA' 

{ after(grammarAccess.getPragmaTimestampAccess().getPRAGMAKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaTimestamp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaTimestamp__Group__1__Impl
	rule__PragmaTimestamp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaTimestamp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaTimestampAccess().getTIMESTAMPKeyword_1()); }

	'TIMESTAMP' 

{ after(grammarAccess.getPragmaTimestampAccess().getTIMESTAMPKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaTimestamp__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaTimestamp__Group__2__Impl
	rule__PragmaTimestamp__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaTimestamp__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaTimestampAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getPragmaTimestampAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaTimestamp__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaTimestamp__Group__3__Impl
	rule__PragmaTimestamp__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaTimestamp__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaTimestampAccess().getTimestampAssignment_3()); }
(rule__PragmaTimestamp__TimestampAssignment_3)
{ after(grammarAccess.getPragmaTimestampAccess().getTimestampAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaTimestamp__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaTimestamp__Group__4__Impl
	rule__PragmaTimestamp__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaTimestamp__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaTimestampAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getPragmaTimestampAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaTimestamp__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaTimestamp__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaTimestamp__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaTimestampAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getPragmaTimestampAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__DataType__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group_0__0__Impl
	rule__DataType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getNUMBERKeyword_0_0()); }

	'NUMBER' 

{ after(grammarAccess.getDataTypeAccess().getNUMBERKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getGroup_0_1()); }
(rule__DataType__Group_0_1__0)?
{ after(grammarAccess.getDataTypeAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataType__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group_0_1__0__Impl
	rule__DataType__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getLeftParenthesisKeyword_0_1_0()); }

	'(' 

{ after(grammarAccess.getDataTypeAccess().getLeftParenthesisKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group_0_1__1__Impl
	rule__DataType__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getINTTerminalRuleCall_0_1_1()); }
	RULE_INT
{ after(grammarAccess.getDataTypeAccess().getINTTerminalRuleCall_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group_0_1__2__Impl
	rule__DataType__Group_0_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getGroup_0_1_2()); }
(rule__DataType__Group_0_1_2__0)?
{ after(grammarAccess.getDataTypeAccess().getGroup_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group_0_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group_0_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_0_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getRightParenthesisKeyword_0_1_3()); }

	')' 

{ after(grammarAccess.getDataTypeAccess().getRightParenthesisKeyword_0_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DataType__Group_0_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group_0_1_2__0__Impl
	rule__DataType__Group_0_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_0_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getCommaKeyword_0_1_2_0()); }

	',' 

{ after(grammarAccess.getDataTypeAccess().getCommaKeyword_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group_0_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group_0_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_0_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getINTTerminalRuleCall_0_1_2_1()); }
	RULE_INT
{ after(grammarAccess.getDataTypeAccess().getINTTerminalRuleCall_0_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataType__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group_1__0__Impl
	rule__DataType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getVARCHAR2Keyword_1_0()); }

	'VARCHAR2' 

{ after(grammarAccess.getDataTypeAccess().getVARCHAR2Keyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getGroup_1_1()); }
(rule__DataType__Group_1_1__0)?
{ after(grammarAccess.getDataTypeAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataType__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group_1_1__0__Impl
	rule__DataType__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getLeftParenthesisKeyword_1_1_0()); }

	'(' 

{ after(grammarAccess.getDataTypeAccess().getLeftParenthesisKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group_1_1__1__Impl
	rule__DataType__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getINTTerminalRuleCall_1_1_1()); }
	RULE_INT
{ after(grammarAccess.getDataTypeAccess().getINTTerminalRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getRightParenthesisKeyword_1_1_2()); }

	')' 

{ after(grammarAccess.getDataTypeAccess().getRightParenthesisKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ProcedureImplementation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureImplementation__Group__0__Impl
	rule__ProcedureImplementation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureImplementation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureImplementationAccess().getDeclareSectionAssignment_0()); }
(rule__ProcedureImplementation__DeclareSectionAssignment_0)?
{ after(grammarAccess.getProcedureImplementationAccess().getDeclareSectionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureImplementation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureImplementation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureImplementation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureImplementationAccess().getBodyAssignment_1()); }
(rule__ProcedureImplementation__BodyAssignment_1)
{ after(grammarAccess.getProcedureImplementationAccess().getBodyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionImplementation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionImplementation__Group__0__Impl
	rule__FunctionImplementation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionImplementation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionImplementationAccess().getDeclareSectionAssignment_0()); }
(rule__FunctionImplementation__DeclareSectionAssignment_0)?
{ after(grammarAccess.getFunctionImplementationAccess().getDeclareSectionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionImplementation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionImplementation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionImplementation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionImplementationAccess().getBodyAssignment_1()); }
(rule__FunctionImplementation__BodyAssignment_1)
{ after(grammarAccess.getFunctionImplementationAccess().getBodyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeterministicClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeterministicClause__Group__0__Impl
	rule__DeterministicClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeterministicClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeterministicClauseAccess().getDeterministicClauseAction_0()); }
(

)
{ after(grammarAccess.getDeterministicClauseAccess().getDeterministicClauseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeterministicClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeterministicClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeterministicClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeterministicClauseAccess().getDETERMINISTICKeyword_1()); }

	'DETERMINISTIC' 

{ after(grammarAccess.getDeterministicClauseAccess().getDETERMINISTICKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ResultCacheClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultCacheClause__Group__0__Impl
	rule__ResultCacheClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultCacheClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultCacheClauseAccess().getResultCacheClauseAction_0()); }
(

)
{ after(grammarAccess.getResultCacheClauseAccess().getResultCacheClauseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResultCacheClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultCacheClause__Group__1__Impl
	rule__ResultCacheClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultCacheClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultCacheClauseAccess().getRESULT_CACHEKeyword_1()); }

	'RESULT_CACHE' 

{ after(grammarAccess.getResultCacheClauseAccess().getRESULT_CACHEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResultCacheClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultCacheClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultCacheClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultCacheClauseAccess().getGroup_2()); }
(rule__ResultCacheClause__Group_2__0)?
{ after(grammarAccess.getResultCacheClauseAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ResultCacheClause__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultCacheClause__Group_2__0__Impl
	rule__ResultCacheClause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultCacheClause__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultCacheClauseAccess().getRELIES_ONKeyword_2_0()); }

	'RELIES_ON' 

{ after(grammarAccess.getResultCacheClauseAccess().getRELIES_ONKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResultCacheClause__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultCacheClause__Group_2__1__Impl
	rule__ResultCacheClause__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultCacheClause__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultCacheClauseAccess().getLeftParenthesisKeyword_2_1()); }

	'(' 

{ after(grammarAccess.getResultCacheClauseAccess().getLeftParenthesisKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResultCacheClause__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultCacheClause__Group_2__2__Impl
	rule__ResultCacheClause__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultCacheClause__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultCacheClauseAccess().getGroup_2_2()); }
(rule__ResultCacheClause__Group_2_2__0)?
{ after(grammarAccess.getResultCacheClauseAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResultCacheClause__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultCacheClause__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultCacheClause__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultCacheClauseAccess().getRightParenthesisKeyword_2_3()); }

	')' 

{ after(grammarAccess.getResultCacheClauseAccess().getRightParenthesisKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ResultCacheClause__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultCacheClause__Group_2_2__0__Impl
	rule__ResultCacheClause__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultCacheClause__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultCacheClauseAccess().getDataSourcesAssignment_2_2_0()); }
(rule__ResultCacheClause__DataSourcesAssignment_2_2_0)
{ after(grammarAccess.getResultCacheClauseAccess().getDataSourcesAssignment_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResultCacheClause__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultCacheClause__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultCacheClause__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultCacheClauseAccess().getGroup_2_2_1()); }
(rule__ResultCacheClause__Group_2_2_1__0)
{ after(grammarAccess.getResultCacheClauseAccess().getGroup_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ResultCacheClause__Group_2_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultCacheClause__Group_2_2_1__0__Impl
	rule__ResultCacheClause__Group_2_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultCacheClause__Group_2_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultCacheClauseAccess().getCommaKeyword_2_2_1_0()); }

	',' 

{ after(grammarAccess.getResultCacheClauseAccess().getCommaKeyword_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResultCacheClause__Group_2_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResultCacheClause__Group_2_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResultCacheClause__Group_2_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultCacheClauseAccess().getDataSourcesAssignment_2_2_1_1()); }
(rule__ResultCacheClause__DataSourcesAssignment_2_2_1_1)
{ after(grammarAccess.getResultCacheClauseAccess().getDataSourcesAssignment_2_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PipelinedClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PipelinedClause__Group__0__Impl
	rule__PipelinedClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PipelinedClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPipelinedClauseAccess().getPipelinedClauseAction_0()); }
(

)
{ after(grammarAccess.getPipelinedClauseAccess().getPipelinedClauseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PipelinedClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PipelinedClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PipelinedClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPipelinedClauseAccess().getPIPELINEDKeyword_1()); }

	'PIPELINED' 

{ after(grammarAccess.getPipelinedClauseAccess().getPIPELINEDKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StatementBody__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatementBody__Group__0__Impl
	rule__StatementBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementBody__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementBodyAccess().getBEGINKeyword_0()); }

	'BEGIN' 

{ after(grammarAccess.getStatementBodyAccess().getBEGINKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StatementBody__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatementBody__Group__1__Impl
	rule__StatementBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementBody__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getStatementBodyAccess().getStatementsAssignment_1()); }
(rule__StatementBody__StatementsAssignment_1)
{ after(grammarAccess.getStatementBodyAccess().getStatementsAssignment_1()); }
)
(
{ before(grammarAccess.getStatementBodyAccess().getStatementsAssignment_1()); }
(rule__StatementBody__StatementsAssignment_1)*
{ after(grammarAccess.getStatementBodyAccess().getStatementsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StatementBody__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatementBody__Group__2__Impl
	rule__StatementBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementBody__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementBodyAccess().getENDKeyword_2()); }

	'END' 

{ after(grammarAccess.getStatementBodyAccess().getENDKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StatementBody__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatementBody__Group__3__Impl
	rule__StatementBody__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementBody__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementBodyAccess().getEndNameAssignment_3()); }
(rule__StatementBody__EndNameAssignment_3)?
{ after(grammarAccess.getStatementBodyAccess().getEndNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StatementBody__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatementBody__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementBody__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementBodyAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getStatementBodyAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__DeclareSection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclareSection__Group__0__Impl
	rule__DeclareSection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclareSection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclareSectionAccess().getDECLAREKeyword_0()); }
(
	'DECLARE' 
)?
{ after(grammarAccess.getDeclareSectionAccess().getDECLAREKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclareSection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclareSection__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclareSection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getDeclareSectionAccess().getItemsAssignment_1()); }
(rule__DeclareSection__ItemsAssignment_1)
{ after(grammarAccess.getDeclareSectionAccess().getItemsAssignment_1()); }
)
(
{ before(grammarAccess.getDeclareSectionAccess().getItemsAssignment_1()); }
(rule__DeclareSection__ItemsAssignment_1)*
{ after(grammarAccess.getDeclareSectionAccess().getItemsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExternalProcedureDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalProcedureDeclaration__Group__0__Impl
	rule__ExternalProcedureDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalProcedureDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalProcedureDeclarationAccess().getExternalProcedureDeclarationAction_0()); }
(

)
{ after(grammarAccess.getExternalProcedureDeclarationAccess().getExternalProcedureDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalProcedureDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalProcedureDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalProcedureDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalProcedureDeclarationAccess().getEXTERNALKeyword_1()); }

	'EXTERNAL' 

{ after(grammarAccess.getExternalProcedureDeclarationAccess().getEXTERNALKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_0()); }
(rule__VariableDeclaration__NameAssignment_0)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getIsConstantAssignment_1()); }
(rule__VariableDeclaration__IsConstantAssignment_1)?
{ after(grammarAccess.getVariableDeclarationAccess().getIsConstantAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getDataTypeAssignment_2()); }
(rule__VariableDeclaration__DataTypeAssignment_2)
{ after(grammarAccess.getVariableDeclarationAccess().getDataTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__3__Impl
	rule__VariableDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getIsNotNullAssignment_3()); }
(rule__VariableDeclaration__IsNotNullAssignment_3)?
{ after(grammarAccess.getVariableDeclarationAccess().getIsNotNullAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__4__Impl
	rule__VariableDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getValueAssignment_4()); }
(rule__VariableDeclaration__ValueAssignment_4)?
{ after(grammarAccess.getVariableDeclarationAccess().getValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__NOT_NULL__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NOT_NULL__Group__0__Impl
	rule__NOT_NULL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NOT_NULL__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNOT_NULLAccess().getNOTKeyword_0()); }

	'NOT' 

{ after(grammarAccess.getNOT_NULLAccess().getNOTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NOT_NULL__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NOT_NULL__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NOT_NULL__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNOT_NULLAccess().getNULLKeyword_1()); }

	'NULL' 

{ after(grammarAccess.getNOT_NULLAccess().getNULLKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableValue__Group__0__Impl
	rule__VariableValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getAlternatives_0()); }
(rule__VariableValue__Alternatives_0)
{ after(grammarAccess.getVariableValueAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getExpressionAssignment_1()); }
(rule__VariableValue__ExpressionAssignment_1)
{ after(grammarAccess.getVariableValueAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NullLiteralExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullLiteralExpression__Group__0__Impl
	rule__NullLiteralExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteralExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullLiteralExpressionAccess().getNullLiteralExpressionAction_0()); }
(

)
{ after(grammarAccess.getNullLiteralExpressionAccess().getNullLiteralExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullLiteralExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullLiteralExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteralExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullLiteralExpressionAccess().getNULLKeyword_1()); }

	'NULL' 

{ after(grammarAccess.getNullLiteralExpressionAccess().getNULLKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Label__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group__0__Impl
	rule__Label__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getLessThanSignLessThanSignKeyword_0()); }

	'<<' 

{ after(grammarAccess.getLabelAccess().getLessThanSignLessThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Label__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group__1__Impl
	rule__Label__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getNameAssignment_1()); }
(rule__Label__NameAssignment_1)
{ after(grammarAccess.getLabelAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Label__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getGreaterThanSignGreaterThanSignKeyword_2()); }

	'>>' 

{ after(grammarAccess.getLabelAccess().getGreaterThanSignGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AssignmentStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentStatement__Group__0__Impl
	rule__AssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getLabelsAssignment_0()); }
(rule__AssignmentStatement__LabelsAssignment_0)*
{ after(grammarAccess.getAssignmentStatementAccess().getLabelsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentStatement__Group__1__Impl
	rule__AssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getTargetAssignment_1()); }
(rule__AssignmentStatement__TargetAssignment_1)
{ after(grammarAccess.getAssignmentStatementAccess().getTargetAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentStatement__Group__2__Impl
	rule__AssignmentStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getColonEqualsSignKeyword_2()); }

	':=' 

{ after(grammarAccess.getAssignmentStatementAccess().getColonEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentStatement__Group__3__Impl
	rule__AssignmentStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getExpressionAssignment_3()); }
(rule__AssignmentStatement__ExpressionAssignment_3)
{ after(grammarAccess.getAssignmentStatementAccess().getExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getAssignmentStatementAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BlockStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__0__Impl
	rule__BlockStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getLabelsAssignment_0()); }
(rule__BlockStatement__LabelsAssignment_0)*
{ after(grammarAccess.getBlockStatementAccess().getLabelsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__1__Impl
	rule__BlockStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getDeclareSectionAssignment_1()); }
(rule__BlockStatement__DeclareSectionAssignment_1)?
{ after(grammarAccess.getBlockStatementAccess().getDeclareSectionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getBodyAssignment_2()); }
(rule__BlockStatement__BodyAssignment_2)
{ after(grammarAccess.getBlockStatementAccess().getBodyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CaseStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__0__Impl
	rule__CaseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getLabelsAssignment_0()); }
(rule__CaseStatement__LabelsAssignment_0)*
{ after(grammarAccess.getCaseStatementAccess().getLabelsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__1__Impl
	rule__CaseStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getCASEKeyword_1()); }

	'CASE' 

{ after(grammarAccess.getCaseStatementAccess().getCASEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__2__Impl
	rule__CaseStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getExpressionAssignment_2()); }
(rule__CaseStatement__ExpressionAssignment_2)?
{ after(grammarAccess.getCaseStatementAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__3__Impl
	rule__CaseStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCaseStatementAccess().getWhenBranchesAssignment_3()); }
(rule__CaseStatement__WhenBranchesAssignment_3)
{ after(grammarAccess.getCaseStatementAccess().getWhenBranchesAssignment_3()); }
)
(
{ before(grammarAccess.getCaseStatementAccess().getWhenBranchesAssignment_3()); }
(rule__CaseStatement__WhenBranchesAssignment_3)*
{ after(grammarAccess.getCaseStatementAccess().getWhenBranchesAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__4__Impl
	rule__CaseStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getElseBranchAssignment_4()); }
(rule__CaseStatement__ElseBranchAssignment_4)?
{ after(grammarAccess.getCaseStatementAccess().getElseBranchAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__5__Impl
	rule__CaseStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getENDKeyword_5()); }

	'END' 

{ after(grammarAccess.getCaseStatementAccess().getENDKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__6__Impl
	rule__CaseStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getCASEKeyword_6()); }

	'CASE' 

{ after(grammarAccess.getCaseStatementAccess().getCASEKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__7__Impl
	rule__CaseStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getEndLabelAssignment_7()); }
(rule__CaseStatement__EndLabelAssignment_7)?
{ after(grammarAccess.getCaseStatementAccess().getEndLabelAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getSemicolonKeyword_8()); }

	';' 

{ after(grammarAccess.getCaseStatementAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__CaseStatementWhenBranch__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatementWhenBranch__Group__0__Impl
	rule__CaseStatementWhenBranch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatementWhenBranch__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementWhenBranchAccess().getWHENKeyword_0()); }

	'WHEN' 

{ after(grammarAccess.getCaseStatementWhenBranchAccess().getWHENKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatementWhenBranch__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatementWhenBranch__Group__1__Impl
	rule__CaseStatementWhenBranch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatementWhenBranch__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementWhenBranchAccess().getExpressionAssignment_1()); }
(rule__CaseStatementWhenBranch__ExpressionAssignment_1)
{ after(grammarAccess.getCaseStatementWhenBranchAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatementWhenBranch__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatementWhenBranch__Group__2__Impl
	rule__CaseStatementWhenBranch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatementWhenBranch__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementWhenBranchAccess().getTHENKeyword_2()); }

	'THEN' 

{ after(grammarAccess.getCaseStatementWhenBranchAccess().getTHENKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatementWhenBranch__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatementWhenBranch__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatementWhenBranch__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCaseStatementWhenBranchAccess().getStatementsAssignment_3()); }
(rule__CaseStatementWhenBranch__StatementsAssignment_3)
{ after(grammarAccess.getCaseStatementWhenBranchAccess().getStatementsAssignment_3()); }
)
(
{ before(grammarAccess.getCaseStatementWhenBranchAccess().getStatementsAssignment_3()); }
(rule__CaseStatementWhenBranch__StatementsAssignment_3)*
{ after(grammarAccess.getCaseStatementWhenBranchAccess().getStatementsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CaseStatementElseBranch__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatementElseBranch__Group__0__Impl
	rule__CaseStatementElseBranch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatementElseBranch__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementElseBranchAccess().getELSEKeyword_0()); }

	'ELSE' 

{ after(grammarAccess.getCaseStatementElseBranchAccess().getELSEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatementElseBranch__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatementElseBranch__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatementElseBranch__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCaseStatementElseBranchAccess().getStatementsAssignment_1()); }
(rule__CaseStatementElseBranch__StatementsAssignment_1)
{ after(grammarAccess.getCaseStatementElseBranchAccess().getStatementsAssignment_1()); }
)
(
{ before(grammarAccess.getCaseStatementElseBranchAccess().getStatementsAssignment_1()); }
(rule__CaseStatementElseBranch__StatementsAssignment_1)*
{ after(grammarAccess.getCaseStatementElseBranchAccess().getStatementsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CloseStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CloseStatement__Group__0__Impl
	rule__CloseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CloseStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloseStatementAccess().getLabelsAssignment_0()); }
(rule__CloseStatement__LabelsAssignment_0)*
{ after(grammarAccess.getCloseStatementAccess().getLabelsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CloseStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CloseStatement__Group__1__Impl
	rule__CloseStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CloseStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloseStatementAccess().getCLOSEKeyword_1()); }

	'CLOSE' 

{ after(grammarAccess.getCloseStatementAccess().getCLOSEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CloseStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CloseStatement__Group__2__Impl
	rule__CloseStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CloseStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloseStatementAccess().getCursorAssignment_2()); }
(rule__CloseStatement__CursorAssignment_2)
{ after(grammarAccess.getCloseStatementAccess().getCursorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CloseStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CloseStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CloseStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloseStatementAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getCloseStatementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ContinueStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__0__Impl
	rule__ContinueStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0()); }
(

)
{ after(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__1__Impl
	rule__ContinueStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getLabelsAssignment_1()); }
(rule__ContinueStatement__LabelsAssignment_1)*
{ after(grammarAccess.getContinueStatementAccess().getLabelsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__2__Impl
	rule__ContinueStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getCONTINUEKeyword_2()); }

	'CONTINUE' 

{ after(grammarAccess.getContinueStatementAccess().getCONTINUEKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__3__Impl
	rule__ContinueStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getLabelNameAssignment_3()); }
(rule__ContinueStatement__LabelNameAssignment_3)?
{ after(grammarAccess.getContinueStatementAccess().getLabelNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__4__Impl
	rule__ContinueStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getGroup_4()); }
(rule__ContinueStatement__Group_4__0)?
{ after(grammarAccess.getContinueStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getContinueStatementAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ContinueStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group_4__0__Impl
	rule__ContinueStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getWHENKeyword_4_0()); }

	'WHEN' 

{ after(grammarAccess.getContinueStatementAccess().getWHENKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getWhenExpressionAssignment_4_1()); }
(rule__ContinueStatement__WhenExpressionAssignment_4_1)
{ after(grammarAccess.getContinueStatementAccess().getWhenExpressionAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExitStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group__0__Impl
	rule__ExitStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getExitStatementAction_0()); }
(

)
{ after(grammarAccess.getExitStatementAccess().getExitStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group__1__Impl
	rule__ExitStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getLabelsAssignment_1()); }
(rule__ExitStatement__LabelsAssignment_1)*
{ after(grammarAccess.getExitStatementAccess().getLabelsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group__2__Impl
	rule__ExitStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getEXITKeyword_2()); }

	'EXIT' 

{ after(grammarAccess.getExitStatementAccess().getEXITKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group__3__Impl
	rule__ExitStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getLabelNameAssignment_3()); }
(rule__ExitStatement__LabelNameAssignment_3)?
{ after(grammarAccess.getExitStatementAccess().getLabelNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group__4__Impl
	rule__ExitStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getGroup_4()); }
(rule__ExitStatement__Group_4__0)?
{ after(grammarAccess.getExitStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getExitStatementAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ExitStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group_4__0__Impl
	rule__ExitStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getWHENKeyword_4_0()); }

	'WHEN' 

{ after(grammarAccess.getExitStatementAccess().getWHENKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getWhenExpressionAssignment_4_1()); }
(rule__ExitStatement__WhenExpressionAssignment_4_1)
{ after(grammarAccess.getExitStatementAccess().getWhenExpressionAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FetchStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatement__Group__0__Impl
	rule__FetchStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementAccess().getLabelsAssignment_0()); }
(rule__FetchStatement__LabelsAssignment_0)*
{ after(grammarAccess.getFetchStatementAccess().getLabelsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FetchStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatement__Group__1__Impl
	rule__FetchStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementAccess().getFETCHKeyword_1()); }

	'FETCH' 

{ after(grammarAccess.getFetchStatementAccess().getFETCHKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FetchStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatement__Group__2__Impl
	rule__FetchStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementAccess().getCursorAssignment_2()); }
(rule__FetchStatement__CursorAssignment_2)?
{ after(grammarAccess.getFetchStatementAccess().getCursorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FetchStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatement__Group__3__Impl
	rule__FetchStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementAccess().getIntoClauseAssignment_3()); }
(rule__FetchStatement__IntoClauseAssignment_3)
{ after(grammarAccess.getFetchStatementAccess().getIntoClauseAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FetchStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getFetchStatementAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FetchStatementSingleIntoClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatementSingleIntoClause__Group__0__Impl
	rule__FetchStatementSingleIntoClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatementSingleIntoClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementSingleIntoClauseAccess().getINTOKeyword_0()); }

	'INTO' 

{ after(grammarAccess.getFetchStatementSingleIntoClauseAccess().getINTOKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FetchStatementSingleIntoClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatementSingleIntoClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatementSingleIntoClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFetchStatementSingleIntoClauseAccess().getTargetVariablesAssignment_1()); }
(rule__FetchStatementSingleIntoClause__TargetVariablesAssignment_1)
{ after(grammarAccess.getFetchStatementSingleIntoClauseAccess().getTargetVariablesAssignment_1()); }
)
(
{ before(grammarAccess.getFetchStatementSingleIntoClauseAccess().getTargetVariablesAssignment_1()); }
(rule__FetchStatementSingleIntoClause__TargetVariablesAssignment_1)*
{ after(grammarAccess.getFetchStatementSingleIntoClauseAccess().getTargetVariablesAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FetchStatementBulkIntoClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatementBulkIntoClause__Group__0__Impl
	rule__FetchStatementBulkIntoClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatementBulkIntoClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementBulkIntoClauseAccess().getBULKKeyword_0()); }

	'BULK' 

{ after(grammarAccess.getFetchStatementBulkIntoClauseAccess().getBULKKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FetchStatementBulkIntoClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatementBulkIntoClause__Group__1__Impl
	rule__FetchStatementBulkIntoClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatementBulkIntoClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementBulkIntoClauseAccess().getCOLLECTKeyword_1()); }

	'COLLECT' 

{ after(grammarAccess.getFetchStatementBulkIntoClauseAccess().getCOLLECTKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FetchStatementBulkIntoClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatementBulkIntoClause__Group__2__Impl
	rule__FetchStatementBulkIntoClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatementBulkIntoClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementBulkIntoClauseAccess().getINTOKeyword_2()); }

	'INTO' 

{ after(grammarAccess.getFetchStatementBulkIntoClauseAccess().getINTOKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FetchStatementBulkIntoClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatementBulkIntoClause__Group__3__Impl
	rule__FetchStatementBulkIntoClause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatementBulkIntoClause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFetchStatementBulkIntoClauseAccess().getTargetVariablesAssignment_3()); }
(rule__FetchStatementBulkIntoClause__TargetVariablesAssignment_3)
{ after(grammarAccess.getFetchStatementBulkIntoClauseAccess().getTargetVariablesAssignment_3()); }
)
(
{ before(grammarAccess.getFetchStatementBulkIntoClauseAccess().getTargetVariablesAssignment_3()); }
(rule__FetchStatementBulkIntoClause__TargetVariablesAssignment_3)*
{ after(grammarAccess.getFetchStatementBulkIntoClauseAccess().getTargetVariablesAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FetchStatementBulkIntoClause__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatementBulkIntoClause__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatementBulkIntoClause__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementBulkIntoClauseAccess().getGroup_4()); }
(rule__FetchStatementBulkIntoClause__Group_4__0)?
{ after(grammarAccess.getFetchStatementBulkIntoClauseAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FetchStatementBulkIntoClause__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatementBulkIntoClause__Group_4__0__Impl
	rule__FetchStatementBulkIntoClause__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatementBulkIntoClause__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementBulkIntoClauseAccess().getLIMITKeyword_4_0()); }

	'LIMIT' 

{ after(grammarAccess.getFetchStatementBulkIntoClauseAccess().getLIMITKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FetchStatementBulkIntoClause__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FetchStatementBulkIntoClause__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatementBulkIntoClause__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementBulkIntoClauseAccess().getLimitExpressionAssignment_4_1()); }
(rule__FetchStatementBulkIntoClause__LimitExpressionAssignment_4_1)
{ after(grammarAccess.getFetchStatementBulkIntoClauseAccess().getLimitExpressionAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GotoStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GotoStatement__Group__0__Impl
	rule__GotoStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoStatementAccess().getLabelsAssignment_0()); }
(rule__GotoStatement__LabelsAssignment_0)*
{ after(grammarAccess.getGotoStatementAccess().getLabelsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GotoStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GotoStatement__Group__1__Impl
	rule__GotoStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoStatementAccess().getGOTOKeyword_1()); }

	'GOTO' 

{ after(grammarAccess.getGotoStatementAccess().getGOTOKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GotoStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GotoStatement__Group__2__Impl
	rule__GotoStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoStatementAccess().getLabelNameAssignment_2()); }
(rule__GotoStatement__LabelNameAssignment_2)
{ after(grammarAccess.getGotoStatementAccess().getLabelNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GotoStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GotoStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoStatementAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getGotoStatementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getLabelsAssignment_0()); }
(rule__IfStatement__LabelsAssignment_0)*
{ after(grammarAccess.getIfStatementAccess().getLabelsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIFKeyword_1()); }

	'IF' 

{ after(grammarAccess.getIfStatementAccess().getIFKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getExpressionAssignment_2()); }
(rule__IfStatement__ExpressionAssignment_2)
{ after(grammarAccess.getIfStatementAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getTHENKeyword_3()); }

	'THEN' 

{ after(grammarAccess.getIfStatementAccess().getTHENKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getIfStatementAccess().getStatementsAssignment_4()); }
(rule__IfStatement__StatementsAssignment_4)
{ after(grammarAccess.getIfStatementAccess().getStatementsAssignment_4()); }
)
(
{ before(grammarAccess.getIfStatementAccess().getStatementsAssignment_4()); }
(rule__IfStatement__StatementsAssignment_4)*
{ after(grammarAccess.getIfStatementAccess().getStatementsAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__5__Impl
	rule__IfStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElsifBranchesAssignment_5()); }
(rule__IfStatement__ElsifBranchesAssignment_5)*
{ after(grammarAccess.getIfStatementAccess().getElsifBranchesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__6__Impl
	rule__IfStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseBranchAssignment_6()); }
(rule__IfStatement__ElseBranchAssignment_6)?
{ after(grammarAccess.getIfStatementAccess().getElseBranchAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__7__Impl
	rule__IfStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getENDKeyword_7()); }

	'END' 

{ after(grammarAccess.getIfStatementAccess().getENDKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__8__Impl
	rule__IfStatement__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIFKeyword_8()); }

	'IF' 

{ after(grammarAccess.getIfStatementAccess().getIFKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getSemicolonKeyword_9()); }

	';' 

{ after(grammarAccess.getIfStatementAccess().getSemicolonKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__IfStatementElsifBranch__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatementElsifBranch__Group__0__Impl
	rule__IfStatementElsifBranch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementElsifBranch__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementElsifBranchAccess().getELSIFKeyword_0()); }

	'ELSIF' 

{ after(grammarAccess.getIfStatementElsifBranchAccess().getELSIFKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatementElsifBranch__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatementElsifBranch__Group__1__Impl
	rule__IfStatementElsifBranch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementElsifBranch__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementElsifBranchAccess().getExpressionAssignment_1()); }
(rule__IfStatementElsifBranch__ExpressionAssignment_1)
{ after(grammarAccess.getIfStatementElsifBranchAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatementElsifBranch__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatementElsifBranch__Group__2__Impl
	rule__IfStatementElsifBranch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementElsifBranch__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementElsifBranchAccess().getTHENKeyword_2()); }

	'THEN' 

{ after(grammarAccess.getIfStatementElsifBranchAccess().getTHENKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatementElsifBranch__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatementElsifBranch__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementElsifBranch__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getIfStatementElsifBranchAccess().getStatementsAssignment_3()); }
(rule__IfStatementElsifBranch__StatementsAssignment_3)
{ after(grammarAccess.getIfStatementElsifBranchAccess().getStatementsAssignment_3()); }
)
(
{ before(grammarAccess.getIfStatementElsifBranchAccess().getStatementsAssignment_3()); }
(rule__IfStatementElsifBranch__StatementsAssignment_3)*
{ after(grammarAccess.getIfStatementElsifBranchAccess().getStatementsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IfStatementElseBranch__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatementElseBranch__Group__0__Impl
	rule__IfStatementElseBranch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementElseBranch__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementElseBranchAccess().getELSEKeyword_0()); }

	'ELSE' 

{ after(grammarAccess.getIfStatementElseBranchAccess().getELSEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatementElseBranch__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatementElseBranch__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementElseBranch__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getIfStatementElseBranchAccess().getStatementsAssignment_1()); }
(rule__IfStatementElseBranch__StatementsAssignment_1)
{ after(grammarAccess.getIfStatementElseBranchAccess().getStatementsAssignment_1()); }
)
(
{ before(grammarAccess.getIfStatementElseBranchAccess().getStatementsAssignment_1()); }
(rule__IfStatementElseBranch__StatementsAssignment_1)*
{ after(grammarAccess.getIfStatementElseBranchAccess().getStatementsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BasicLoopStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicLoopStatement__Group__0__Impl
	rule__BasicLoopStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicLoopStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicLoopStatementAccess().getLabelsAssignment_0()); }
(rule__BasicLoopStatement__LabelsAssignment_0)*
{ after(grammarAccess.getBasicLoopStatementAccess().getLabelsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicLoopStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicLoopStatement__Group__1__Impl
	rule__BasicLoopStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicLoopStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicLoopStatementAccess().getLOOPKeyword_1()); }

	'LOOP' 

{ after(grammarAccess.getBasicLoopStatementAccess().getLOOPKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicLoopStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicLoopStatement__Group__2__Impl
	rule__BasicLoopStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicLoopStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getBasicLoopStatementAccess().getStatementsAssignment_2()); }
(rule__BasicLoopStatement__StatementsAssignment_2)
{ after(grammarAccess.getBasicLoopStatementAccess().getStatementsAssignment_2()); }
)
(
{ before(grammarAccess.getBasicLoopStatementAccess().getStatementsAssignment_2()); }
(rule__BasicLoopStatement__StatementsAssignment_2)*
{ after(grammarAccess.getBasicLoopStatementAccess().getStatementsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicLoopStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicLoopStatement__Group__3__Impl
	rule__BasicLoopStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicLoopStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicLoopStatementAccess().getENDKeyword_3()); }

	'END' 

{ after(grammarAccess.getBasicLoopStatementAccess().getENDKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicLoopStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicLoopStatement__Group__4__Impl
	rule__BasicLoopStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicLoopStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicLoopStatementAccess().getLOOPKeyword_4()); }

	'LOOP' 

{ after(grammarAccess.getBasicLoopStatementAccess().getLOOPKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicLoopStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicLoopStatement__Group__5__Impl
	rule__BasicLoopStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicLoopStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicLoopStatementAccess().getEndLabelAssignment_5()); }
(rule__BasicLoopStatement__EndLabelAssignment_5)?
{ after(grammarAccess.getBasicLoopStatementAccess().getEndLabelAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicLoopStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicLoopStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicLoopStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicLoopStatementAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getBasicLoopStatementAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__WhileLoopStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoopStatement__Group__0__Impl
	rule__WhileLoopStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoopStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopStatementAccess().getLabelsAssignment_0()); }
(rule__WhileLoopStatement__LabelsAssignment_0)*
{ after(grammarAccess.getWhileLoopStatementAccess().getLabelsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoopStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoopStatement__Group__1__Impl
	rule__WhileLoopStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoopStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopStatementAccess().getWHILEKeyword_1()); }

	'WHILE' 

{ after(grammarAccess.getWhileLoopStatementAccess().getWHILEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoopStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoopStatement__Group__2__Impl
	rule__WhileLoopStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoopStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopStatementAccess().getExpressionAssignment_2()); }
(rule__WhileLoopStatement__ExpressionAssignment_2)
{ after(grammarAccess.getWhileLoopStatementAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoopStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoopStatement__Group__3__Impl
	rule__WhileLoopStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoopStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopStatementAccess().getLOOPKeyword_3()); }

	'LOOP' 

{ after(grammarAccess.getWhileLoopStatementAccess().getLOOPKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoopStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoopStatement__Group__4__Impl
	rule__WhileLoopStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoopStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getWhileLoopStatementAccess().getStatementsAssignment_4()); }
(rule__WhileLoopStatement__StatementsAssignment_4)
{ after(grammarAccess.getWhileLoopStatementAccess().getStatementsAssignment_4()); }
)
(
{ before(grammarAccess.getWhileLoopStatementAccess().getStatementsAssignment_4()); }
(rule__WhileLoopStatement__StatementsAssignment_4)*
{ after(grammarAccess.getWhileLoopStatementAccess().getStatementsAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoopStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoopStatement__Group__5__Impl
	rule__WhileLoopStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoopStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopStatementAccess().getENDKeyword_5()); }

	'END' 

{ after(grammarAccess.getWhileLoopStatementAccess().getENDKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoopStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoopStatement__Group__6__Impl
	rule__WhileLoopStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoopStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopStatementAccess().getLOOPKeyword_6()); }

	'LOOP' 

{ after(grammarAccess.getWhileLoopStatementAccess().getLOOPKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoopStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoopStatement__Group__7__Impl
	rule__WhileLoopStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoopStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopStatementAccess().getEndLabelAssignment_7()); }
(rule__WhileLoopStatement__EndLabelAssignment_7)?
{ after(grammarAccess.getWhileLoopStatementAccess().getEndLabelAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoopStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoopStatement__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoopStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopStatementAccess().getSemicolonKeyword_8()); }

	';' 

{ after(grammarAccess.getWhileLoopStatementAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__ForLoopStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__0__Impl
	rule__ForLoopStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getLabelsAssignment_0()); }
(rule__ForLoopStatement__LabelsAssignment_0)*
{ after(grammarAccess.getForLoopStatementAccess().getLabelsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__1__Impl
	rule__ForLoopStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getFORKeyword_1()); }

	'FOR' 

{ after(grammarAccess.getForLoopStatementAccess().getFORKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__2__Impl
	rule__ForLoopStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getIndexVariableAssignment_2()); }
(rule__ForLoopStatement__IndexVariableAssignment_2)
{ after(grammarAccess.getForLoopStatementAccess().getIndexVariableAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__3__Impl
	rule__ForLoopStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getINKeyword_3()); }

	'IN' 

{ after(grammarAccess.getForLoopStatementAccess().getINKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__4__Impl
	rule__ForLoopStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getREVERSEKeyword_4()); }
(
	'REVERSE' 
)?
{ after(grammarAccess.getForLoopStatementAccess().getREVERSEKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__5__Impl
	rule__ForLoopStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getLowerBoundAssignment_5()); }
(rule__ForLoopStatement__LowerBoundAssignment_5)
{ after(grammarAccess.getForLoopStatementAccess().getLowerBoundAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__6__Impl
	rule__ForLoopStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getFullStopFullStopKeyword_6()); }

	'..' 

{ after(grammarAccess.getForLoopStatementAccess().getFullStopFullStopKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__7__Impl
	rule__ForLoopStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getUpperBoundAssignment_7()); }
(rule__ForLoopStatement__UpperBoundAssignment_7)
{ after(grammarAccess.getForLoopStatementAccess().getUpperBoundAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__8__Impl
	rule__ForLoopStatement__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getLOOPKeyword_8()); }

	'LOOP' 

{ after(grammarAccess.getForLoopStatementAccess().getLOOPKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__9__Impl
	rule__ForLoopStatement__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getForLoopStatementAccess().getStatementsAssignment_9()); }
(rule__ForLoopStatement__StatementsAssignment_9)
{ after(grammarAccess.getForLoopStatementAccess().getStatementsAssignment_9()); }
)
(
{ before(grammarAccess.getForLoopStatementAccess().getStatementsAssignment_9()); }
(rule__ForLoopStatement__StatementsAssignment_9)*
{ after(grammarAccess.getForLoopStatementAccess().getStatementsAssignment_9()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__10__Impl
	rule__ForLoopStatement__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getENDKeyword_10()); }

	'END' 

{ after(grammarAccess.getForLoopStatementAccess().getENDKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__11__Impl
	rule__ForLoopStatement__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getLOOPKeyword_11()); }

	'LOOP' 

{ after(grammarAccess.getForLoopStatementAccess().getLOOPKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__12__Impl
	rule__ForLoopStatement__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getEndLabelAssignment_12()); }
(rule__ForLoopStatement__EndLabelAssignment_12)?
{ after(grammarAccess.getForLoopStatementAccess().getEndLabelAssignment_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopStatement__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopStatement__Group__13__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getSemicolonKeyword_13()); }

	';' 

{ after(grammarAccess.getForLoopStatementAccess().getSemicolonKeyword_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}






























rule__ReturnStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
(

)
{ after(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__1__Impl
	rule__ReturnStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getLabelsAssignment_1()); }
(rule__ReturnStatement__LabelsAssignment_1)*
{ after(grammarAccess.getReturnStatementAccess().getLabelsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__2__Impl
	rule__ReturnStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getRETURNKeyword_2()); }

	'RETURN' 

{ after(grammarAccess.getReturnStatementAccess().getRETURNKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__3__Impl
	rule__ReturnStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionAssignment_3()); }
(rule__ReturnStatement__ExpressionAssignment_3)?
{ after(grammarAccess.getReturnStatementAccess().getExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NullStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullStatement__Group__0__Impl
	rule__NullStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullStatementAccess().getNullStatementAction_0()); }
(

)
{ after(grammarAccess.getNullStatementAccess().getNullStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullStatement__Group__1__Impl
	rule__NullStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NullStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullStatementAccess().getLabelsAssignment_1()); }
(rule__NullStatement__LabelsAssignment_1)*
{ after(grammarAccess.getNullStatementAccess().getLabelsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullStatement__Group__2__Impl
	rule__NullStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NullStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullStatementAccess().getNULLKeyword_2()); }

	'NULL' 

{ after(grammarAccess.getNullStatementAccess().getNULLKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullStatementAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getNullStatementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RaiseStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RaiseStatement__Group__0__Impl
	rule__RaiseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RaiseStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRaiseStatementAccess().getRaiseStatementAction_0()); }
(

)
{ after(grammarAccess.getRaiseStatementAccess().getRaiseStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RaiseStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RaiseStatement__Group__1__Impl
	rule__RaiseStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RaiseStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRaiseStatementAccess().getLabelsAssignment_1()); }
(rule__RaiseStatement__LabelsAssignment_1)*
{ after(grammarAccess.getRaiseStatementAccess().getLabelsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RaiseStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RaiseStatement__Group__2__Impl
	rule__RaiseStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RaiseStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRaiseStatementAccess().getRAISEKeyword_2()); }

	'RAISE' 

{ after(grammarAccess.getRaiseStatementAccess().getRAISEKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RaiseStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RaiseStatement__Group__3__Impl
	rule__RaiseStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RaiseStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRaiseStatementAccess().getExceptionNameAssignment_3()); }
(rule__RaiseStatement__ExceptionNameAssignment_3)?
{ after(grammarAccess.getRaiseStatementAccess().getExceptionNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RaiseStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RaiseStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RaiseStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRaiseStatementAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getRaiseStatementAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VariableRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableRef__Group__0__Impl
	rule__VariableRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefAccess().getIsHostRefAssignment_0()); }
(rule__VariableRef__IsHostRefAssignment_0)?
{ after(grammarAccess.getVariableRefAccess().getIsHostRefAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefAccess().getNameAssignment_1()); }
(rule__VariableRef__NameAssignment_1)
{ after(grammarAccess.getVariableRefAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getNamesAssignment_0()); }
(rule__QualifiedName__NamesAssignment_0)
{ after(grammarAccess.getQualifiedNameAccess().getNamesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getNamesAssignment_1_1()); }
(rule__QualifiedName__NamesAssignment_1_1)
{ after(grammarAccess.getQualifiedNameAccess().getNamesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Procedure__SchemaNameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getSchemaNameIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getProcedureAccess().getSchemaNameIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__ParametersAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getParametersParameterSequenceParserRuleCall_3_1_0()); }
	ruleParameterSequence{ after(grammarAccess.getProcedureAccess().getParametersParameterSequenceParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__InvokerRightsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getInvokerRightsProcedureInvokerRightsClauseParserRuleCall_4_0()); }
	ruleProcedureInvokerRightsClause{ after(grammarAccess.getProcedureAccess().getInvokerRightsProcedureInvokerRightsClauseParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__ContentAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getContentProcedureContentParserRuleCall_6_0()); }
	ruleProcedureContent{ after(grammarAccess.getProcedureAccess().getContentProcedureContentParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__SchemaNameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getSchemaNameIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getPackageAccess().getSchemaNameIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__InvokerRightsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getInvokerRightsProcedureInvokerRightsClauseParserRuleCall_3_0()); }
	ruleProcedureInvokerRightsClause{ after(grammarAccess.getPackageAccess().getInvokerRightsProcedureInvokerRightsClauseParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__ItemsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getItemsItemParserRuleCall_5_0()); }
	ruleItem{ after(grammarAccess.getPackageAccess().getItemsItemParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__EndNameAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getEndNameIDTerminalRuleCall_7_0()); }
	RULE_ID{ after(grammarAccess.getPackageAccess().getEndNameIDTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProcedureDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__ParametersAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getParametersParameterSequenceParserRuleCall_2_1_0()); }
	ruleParameterSequence{ after(grammarAccess.getProcedureDeclarationAccess().getParametersParameterSequenceParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProcedureDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__ParametersAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDefinitionAccess().getParametersParameterSequenceParserRuleCall_2_1_0()); }
	ruleParameterSequence{ after(grammarAccess.getProcedureDefinitionAccess().getParametersParameterSequenceParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDefinition__ImplementationAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDefinitionAccess().getImplementationProcedureImplementationParserRuleCall_4_0()); }
	ruleProcedureImplementation{ after(grammarAccess.getProcedureDefinitionAccess().getImplementationProcedureImplementationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__SchemaNameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getSchemaNameIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getSchemaNameIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParametersAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParametersParameterSequenceParserRuleCall_3_1_0()); }
	ruleParameterSequence{ after(grammarAccess.getFunctionAccess().getParametersParameterSequenceParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ReturnTypeAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getReturnTypeDataTypeParserRuleCall_5_0()); }
	ruleDataType{ after(grammarAccess.getFunctionAccess().getReturnTypeDataTypeParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__FunctionClausesAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getFunctionClausesFunctionClauseParserRuleCall_6_0()); }
	ruleFunctionClause{ after(grammarAccess.getFunctionAccess().getFunctionClausesFunctionClauseParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ContentAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getContentFunctionContentParserRuleCall_8_0()); }
	ruleFunctionContent{ after(grammarAccess.getFunctionAccess().getContentFunctionContentParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterSequence__ParametersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterSequenceAccess().getParametersParameterDeclarationParserRuleCall_0_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getParameterSequenceAccess().getParametersParameterDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterSequence__ParametersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterSequenceAccess().getParametersParameterDeclarationParserRuleCall_1_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getParameterSequenceAccess().getParametersParameterDeclarationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__BehaviorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getBehaviorParameterBehaviorParserRuleCall_1_0()); }
	ruleParameterBehavior{ after(grammarAccess.getParameterDeclarationAccess().getBehaviorParameterBehaviorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__DataTypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getDataTypeDataTypeParserRuleCall_2_0()); }
	ruleDataType{ after(grammarAccess.getParameterDeclarationAccess().getDataTypeDataTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getValueParameterValueParserRuleCall_3_0()); }
	ruleParameterValue{ after(grammarAccess.getParameterDeclarationAccess().getValueParameterValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterValue__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterValueAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getParameterValueAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureInvokerRightsClause__RightAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureInvokerRightsClauseAccess().getRightInvokerRightEnumRuleCall_0()); }
	ruleInvokerRight{ after(grammarAccess.getProcedureInvokerRightsClauseAccess().getRightInvokerRightEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInvokerRightsClause__RightAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionInvokerRightsClauseAccess().getRightInvokerRightEnumRuleCall_0()); }
	ruleInvokerRight{ after(grammarAccess.getFunctionInvokerRightsClauseAccess().getRightInvokerRightEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__RestrictionsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_5_0()); }
	rulePragmaRestrictReferencesRestriction{ after(grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaRestrictReferences__RestrictionsAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_6_1_0()); }
	rulePragmaRestrictReferencesRestriction{ after(grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaTimestamp__TimestampAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaTimestampAccess().getTimestampSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getPragmaTimestampAccess().getTimestampSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureImplementation__DeclareSectionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureImplementationAccess().getDeclareSectionDeclareSectionParserRuleCall_0_0()); }
	ruleDeclareSection{ after(grammarAccess.getProcedureImplementationAccess().getDeclareSectionDeclareSectionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureImplementation__BodyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureImplementationAccess().getBodyStatementBodyParserRuleCall_1_0()); }
	ruleStatementBody{ after(grammarAccess.getProcedureImplementationAccess().getBodyStatementBodyParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionImplementation__DeclareSectionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionImplementationAccess().getDeclareSectionDeclareSectionParserRuleCall_0_0()); }
	ruleDeclareSection{ after(grammarAccess.getFunctionImplementationAccess().getDeclareSectionDeclareSectionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionImplementation__BodyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionImplementationAccess().getBodyStatementBodyParserRuleCall_1_0()); }
	ruleStatementBody{ after(grammarAccess.getFunctionImplementationAccess().getBodyStatementBodyParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResultCacheClause__DataSourcesAssignment_2_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultCacheClauseAccess().getDataSourcesIDTerminalRuleCall_2_2_0_0()); }
	RULE_ID{ after(grammarAccess.getResultCacheClauseAccess().getDataSourcesIDTerminalRuleCall_2_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResultCacheClause__DataSourcesAssignment_2_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultCacheClauseAccess().getDataSourcesIDTerminalRuleCall_2_2_1_1_0()); }
	RULE_ID{ after(grammarAccess.getResultCacheClauseAccess().getDataSourcesIDTerminalRuleCall_2_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StatementBody__StatementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementBodyAccess().getStatementsStatementParserRuleCall_1_0()); }
	ruleStatement{ after(grammarAccess.getStatementBodyAccess().getStatementsStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StatementBody__EndNameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementBodyAccess().getEndNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getStatementBodyAccess().getEndNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclareSection__ItemsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclareSectionAccess().getItemsItemParserRuleCall_1_0()); }
	ruleItem{ after(grammarAccess.getDeclareSectionAccess().getItemsItemParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__IsConstantAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getIsConstantCONSTANTKeyword_1_0()); }
(
{ before(grammarAccess.getVariableDeclarationAccess().getIsConstantCONSTANTKeyword_1_0()); }

	'CONSTANT' 

{ after(grammarAccess.getVariableDeclarationAccess().getIsConstantCONSTANTKeyword_1_0()); }
)

{ after(grammarAccess.getVariableDeclarationAccess().getIsConstantCONSTANTKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__DataTypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getDataTypeDataTypeParserRuleCall_2_0()); }
	ruleDataType{ after(grammarAccess.getVariableDeclarationAccess().getDataTypeDataTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__IsNotNullAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getIsNotNullNOT_NULLParserRuleCall_3_0()); }
	ruleNOT_NULL{ after(grammarAccess.getVariableDeclarationAccess().getIsNotNullNOT_NULLParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getValueVariableValueParserRuleCall_4_0()); }
	ruleVariableValue{ after(grammarAccess.getVariableDeclarationAccess().getValueVariableValueParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getVariableValueAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteralExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralExpressionAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntLiteralExpressionAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteralExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteralExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralExpressionAccess().getValueAlternatives_0()); }
(rule__BooleanLiteralExpression__ValueAlternatives_0)
{ after(grammarAccess.getBooleanLiteralExpressionAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRefExpression__VariableAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefExpressionAccess().getVariableVariableRefParserRuleCall_0()); }
	ruleVariableRef{ after(grammarAccess.getVariableRefExpressionAccess().getVariableVariableRefParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Label__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__LabelsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getAssignmentStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__TargetAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getTargetAssignmentTargetParserRuleCall_1_0()); }
	ruleAssignmentTarget{ after(grammarAccess.getAssignmentStatementAccess().getTargetAssignmentTargetParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignmentTarget__VariableAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentTargetAccess().getVariableVariableRefParserRuleCall_0()); }
	ruleVariableRef{ after(grammarAccess.getVariableAssignmentTargetAccess().getVariableVariableRefParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__LabelsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getBlockStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__DeclareSectionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getDeclareSectionDeclareSectionParserRuleCall_1_0()); }
	ruleDeclareSection{ after(grammarAccess.getBlockStatementAccess().getDeclareSectionDeclareSectionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__BodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getBodyStatementBodyParserRuleCall_2_0()); }
	ruleStatementBody{ after(grammarAccess.getBlockStatementAccess().getBodyStatementBodyParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__LabelsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getCaseStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getCaseStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__WhenBranchesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getWhenBranchesCaseStatementWhenBranchParserRuleCall_3_0()); }
	ruleCaseStatementWhenBranch{ after(grammarAccess.getCaseStatementAccess().getWhenBranchesCaseStatementWhenBranchParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__ElseBranchAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getElseBranchCaseStatementElseBranchParserRuleCall_4_0()); }
	ruleCaseStatementElseBranch{ after(grammarAccess.getCaseStatementAccess().getElseBranchCaseStatementElseBranchParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__EndLabelAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getEndLabelIDTerminalRuleCall_7_0()); }
	RULE_ID{ after(grammarAccess.getCaseStatementAccess().getEndLabelIDTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatementWhenBranch__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementWhenBranchAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getCaseStatementWhenBranchAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatementWhenBranch__StatementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementWhenBranchAccess().getStatementsStatementParserRuleCall_3_0()); }
	ruleStatement{ after(grammarAccess.getCaseStatementWhenBranchAccess().getStatementsStatementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatementElseBranch__StatementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementElseBranchAccess().getStatementsStatementParserRuleCall_1_0()); }
	ruleStatement{ after(grammarAccess.getCaseStatementElseBranchAccess().getStatementsStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CloseStatement__LabelsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloseStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getCloseStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CloseStatement__CursorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloseStatementAccess().getCursorVariableRefParserRuleCall_2_0()); }
	ruleVariableRef{ after(grammarAccess.getCloseStatementAccess().getCursorVariableRefParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__LabelsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getLabelsLabelParserRuleCall_1_0()); }
	ruleLabel{ after(grammarAccess.getContinueStatementAccess().getLabelsLabelParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__LabelNameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getLabelNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getContinueStatementAccess().getLabelNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__WhenExpressionAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getWhenExpressionExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getContinueStatementAccess().getWhenExpressionExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__LabelsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getLabelsLabelParserRuleCall_1_0()); }
	ruleLabel{ after(grammarAccess.getExitStatementAccess().getLabelsLabelParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__LabelNameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getLabelNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getExitStatementAccess().getLabelNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__WhenExpressionAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getWhenExpressionExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getExitStatementAccess().getWhenExpressionExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatement__LabelsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getFetchStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatement__CursorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementAccess().getCursorVariableRefParserRuleCall_2_0()); }
	ruleVariableRef{ after(grammarAccess.getFetchStatementAccess().getCursorVariableRefParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatement__IntoClauseAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementAccess().getIntoClauseFetchStatementIntoClauseParserRuleCall_3_0()); }
	ruleFetchStatementIntoClause{ after(grammarAccess.getFetchStatementAccess().getIntoClauseFetchStatementIntoClauseParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatementSingleIntoClause__TargetVariablesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementSingleIntoClauseAccess().getTargetVariablesVariableRefParserRuleCall_1_0()); }
	ruleVariableRef{ after(grammarAccess.getFetchStatementSingleIntoClauseAccess().getTargetVariablesVariableRefParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatementBulkIntoClause__TargetVariablesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementBulkIntoClauseAccess().getTargetVariablesVariableRefParserRuleCall_3_0()); }
	ruleVariableRef{ after(grammarAccess.getFetchStatementBulkIntoClauseAccess().getTargetVariablesVariableRefParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FetchStatementBulkIntoClause__LimitExpressionAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFetchStatementBulkIntoClauseAccess().getLimitExpressionExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getFetchStatementBulkIntoClauseAccess().getLimitExpressionExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GotoStatement__LabelsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getGotoStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GotoStatement__LabelNameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoStatementAccess().getLabelNameLabelCrossReference_2_0()); }
(
{ before(grammarAccess.getGotoStatementAccess().getLabelNameLabelIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getGotoStatementAccess().getLabelNameLabelIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getGotoStatementAccess().getLabelNameLabelCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__LabelsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getIfStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__StatementsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getStatementsStatementParserRuleCall_4_0()); }
	ruleStatement{ after(grammarAccess.getIfStatementAccess().getStatementsStatementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElsifBranchesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElsifBranchesIfStatementElsifBranchParserRuleCall_5_0()); }
	ruleIfStatementElsifBranch{ after(grammarAccess.getIfStatementAccess().getElsifBranchesIfStatementElsifBranchParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseBranchAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseBranchIfStatementElseBranchParserRuleCall_6_0()); }
	ruleIfStatementElseBranch{ after(grammarAccess.getIfStatementAccess().getElseBranchIfStatementElseBranchParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementElsifBranch__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementElsifBranchAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getIfStatementElsifBranchAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementElsifBranch__StatementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementElsifBranchAccess().getStatementsStatementParserRuleCall_3_0()); }
	ruleStatement{ after(grammarAccess.getIfStatementElsifBranchAccess().getStatementsStatementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementElseBranch__StatementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementElseBranchAccess().getStatementsStatementParserRuleCall_1_0()); }
	ruleStatement{ after(grammarAccess.getIfStatementElseBranchAccess().getStatementsStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicLoopStatement__LabelsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicLoopStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getBasicLoopStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicLoopStatement__StatementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicLoopStatementAccess().getStatementsStatementParserRuleCall_2_0()); }
	ruleStatement{ after(grammarAccess.getBasicLoopStatementAccess().getStatementsStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicLoopStatement__EndLabelAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicLoopStatementAccess().getEndLabelIDTerminalRuleCall_5_0()); }
	RULE_ID{ after(grammarAccess.getBasicLoopStatementAccess().getEndLabelIDTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoopStatement__LabelsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getWhileLoopStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoopStatement__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getWhileLoopStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoopStatement__StatementsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopStatementAccess().getStatementsStatementParserRuleCall_4_0()); }
	ruleStatement{ after(grammarAccess.getWhileLoopStatementAccess().getStatementsStatementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoopStatement__EndLabelAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopStatementAccess().getEndLabelIDTerminalRuleCall_7_0()); }
	RULE_ID{ after(grammarAccess.getWhileLoopStatementAccess().getEndLabelIDTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__LabelsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getForLoopStatementAccess().getLabelsLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__IndexVariableAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getIndexVariableLoopVariableDeclarationParserRuleCall_2_0()); }
	ruleLoopVariableDeclaration{ after(grammarAccess.getForLoopStatementAccess().getIndexVariableLoopVariableDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__LowerBoundAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getLowerBoundExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getForLoopStatementAccess().getLowerBoundExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__UpperBoundAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getUpperBoundExpressionParserRuleCall_7_0()); }
	ruleExpression{ after(grammarAccess.getForLoopStatementAccess().getUpperBoundExpressionParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__StatementsAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getStatementsStatementParserRuleCall_9_0()); }
	ruleStatement{ after(grammarAccess.getForLoopStatementAccess().getStatementsStatementParserRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopStatement__EndLabelAssignment_12
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopStatementAccess().getEndLabelIDTerminalRuleCall_12_0()); }
	RULE_ID{ after(grammarAccess.getForLoopStatementAccess().getEndLabelIDTerminalRuleCall_12_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__LabelsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getLabelsLabelParserRuleCall_1_0()); }
	ruleLabel{ after(grammarAccess.getReturnStatementAccess().getLabelsLabelParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullStatement__LabelsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullStatementAccess().getLabelsLabelParserRuleCall_1_0()); }
	ruleLabel{ after(grammarAccess.getNullStatementAccess().getLabelsLabelParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RaiseStatement__LabelsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRaiseStatementAccess().getLabelsLabelParserRuleCall_1_0()); }
	ruleLabel{ after(grammarAccess.getRaiseStatementAccess().getLabelsLabelParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RaiseStatement__ExceptionNameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRaiseStatementAccess().getExceptionNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getRaiseStatementAccess().getExceptionNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__IsHostRefAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefAccess().getIsHostRefColonKeyword_0_0()); }
(
{ before(grammarAccess.getVariableRefAccess().getIsHostRefColonKeyword_0_0()); }

	':' 

{ after(grammarAccess.getVariableRefAccess().getIsHostRefColonKeyword_0_0()); }
)

{ after(grammarAccess.getVariableRefAccess().getIsHostRefColonKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableRefAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getVariableRefAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__NamesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getNamesNameParserRuleCall_0_0()); }
	ruleName{ after(grammarAccess.getQualifiedNameAccess().getNamesNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__NamesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getNamesNameParserRuleCall_1_1_0()); }
	ruleName{ after(grammarAccess.getQualifiedNameAccess().getNamesNameParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Name__DeclarationAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getDeclarationNameDeclarationCrossReference_0()); }
(
{ before(grammarAccess.getNameAccess().getDeclarationNameDeclarationIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getNameAccess().getDeclarationNameDeclarationIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getNameAccess().getDeclarationNameDeclarationCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopVariableDeclaration__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopVariableDeclarationAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getLoopVariableDeclarationAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


