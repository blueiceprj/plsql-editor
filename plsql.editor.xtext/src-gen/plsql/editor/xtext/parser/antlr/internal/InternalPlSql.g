/*
* generated by Xtext
*/
parser grammar InternalPlSql;

options {
	tokenVocab=InternalPlSql;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package plsql.editor.xtext.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import plsql.editor.xtext.services.PlSqlGrammarAccess;

}

@members {


 	private PlSqlGrammarAccess grammarAccess;
 	
    public InternalPlSqlParser(TokenStream input, IAstFactory factory, PlSqlGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("plsql/editor/xtext/parser/antlr/internal/InternalPlSql.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "CompilationUnit";	
   	} 
   	   	
   	@Override
   	protected PlSqlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCompilationUnit
entryRuleCompilationUnit returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompilationUnitRule(), currentNode); }
	 iv_ruleCompilationUnit=ruleCompilationUnit 
	 { $current=$iv_ruleCompilationUnit.current; } 
	 EOF 
;

// Rule CompilationUnit
ruleCompilationUnit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCompilationUnitAccess().getProcedureParserRuleCall_0(), currentNode); 
    }
    this_Procedure_0=ruleProcedure
    {
        $current = $this_Procedure_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getCompilationUnitAccess().getFunctionParserRuleCall_1(), currentNode); 
    }
    this_Function_1=ruleFunction
    {
        $current = $this_Function_1.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getCompilationUnitAccess().getPackageParserRuleCall_2(), currentNode); 
    }
    this_Package_2=rulePackage
    {
        $current = $this_Package_2.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getProcedureRule(), currentNode); }
	 iv_ruleProcedure=ruleProcedure 
	 { $current=$iv_ruleProcedure.current; } 
	 EOF 
;

// Rule Procedure
ruleProcedure returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_60 
    {
        createLeafNode(grammarAccess.getProcedureAccess().getPROCEDUREKeyword_0(), null); 
    }
((
(
		lv_schemaName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getProcedureAccess().getSchemaNameIDTerminalRuleCall_1_0_0(), "schemaName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"schemaName",
	        		lv_schemaName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_4 
    {
        createLeafNode(grammarAccess.getProcedureAccess().getFullStopKeyword_1_1(), null); 
    }
)?(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProcedureAccess().getParametersParameterSequenceParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_parameters_5_0=ruleParameterSequence		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"parameters",
	        		lv_parameters_5_0, 
	        		"ParameterSequence", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getProcedureAccess().getRightParenthesisKeyword_3_2(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProcedureAccess().getInvokerRightsProcedureInvokerRightsClauseParserRuleCall_4_0(), currentNode); 
	    }
		lv_invokerRights_7_0=ruleProcedureInvokerRightsClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"invokerRights",
	        		lv_invokerRights_7_0, 
	        		"ProcedureInvokerRightsClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
	KEYWORD_14 
    {
        createLeafNode(grammarAccess.getProcedureAccess().getISKeyword_5_0(), null); 
    }

    |
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getProcedureAccess().getASKeyword_5_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProcedureAccess().getContentProcedureContentParserRuleCall_6_0(), currentNode); 
	    }
		lv_content_10_0=ruleProcedureContent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"content",
	        		lv_content_10_0, 
	        		"ProcedureContent", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getPackageRule(), currentNode); }
	 iv_rulePackage=rulePackage 
	 { $current=$iv_rulePackage.current; } 
	 EOF 
;

// Rule Package
rulePackage returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_52 
    {
        createLeafNode(grammarAccess.getPackageAccess().getPACKAGEKeyword_0(), null); 
    }
((
(
		lv_schemaName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPackageAccess().getSchemaNameIDTerminalRuleCall_1_0_0(), "schemaName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"schemaName",
	        		lv_schemaName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_4 
    {
        createLeafNode(grammarAccess.getPackageAccess().getFullStopKeyword_1_1(), null); 
    }
)?(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageAccess().getInvokerRightsProcedureInvokerRightsClauseParserRuleCall_3_0(), currentNode); 
	    }
		lv_invokerRights_4_0=ruleProcedureInvokerRightsClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"invokerRights",
	        		lv_invokerRights_4_0, 
	        		"ProcedureInvokerRightsClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
	KEYWORD_14 
    {
        createLeafNode(grammarAccess.getPackageAccess().getISKeyword_4_0(), null); 
    }

    |
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getPackageAccess().getASKeyword_4_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageAccess().getItemsItemParserRuleCall_5_0(), currentNode); 
	    }
		lv_items_7_0=ruleItem		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_7_0, 
	        		"Item", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getPackageAccess().getENDKeyword_6(), null); 
    }
(
(
		lv_endName_9_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPackageAccess().getEndNameIDTerminalRuleCall_7_0(), "endName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"endName",
	        		lv_endName_9_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getPackageAccess().getSemicolonKeyword_8(), null); 
    }
)
;





// Entry rule entryRuleProcedureDeclaration
entryRuleProcedureDeclaration returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getProcedureDeclarationRule(), currentNode); }
	 iv_ruleProcedureDeclaration=ruleProcedureDeclaration 
	 { $current=$iv_ruleProcedureDeclaration.current; } 
	 EOF 
;

// Rule ProcedureDeclaration
ruleProcedureDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_60 
    {
        createLeafNode(grammarAccess.getProcedureDeclarationAccess().getPROCEDUREKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getProcedureDeclarationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getProcedureDeclarationAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProcedureDeclarationAccess().getParametersParameterSequenceParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_parameters_3_0=ruleParameterSequence		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"parameters",
	        		lv_parameters_3_0, 
	        		"ParameterSequence", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getProcedureDeclarationAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleProcedureDefinition
entryRuleProcedureDefinition returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getProcedureDefinitionRule(), currentNode); }
	 iv_ruleProcedureDefinition=ruleProcedureDefinition 
	 { $current=$iv_ruleProcedureDefinition.current; } 
	 EOF 
;

// Rule ProcedureDefinition
ruleProcedureDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_60 
    {
        createLeafNode(grammarAccess.getProcedureDefinitionAccess().getPROCEDUREKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getProcedureDefinitionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getProcedureDefinitionAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProcedureDefinitionAccess().getParametersParameterSequenceParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_parameters_3_0=ruleParameterSequence		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"parameters",
	        		lv_parameters_3_0, 
	        		"ParameterSequence", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getProcedureDefinitionAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?(
	KEYWORD_14 
    {
        createLeafNode(grammarAccess.getProcedureDefinitionAccess().getISKeyword_3_0(), null); 
    }

    |
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getProcedureDefinitionAccess().getASKeyword_3_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProcedureDefinitionAccess().getImplementationProcedureImplementationParserRuleCall_4_0(), currentNode); 
	    }
		lv_implementation_7_0=ruleProcedureImplementation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"implementation",
	        		lv_implementation_7_0, 
	        		"ProcedureImplementation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionRule(), currentNode); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_57 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getFUNCTIONKeyword_0(), null); 
    }
((
(
		lv_schemaName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFunctionAccess().getSchemaNameIDTerminalRuleCall_1_0_0(), "schemaName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"schemaName",
	        		lv_schemaName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_4 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getFullStopKeyword_1_1(), null); 
    }
)?(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getParametersParameterSequenceParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_parameters_5_0=ruleParameterSequence		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"parameters",
	        		lv_parameters_5_0, 
	        		"ParameterSequence", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3_2(), null); 
    }
)?
	KEYWORD_46 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getRETURNKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getReturnTypeDataTypeParserRuleCall_5_0(), currentNode); 
	    }
		lv_returnType_8_0=ruleDataType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"returnType",
	        		lv_returnType_8_0, 
	        		"DataType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getFunctionClausesFunctionClauseParserRuleCall_6_0(), currentNode); 
	    }
		lv_functionClauses_9_0=ruleFunctionClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"functionClauses",
	        		lv_functionClauses_9_0, 
	        		"FunctionClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_14 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getISKeyword_7_0(), null); 
    }

    |
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getASKeyword_7_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getContentFunctionContentParserRuleCall_8_0(), currentNode); 
	    }
		lv_content_12_0=ruleFunctionContent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"content",
	        		lv_content_12_0, 
	        		"FunctionContent", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleParameterSequence
entryRuleParameterSequence returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterSequenceRule(), currentNode); }
	 iv_ruleParameterSequence=ruleParameterSequence 
	 { $current=$iv_ruleParameterSequence.current; } 
	 EOF 
;

// Rule ParameterSequence
ruleParameterSequence returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterSequenceAccess().getParametersParameterDeclarationParserRuleCall_0_0(), currentNode); 
	    }
		lv_parameters_0_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterSequenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_0_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getParameterSequenceAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterSequenceAccess().getParametersParameterDeclarationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_parameters_2_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterSequenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_2_0, 
	        		"ParameterDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterDeclarationRule(), currentNode); }
	 iv_ruleParameterDeclaration=ruleParameterDeclaration 
	 { $current=$iv_ruleParameterDeclaration.current; } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterDeclarationAccess().getBehaviorParameterBehaviorParserRuleCall_1_0(), currentNode); 
	    }
		lv_behavior_1_0=ruleParameterBehavior		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"behavior",
	        		lv_behavior_1_0, 
	        		"ParameterBehavior", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterDeclarationAccess().getDataTypeDataTypeParserRuleCall_2_0(), currentNode); 
	    }
		lv_dataType_2_0=ruleDataType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dataType",
	        		lv_dataType_2_0, 
	        		"DataType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterDeclarationAccess().getValueParameterValueParserRuleCall_3_0(), currentNode); 
	    }
		lv_value_3_0=ruleParameterValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_3_0, 
	        		"ParameterValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleParameterValue
entryRuleParameterValue returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterValueRule(), currentNode); }
	 iv_ruleParameterValue=ruleParameterValue 
	 { $current=$iv_ruleParameterValue.current; } 
	 EOF 
;

// Rule ParameterValue
ruleParameterValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	KEYWORD_8 
    {
        createLeafNode(grammarAccess.getParameterValueAccess().getColonEqualsSignKeyword_0_0(), null); 
    }

    |
	KEYWORD_50 
    {
        createLeafNode(grammarAccess.getParameterValueAccess().getDEFAULTKeyword_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterValueAccess().getExpressionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleParameterBehavior
entryRuleParameterBehavior returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getParameterBehaviorRule(), currentNode); } 
	 iv_ruleParameterBehavior=ruleParameterBehavior 
	 { $current=$iv_ruleParameterBehavior.current.getText(); }  
	 EOF 
;

// Rule ParameterBehavior
ruleParameterBehavior returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw=KEYWORD_13 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getParameterBehaviorAccess().getINKeyword_0(), null); 
    }

    |(
	kw=KEYWORD_18 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getParameterBehaviorAccess().getOUTKeyword_1_0(), null); 
    }
(
	kw=KEYWORD_43 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getParameterBehaviorAccess().getNOCOPYKeyword_1_1(), null); 
    }
)?)
    |(
	kw=KEYWORD_13 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getParameterBehaviorAccess().getINKeyword_2_0(), null); 
    }

	kw=KEYWORD_18 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getParameterBehaviorAccess().getOUTKeyword_2_1(), null); 
    }
(
	kw=KEYWORD_43 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getParameterBehaviorAccess().getNOCOPYKeyword_2_2(), null); 
    }
)?))
    ;





// Entry rule entryRuleProcedureInvokerRightsClause
entryRuleProcedureInvokerRightsClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getProcedureInvokerRightsClauseRule(), currentNode); }
	 iv_ruleProcedureInvokerRightsClause=ruleProcedureInvokerRightsClause 
	 { $current=$iv_ruleProcedureInvokerRightsClause.current; } 
	 EOF 
;

// Rule ProcedureInvokerRightsClause
ruleProcedureInvokerRightsClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProcedureInvokerRightsClauseAccess().getRightInvokerRightEnumRuleCall_0(), currentNode); 
	    }
		lv_right_0_0=ruleInvokerRight		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureInvokerRightsClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_0_0, 
	        		"InvokerRight", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleFunctionInvokerRightsClause
entryRuleFunctionInvokerRightsClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionInvokerRightsClauseRule(), currentNode); }
	 iv_ruleFunctionInvokerRightsClause=ruleFunctionInvokerRightsClause 
	 { $current=$iv_ruleFunctionInvokerRightsClause.current; } 
	 EOF 
;

// Rule FunctionInvokerRightsClause
ruleFunctionInvokerRightsClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionInvokerRightsClauseAccess().getRightInvokerRightEnumRuleCall_0(), currentNode); 
	    }
		lv_right_0_0=ruleInvokerRight		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionInvokerRightsClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_0_0, 
	        		"InvokerRight", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRulePragma
entryRulePragma returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getPragmaRule(), currentNode); }
	 iv_rulePragma=rulePragma 
	 { $current=$iv_rulePragma.current; } 
	 EOF 
;

// Rule Pragma
rulePragma returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPragmaAccess().getPragmaRestrictReferencesParserRuleCall_0(), currentNode); 
    }
    this_PragmaRestrictReferences_0=rulePragmaRestrictReferences
    {
        $current = $this_PragmaRestrictReferences_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPragmaAccess().getPragmaTimestampParserRuleCall_1(), currentNode); 
    }
    this_PragmaTimestamp_1=rulePragmaTimestamp
    {
        $current = $this_PragmaTimestamp_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePragmaRestrictReferences
entryRulePragmaRestrictReferences returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getPragmaRestrictReferencesRule(), currentNode); }
	 iv_rulePragmaRestrictReferences=rulePragmaRestrictReferences 
	 { $current=$iv_rulePragmaRestrictReferences.current; } 
	 EOF 
;

// Rule PragmaRestrictReferences
rulePragmaRestrictReferences returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_45 
    {
        createLeafNode(grammarAccess.getPragmaRestrictReferencesAccess().getPRAGMAKeyword_0(), null); 
    }

	KEYWORD_66 
    {
        createLeafNode(grammarAccess.getPragmaRestrictReferencesAccess().getRESTRICT_REFERENCESKeyword_1(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getPragmaRestrictReferencesAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPragmaRestrictReferencesAccess().getSubprogramNameParserRuleCall_3_0(), currentNode); 
    }
ruleSubprogramName
    {
        currentNode = currentNode.getParent();
    }

    |
	KEYWORD_50 
    {
        createLeafNode(grammarAccess.getPragmaRestrictReferencesAccess().getDEFAULTKeyword_3_1(), null); 
    }
)
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getPragmaRestrictReferencesAccess().getCommaKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_5_0(), currentNode); 
	    }
		lv_restrictions_6_0=rulePragmaRestrictReferencesRestriction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPragmaRestrictReferencesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"restrictions",
	        		lv_restrictions_6_0, 
	        		"PragmaRestrictReferencesRestriction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getPragmaRestrictReferencesAccess().getCommaKeyword_6_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_restrictions_8_0=rulePragmaRestrictReferencesRestriction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPragmaRestrictReferencesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"restrictions",
	        		lv_restrictions_8_0, 
	        		"PragmaRestrictReferencesRestriction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getPragmaRestrictReferencesAccess().getRightParenthesisKeyword_7(), null); 
    }

	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getPragmaRestrictReferencesAccess().getSemicolonKeyword_8(), null); 
    }
)
;





// Entry rule entryRulePragmaRestrictReferencesRestriction
entryRulePragmaRestrictReferencesRestriction returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getPragmaRestrictReferencesRestrictionRule(), currentNode); } 
	 iv_rulePragmaRestrictReferencesRestriction=rulePragmaRestrictReferencesRestriction 
	 { $current=$iv_rulePragmaRestrictReferencesRestriction.current.getText(); }  
	 EOF 
;

// Rule PragmaRestrictReferencesRestriction
rulePragmaRestrictReferencesRestriction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw=KEYWORD_27 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getRNDSKeyword_0(), null); 
    }

    |
	kw=KEYWORD_32 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getWNDSKeyword_1(), null); 
    }

    |
	kw=KEYWORD_28 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getRNPSKeyword_2(), null); 
    }

    |
	kw=KEYWORD_33 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getWNPSKeyword_3(), null); 
    }

    |
	kw=KEYWORD_41 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPragmaRestrictReferencesRestrictionAccess().getTRUSTKeyword_4(), null); 
    }
)
    ;





// Entry rule entryRuleSubprogramName
entryRuleSubprogramName returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getSubprogramNameRule(), currentNode); } 
	 iv_ruleSubprogramName=ruleSubprogramName 
	 { $current=$iv_ruleSubprogramName.current.getText(); }  
	 EOF 
;

// Rule SubprogramName
ruleSubprogramName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getSubprogramNameAccess().getIDTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRulePragmaTimestamp
entryRulePragmaTimestamp returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getPragmaTimestampRule(), currentNode); }
	 iv_rulePragmaTimestamp=rulePragmaTimestamp 
	 { $current=$iv_rulePragmaTimestamp.current; } 
	 EOF 
;

// Rule PragmaTimestamp
rulePragmaTimestamp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_45 
    {
        createLeafNode(grammarAccess.getPragmaTimestampAccess().getPRAGMAKeyword_0(), null); 
    }

	KEYWORD_62 
    {
        createLeafNode(grammarAccess.getPragmaTimestampAccess().getTIMESTAMPKeyword_1(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getPragmaTimestampAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		lv_timestamp_3_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getPragmaTimestampAccess().getTimestampSTRINGTerminalRuleCall_3_0(), "timestamp"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPragmaTimestampRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"timestamp",
	        		lv_timestamp_3_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getPragmaTimestampAccess().getRightParenthesisKeyword_4(), null); 
    }

	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getPragmaTimestampAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleDataType
entryRuleDataType returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getDataTypeRule(), currentNode); } 
	 iv_ruleDataType=ruleDataType 
	 { $current=$iv_ruleDataType.current.getText(); }  
	 EOF 
;

// Rule DataType
ruleDataType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw=KEYWORD_44 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataTypeAccess().getNUMBERKeyword_0_0(), null); 
    }
(
	kw=KEYWORD_1 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataTypeAccess().getLeftParenthesisKeyword_0_1_0(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getDataTypeAccess().getINTTerminalRuleCall_0_1_1(), null); 
    }
(
	kw=KEYWORD_3 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataTypeAccess().getCommaKeyword_0_1_2_0(), null); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    createLeafNode(grammarAccess.getDataTypeAccess().getINTTerminalRuleCall_0_1_2_1(), null); 
    }
)?
	kw=KEYWORD_2 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataTypeAccess().getRightParenthesisKeyword_0_1_3(), null); 
    }
)?)
    |(
	kw=KEYWORD_58 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataTypeAccess().getVARCHAR2Keyword_1_0(), null); 
    }
(
	kw=KEYWORD_1 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataTypeAccess().getLeftParenthesisKeyword_1_1_0(), null); 
    }
    this_INT_8=RULE_INT    {
		$current.merge(this_INT_8);
    }

    { 
    createLeafNode(grammarAccess.getDataTypeAccess().getINTTerminalRuleCall_1_1_1(), null); 
    }

	kw=KEYWORD_2 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataTypeAccess().getRightParenthesisKeyword_1_1_2(), null); 
    }
)?)
    |
	kw=KEYWORD_47 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDataTypeAccess().getBOOLEANKeyword_2(), null); 
    }

    |    this_ID_11=RULE_ID    {
		$current.merge(this_ID_11);
    }

    { 
    createLeafNode(grammarAccess.getDataTypeAccess().getIDTerminalRuleCall_3(), null); 
    }
)
    ;





// Entry rule entryRuleProcedureContent
entryRuleProcedureContent returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getProcedureContentRule(), currentNode); }
	 iv_ruleProcedureContent=ruleProcedureContent 
	 { $current=$iv_ruleProcedureContent.current; } 
	 EOF 
;

// Rule ProcedureContent
ruleProcedureContent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getProcedureContentAccess().getProcedureImplementationParserRuleCall_0(), currentNode); 
    }
    this_ProcedureImplementation_0=ruleProcedureImplementation
    {
        $current = $this_ProcedureImplementation_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getProcedureContentAccess().getExternalProcedureDeclarationParserRuleCall_1(), currentNode); 
    }
    this_ExternalProcedureDeclaration_1=ruleExternalProcedureDeclaration
    {
        $current = $this_ExternalProcedureDeclaration_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleProcedureImplementation
entryRuleProcedureImplementation returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getProcedureImplementationRule(), currentNode); }
	 iv_ruleProcedureImplementation=ruleProcedureImplementation 
	 { $current=$iv_ruleProcedureImplementation.current; } 
	 EOF 
;

// Rule ProcedureImplementation
ruleProcedureImplementation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProcedureImplementationAccess().getDeclareSectionDeclareSectionParserRuleCall_0_0(), currentNode); 
	    }
		lv_declareSection_0_0=ruleDeclareSection		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureImplementationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"declareSection",
	        		lv_declareSection_0_0, 
	        		"DeclareSection", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProcedureImplementationAccess().getBodyStatementBodyParserRuleCall_1_0(), currentNode); 
	    }
		lv_body_1_0=ruleStatementBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureImplementationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_1_0, 
	        		"StatementBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFunctionContent
entryRuleFunctionContent returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionContentRule(), currentNode); }
	 iv_ruleFunctionContent=ruleFunctionContent 
	 { $current=$iv_ruleFunctionContent.current; } 
	 EOF 
;

// Rule FunctionContent
ruleFunctionContent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getFunctionContentAccess().getFunctionImplementationParserRuleCall(), currentNode); 
    }
    this_FunctionImplementation_0=ruleFunctionImplementation
    {
        $current = $this_FunctionImplementation_0.current;
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleFunctionImplementation
entryRuleFunctionImplementation returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionImplementationRule(), currentNode); }
	 iv_ruleFunctionImplementation=ruleFunctionImplementation 
	 { $current=$iv_ruleFunctionImplementation.current; } 
	 EOF 
;

// Rule FunctionImplementation
ruleFunctionImplementation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionImplementationAccess().getDeclareSectionDeclareSectionParserRuleCall_0_0(), currentNode); 
	    }
		lv_declareSection_0_0=ruleDeclareSection		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionImplementationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"declareSection",
	        		lv_declareSection_0_0, 
	        		"DeclareSection", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionImplementationAccess().getBodyStatementBodyParserRuleCall_1_0(), currentNode); 
	    }
		lv_body_1_0=ruleStatementBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionImplementationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_1_0, 
	        		"StatementBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFunctionClause
entryRuleFunctionClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionClauseRule(), currentNode); }
	 iv_ruleFunctionClause=ruleFunctionClause 
	 { $current=$iv_ruleFunctionClause.current; } 
	 EOF 
;

// Rule FunctionClause
ruleFunctionClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFunctionClauseAccess().getFunctionInvokerRightsClauseParserRuleCall_0(), currentNode); 
    }
    this_FunctionInvokerRightsClause_0=ruleFunctionInvokerRightsClause
    {
        $current = $this_FunctionInvokerRightsClause_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getFunctionClauseAccess().getDeterministicClauseParserRuleCall_1(), currentNode); 
    }
    this_DeterministicClause_1=ruleDeterministicClause
    {
        $current = $this_DeterministicClause_1.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getFunctionClauseAccess().getResultCacheClauseParserRuleCall_2(), currentNode); 
    }
    this_ResultCacheClause_2=ruleResultCacheClause
    {
        $current = $this_ResultCacheClause_2.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getFunctionClauseAccess().getPipelinedClauseParserRuleCall_3(), currentNode); 
    }
    this_PipelinedClause_3=rulePipelinedClause
    {
        $current = $this_PipelinedClause_3.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDeterministicClause
entryRuleDeterministicClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeterministicClauseRule(), currentNode); }
	 iv_ruleDeterministicClause=ruleDeterministicClause 
	 { $current=$iv_ruleDeterministicClause.current; } 
	 EOF 
;

// Rule DeterministicClause
ruleDeterministicClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getDeterministicClauseAccess().getDeterministicClauseAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDeterministicClauseAccess().getDeterministicClauseAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)
	KEYWORD_65 
    {
        createLeafNode(grammarAccess.getDeterministicClauseAccess().getDETERMINISTICKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleResultCacheClause
entryRuleResultCacheClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getResultCacheClauseRule(), currentNode); }
	 iv_ruleResultCacheClause=ruleResultCacheClause 
	 { $current=$iv_ruleResultCacheClause.current; } 
	 EOF 
;

// Rule ResultCacheClause
ruleResultCacheClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getResultCacheClauseAccess().getResultCacheClauseAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getResultCacheClauseAccess().getResultCacheClauseAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)
	KEYWORD_64 
    {
        createLeafNode(grammarAccess.getResultCacheClauseAccess().getRESULT_CACHEKeyword_1(), null); 
    }
(
	KEYWORD_61 
    {
        createLeafNode(grammarAccess.getResultCacheClauseAccess().getRELIES_ONKeyword_2_0(), null); 
    }

	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getResultCacheClauseAccess().getLeftParenthesisKeyword_2_1(), null); 
    }
((
(
		lv_dataSources_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getResultCacheClauseAccess().getDataSourcesIDTerminalRuleCall_2_2_0_0(), "dataSources"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResultCacheClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"dataSources",
	        		lv_dataSources_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getResultCacheClauseAccess().getCommaKeyword_2_2_1_0(), null); 
    }
(
(
		lv_dataSources_6_0=RULE_ID
		{
			createLeafNode(grammarAccess.getResultCacheClauseAccess().getDataSourcesIDTerminalRuleCall_2_2_1_1_0(), "dataSources"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResultCacheClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"dataSources",
	        		lv_dataSources_6_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))?
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getResultCacheClauseAccess().getRightParenthesisKeyword_2_3(), null); 
    }
)?)
;





// Entry rule entryRulePipelinedClause
entryRulePipelinedClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getPipelinedClauseRule(), currentNode); }
	 iv_rulePipelinedClause=rulePipelinedClause 
	 { $current=$iv_rulePipelinedClause.current; } 
	 EOF 
;

// Rule PipelinedClause
rulePipelinedClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getPipelinedClauseAccess().getPipelinedClauseAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPipelinedClauseAccess().getPipelinedClauseAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)
	KEYWORD_59 
    {
        createLeafNode(grammarAccess.getPipelinedClauseAccess().getPIPELINEDKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleStatementBody
entryRuleStatementBody returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementBodyRule(), currentNode); }
	 iv_ruleStatementBody=ruleStatementBody 
	 { $current=$iv_ruleStatementBody.current; } 
	 EOF 
;

// Rule StatementBody
ruleStatementBody returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_34 
    {
        createLeafNode(grammarAccess.getStatementBodyAccess().getBEGINKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementBodyAccess().getStatementsStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_statements_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_1_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getStatementBodyAccess().getENDKeyword_2(), null); 
    }
(
(
		lv_endName_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getStatementBodyAccess().getEndNameIDTerminalRuleCall_3_0(), "endName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"endName",
	        		lv_endName_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getStatementBodyAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleDeclareSection
entryRuleDeclareSection returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeclareSectionRule(), currentNode); }
	 iv_ruleDeclareSection=ruleDeclareSection 
	 { $current=$iv_ruleDeclareSection.current; } 
	 EOF 
;

// Rule DeclareSection
ruleDeclareSection returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	KEYWORD_49 
    {
        createLeafNode(grammarAccess.getDeclareSectionAccess().getDECLAREKeyword_0(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclareSectionAccess().getItemsItemParserRuleCall_1_0(), currentNode); 
	    }
		lv_items_1_0=ruleItem		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclareSectionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_1_0, 
	        		"Item", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleItem
entryRuleItem returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getItemRule(), currentNode); }
	 iv_ruleItem=ruleItem 
	 { $current=$iv_ruleItem.current; } 
	 EOF 
;

// Rule Item
ruleItem returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getItemAccess().getItemDeclarationParserRuleCall_0(), currentNode); 
    }
    this_ItemDeclaration_0=ruleItemDeclaration
    {
        $current = $this_ItemDeclaration_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getItemAccess().getProcedureDeclarationParserRuleCall_1(), currentNode); 
    }
    this_ProcedureDeclaration_1=ruleProcedureDeclaration
    {
        $current = $this_ProcedureDeclaration_1.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getItemAccess().getProcedureDefinitionParserRuleCall_2(), currentNode); 
    }
    this_ProcedureDefinition_2=ruleProcedureDefinition
    {
        $current = $this_ProcedureDefinition_2.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getItemAccess().getPragmaParserRuleCall_3(), currentNode); 
    }
    this_Pragma_3=rulePragma
    {
        $current = $this_Pragma_3.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleItemDeclaration
entryRuleItemDeclaration returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getItemDeclarationRule(), currentNode); }
	 iv_ruleItemDeclaration=ruleItemDeclaration 
	 { $current=$iv_ruleItemDeclaration.current; } 
	 EOF 
;

// Rule ItemDeclaration
ruleItemDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getItemDeclarationAccess().getVariableDeclarationParserRuleCall(), currentNode); 
    }
    this_VariableDeclaration_0=ruleVariableDeclaration
    {
        $current = $this_VariableDeclaration_0.current;
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleExternalProcedureDeclaration
entryRuleExternalProcedureDeclaration returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getExternalProcedureDeclarationRule(), currentNode); }
	 iv_ruleExternalProcedureDeclaration=ruleExternalProcedureDeclaration 
	 { $current=$iv_ruleExternalProcedureDeclaration.current; } 
	 EOF 
;

// Rule ExternalProcedureDeclaration
ruleExternalProcedureDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getExternalProcedureDeclarationAccess().getExternalProcedureDeclarationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExternalProcedureDeclarationAccess().getExternalProcedureDeclarationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)
	KEYWORD_56 
    {
        createLeafNode(grammarAccess.getExternalProcedureDeclarationAccess().getEXTERNALKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableDeclarationRule(), currentNode); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_isConstant_1_0=
	KEYWORD_54 
    {
        createLeafNode(grammarAccess.getVariableDeclarationAccess().getIsConstantCONSTANTKeyword_1_0(), "isConstant"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isConstant", true, "CONSTANT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclarationAccess().getDataTypeDataTypeParserRuleCall_2_0(), currentNode); 
	    }
		lv_dataType_2_0=ruleDataType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dataType",
	        		lv_dataType_2_0, 
	        		"DataType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclarationAccess().getIsNotNullNOT_NULLParserRuleCall_3_0(), currentNode); 
	    }
		lv_isNotNull_3_0=ruleNOT_NULL		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"isNotNull",
	        		true, 
	        		"NOT_NULL", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclarationAccess().getValueVariableValueParserRuleCall_4_0(), currentNode); 
	    }
		lv_value_4_0=ruleVariableValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_4_0, 
	        		"VariableValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleNOT_NULL
entryRuleNOT_NULL returns [String current=null] 
:
	{ currentNode = createCompositeNode(grammarAccess.getNOT_NULLRule(), currentNode); } 
	 iv_ruleNOT_NULL=ruleNOT_NULL 
	 { $current=$iv_ruleNOT_NULL.current.getText(); }  
	 EOF 
;

// Rule NOT_NULL
ruleNOT_NULL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw=KEYWORD_17 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNOT_NULLAccess().getNOTKeyword_0(), null); 
    }

	kw=KEYWORD_26 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNOT_NULLAccess().getNULLKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleVariableValue
entryRuleVariableValue returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableValueRule(), currentNode); }
	 iv_ruleVariableValue=ruleVariableValue 
	 { $current=$iv_ruleVariableValue.current; } 
	 EOF 
;

// Rule VariableValue
ruleVariableValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	KEYWORD_8 
    {
        createLeafNode(grammarAccess.getVariableValueAccess().getColonEqualsSignKeyword_0_0(), null); 
    }

    |
	KEYWORD_50 
    {
        createLeafNode(grammarAccess.getVariableValueAccess().getDEFAULTKeyword_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableValueAccess().getExpressionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getIntLiteralExpressionParserRuleCall_0(), currentNode); 
    }
    this_IntLiteralExpression_0=ruleIntLiteralExpression
    {
        $current = $this_IntLiteralExpression_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getStringLiteralExpressionParserRuleCall_1(), currentNode); 
    }
    this_StringLiteralExpression_1=ruleStringLiteralExpression
    {
        $current = $this_StringLiteralExpression_1.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getBooleanLiteralExpressionParserRuleCall_2(), currentNode); 
    }
    this_BooleanLiteralExpression_2=ruleBooleanLiteralExpression
    {
        $current = $this_BooleanLiteralExpression_2.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getNullLiteralExpressionParserRuleCall_3(), currentNode); 
    }
    this_NullLiteralExpression_3=ruleNullLiteralExpression
    {
        $current = $this_NullLiteralExpression_3.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getVariableRefExpressionParserRuleCall_4(), currentNode); 
    }
    this_VariableRefExpression_4=ruleVariableRefExpression
    {
        $current = $this_VariableRefExpression_4.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleIntLiteralExpression
entryRuleIntLiteralExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntLiteralExpressionRule(), currentNode); }
	 iv_ruleIntLiteralExpression=ruleIntLiteralExpression 
	 { $current=$iv_ruleIntLiteralExpression.current; } 
	 EOF 
;

// Rule IntLiteralExpression
ruleIntLiteralExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntLiteralExpressionAccess().getValueINTTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntLiteralExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleStringLiteralExpression
entryRuleStringLiteralExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralExpressionRule(), currentNode); }
	 iv_ruleStringLiteralExpression=ruleStringLiteralExpression 
	 { $current=$iv_ruleStringLiteralExpression.current; } 
	 EOF 
;

// Rule StringLiteralExpression
ruleStringLiteralExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleBooleanLiteralExpression
entryRuleBooleanLiteralExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralExpressionRule(), currentNode); }
	 iv_ruleBooleanLiteralExpression=ruleBooleanLiteralExpression 
	 { $current=$iv_ruleBooleanLiteralExpression.current; } 
	 EOF 
;

// Rule BooleanLiteralExpression
ruleBooleanLiteralExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
(
		lv_value_0_1=
	KEYWORD_30 
    {
        createLeafNode(grammarAccess.getBooleanLiteralExpressionAccess().getValueTRUEKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_value_0_2=
	KEYWORD_37 
    {
        createLeafNode(grammarAccess.getBooleanLiteralExpressionAccess().getValueFALSEKeyword_0_1(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)
;





// Entry rule entryRuleNullLiteralExpression
entryRuleNullLiteralExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullLiteralExpressionRule(), currentNode); }
	 iv_ruleNullLiteralExpression=ruleNullLiteralExpression 
	 { $current=$iv_ruleNullLiteralExpression.current; } 
	 EOF 
;

// Rule NullLiteralExpression
ruleNullLiteralExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getNullLiteralExpressionAccess().getNullLiteralExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNullLiteralExpressionAccess().getNullLiteralExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)
	KEYWORD_26 
    {
        createLeafNode(grammarAccess.getNullLiteralExpressionAccess().getNULLKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleVariableRefExpression
entryRuleVariableRefExpression returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableRefExpressionRule(), currentNode); }
	 iv_ruleVariableRefExpression=ruleVariableRefExpression 
	 { $current=$iv_ruleVariableRefExpression.current; } 
	 EOF 
;

// Rule VariableRefExpression
ruleVariableRefExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableRefExpressionAccess().getVariableVariableRefParserRuleCall_0(), currentNode); 
	    }
		lv_variable_0_0=ruleVariableRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRefExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable",
	        		lv_variable_0_0, 
	        		"VariableRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall_0(), currentNode); 
    }
    this_AssignmentStatement_0=ruleAssignmentStatement
    {
        $current = $this_AssignmentStatement_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getBlockStatementParserRuleCall_1(), currentNode); 
    }
    this_BlockStatement_1=ruleBlockStatement
    {
        $current = $this_BlockStatement_1.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getCaseStatementParserRuleCall_2(), currentNode); 
    }
    this_CaseStatement_2=ruleCaseStatement
    {
        $current = $this_CaseStatement_2.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getCloseStatementParserRuleCall_3(), currentNode); 
    }
    this_CloseStatement_3=ruleCloseStatement
    {
        $current = $this_CloseStatement_3.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_4(), currentNode); 
    }
    this_ContinueStatement_4=ruleContinueStatement
    {
        $current = $this_ContinueStatement_4.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getExitStatementParserRuleCall_5(), currentNode); 
    }
    this_ExitStatement_5=ruleExitStatement
    {
        $current = $this_ExitStatement_5.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getFetchStatementParserRuleCall_6(), currentNode); 
    }
    this_FetchStatement_6=ruleFetchStatement
    {
        $current = $this_FetchStatement_6.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getGotoStatementParserRuleCall_7(), currentNode); 
    }
    this_GotoStatement_7=ruleGotoStatement
    {
        $current = $this_GotoStatement_7.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_8(), currentNode); 
    }
    this_IfStatement_8=ruleIfStatement
    {
        $current = $this_IfStatement_8.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_9(), currentNode); 
    }
    this_LoopStatement_9=ruleLoopStatement
    {
        $current = $this_LoopStatement_9.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getNullStatementParserRuleCall_10(), currentNode); 
    }
    this_NullStatement_10=ruleNullStatement
    {
        $current = $this_NullStatement_10.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getRaiseStatementParserRuleCall_11(), currentNode); 
    }
    this_RaiseStatement_11=ruleRaiseStatement
    {
        $current = $this_RaiseStatement_11.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_12(), currentNode); 
    }
    this_ReturnStatement_12=ruleReturnStatement
    {
        $current = $this_ReturnStatement_12.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getLabelRule(), currentNode); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_9 
    {
        createLeafNode(grammarAccess.getLabelAccess().getLessThanSignLessThanSignKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLabelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getLabelAccess().getGreaterThanSignGreaterThanSignKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleAssignmentStatement
entryRuleAssignmentStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentStatementRule(), currentNode); }
	 iv_ruleAssignmentStatement=ruleAssignmentStatement 
	 { $current=$iv_ruleAssignmentStatement.current; } 
	 EOF 
;

// Rule AssignmentStatement
ruleAssignmentStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentStatementAccess().getLabelsLabelParserRuleCall_0_0(), currentNode); 
	    }
		lv_labels_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_0_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentStatementAccess().getTargetAssignmentTargetParserRuleCall_1_0(), currentNode); 
	    }
		lv_target_1_0=ruleAssignmentTarget		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"target",
	        		lv_target_1_0, 
	        		"AssignmentTarget", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_8 
    {
        createLeafNode(grammarAccess.getAssignmentStatementAccess().getColonEqualsSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentStatementAccess().getExpressionExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getAssignmentStatementAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleAssignmentTarget
entryRuleAssignmentTarget returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentTargetRule(), currentNode); }
	 iv_ruleAssignmentTarget=ruleAssignmentTarget 
	 { $current=$iv_ruleAssignmentTarget.current; } 
	 EOF 
;

// Rule AssignmentTarget
ruleAssignmentTarget returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getAssignmentTargetAccess().getVariableAssignmentTargetParserRuleCall(), currentNode); 
    }
    this_VariableAssignmentTarget_0=ruleVariableAssignmentTarget
    {
        $current = $this_VariableAssignmentTarget_0.current;
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleVariableAssignmentTarget
entryRuleVariableAssignmentTarget returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableAssignmentTargetRule(), currentNode); }
	 iv_ruleVariableAssignmentTarget=ruleVariableAssignmentTarget 
	 { $current=$iv_ruleVariableAssignmentTarget.current; } 
	 EOF 
;

// Rule VariableAssignmentTarget
ruleVariableAssignmentTarget returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableAssignmentTargetAccess().getVariableVariableRefParserRuleCall_0(), currentNode); 
	    }
		lv_variable_0_0=ruleVariableRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableAssignmentTargetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable",
	        		lv_variable_0_0, 
	        		"VariableRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleBlockStatement
entryRuleBlockStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockStatementRule(), currentNode); }
	 iv_ruleBlockStatement=ruleBlockStatement 
	 { $current=$iv_ruleBlockStatement.current; } 
	 EOF 
;

// Rule BlockStatement
ruleBlockStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockStatementAccess().getLabelsLabelParserRuleCall_0_0(), currentNode); 
	    }
		lv_labels_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_0_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockStatementAccess().getDeclareSectionDeclareSectionParserRuleCall_1_0(), currentNode); 
	    }
		lv_declareSection_1_0=ruleDeclareSection		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"declareSection",
	        		lv_declareSection_1_0, 
	        		"DeclareSection", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockStatementAccess().getBodyStatementBodyParserRuleCall_2_0(), currentNode); 
	    }
		lv_body_2_0=ruleStatementBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_2_0, 
	        		"StatementBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleCaseStatement
entryRuleCaseStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getCaseStatementRule(), currentNode); }
	 iv_ruleCaseStatement=ruleCaseStatement 
	 { $current=$iv_ruleCaseStatement.current; } 
	 EOF 
;

// Rule CaseStatement
ruleCaseStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseStatementAccess().getLabelsLabelParserRuleCall_0_0(), currentNode); 
	    }
		lv_labels_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_0_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_20 
    {
        createLeafNode(grammarAccess.getCaseStatementAccess().getCASEKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseStatementAccess().getExpressionExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseStatementAccess().getWhenBranchesCaseStatementWhenBranchParserRuleCall_3_0(), currentNode); 
	    }
		lv_whenBranches_3_0=ruleCaseStatementWhenBranch		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"whenBranches",
	        		lv_whenBranches_3_0, 
	        		"CaseStatementWhenBranch", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseStatementAccess().getElseBranchCaseStatementElseBranchParserRuleCall_4_0(), currentNode); 
	    }
		lv_elseBranch_4_0=ruleCaseStatementElseBranch		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elseBranch",
	        		lv_elseBranch_4_0, 
	        		"CaseStatementElseBranch", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getCaseStatementAccess().getENDKeyword_5(), null); 
    }

	KEYWORD_20 
    {
        createLeafNode(grammarAccess.getCaseStatementAccess().getCASEKeyword_6(), null); 
    }
(
(
		lv_endLabel_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getCaseStatementAccess().getEndLabelIDTerminalRuleCall_7_0(), "endLabel"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"endLabel",
	        		lv_endLabel_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getCaseStatementAccess().getSemicolonKeyword_8(), null); 
    }
)
;





// Entry rule entryRuleCaseStatementWhenBranch
entryRuleCaseStatementWhenBranch returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getCaseStatementWhenBranchRule(), currentNode); }
	 iv_ruleCaseStatementWhenBranch=ruleCaseStatementWhenBranch 
	 { $current=$iv_ruleCaseStatementWhenBranch.current; } 
	 EOF 
;

// Rule CaseStatementWhenBranch
ruleCaseStatementWhenBranch returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_31 
    {
        createLeafNode(grammarAccess.getCaseStatementWhenBranchAccess().getWHENKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseStatementWhenBranchAccess().getExpressionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseStatementWhenBranchRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_29 
    {
        createLeafNode(grammarAccess.getCaseStatementWhenBranchAccess().getTHENKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseStatementWhenBranchAccess().getStatementsStatementParserRuleCall_3_0(), currentNode); 
	    }
		lv_statements_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseStatementWhenBranchRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_3_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleCaseStatementElseBranch
entryRuleCaseStatementElseBranch returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getCaseStatementElseBranchRule(), currentNode); }
	 iv_ruleCaseStatementElseBranch=ruleCaseStatementElseBranch 
	 { $current=$iv_ruleCaseStatementElseBranch.current; } 
	 EOF 
;

// Rule CaseStatementElseBranch
ruleCaseStatementElseBranch returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_21 
    {
        createLeafNode(grammarAccess.getCaseStatementElseBranchAccess().getELSEKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCaseStatementElseBranchAccess().getStatementsStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_statements_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCaseStatementElseBranchRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_1_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleCloseStatement
entryRuleCloseStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getCloseStatementRule(), currentNode); }
	 iv_ruleCloseStatement=ruleCloseStatement 
	 { $current=$iv_ruleCloseStatement.current; } 
	 EOF 
;

// Rule CloseStatement
ruleCloseStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCloseStatementAccess().getLabelsLabelParserRuleCall_0_0(), currentNode); 
	    }
		lv_labels_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCloseStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_0_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_35 
    {
        createLeafNode(grammarAccess.getCloseStatementAccess().getCLOSEKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCloseStatementAccess().getCursorVariableRefParserRuleCall_2_0(), currentNode); 
	    }
		lv_cursor_2_0=ruleVariableRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCloseStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"cursor",
	        		lv_cursor_2_0, 
	        		"VariableRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getCloseStatementAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleContinueStatement
entryRuleContinueStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getContinueStatementRule(), currentNode); }
	 iv_ruleContinueStatement=ruleContinueStatement 
	 { $current=$iv_ruleContinueStatement.current; } 
	 EOF 
;

// Rule ContinueStatement
ruleContinueStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getContinueStatementAccess().getLabelsLabelParserRuleCall_1_0(), currentNode); 
	    }
		lv_labels_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContinueStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_1_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_55 
    {
        createLeafNode(grammarAccess.getContinueStatementAccess().getCONTINUEKeyword_2(), null); 
    }
(
(
		lv_labelName_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getContinueStatementAccess().getLabelNameIDTerminalRuleCall_3_0(), "labelName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContinueStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"labelName",
	        		lv_labelName_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
	KEYWORD_31 
    {
        createLeafNode(grammarAccess.getContinueStatementAccess().getWHENKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getContinueStatementAccess().getWhenExpressionExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_whenExpression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getContinueStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whenExpression",
	        		lv_whenExpression_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getContinueStatementAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleExitStatement
entryRuleExitStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getExitStatementRule(), currentNode); }
	 iv_ruleExitStatement=ruleExitStatement 
	 { $current=$iv_ruleExitStatement.current; } 
	 EOF 
;

// Rule ExitStatement
ruleExitStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getExitStatementAccess().getExitStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExitStatementAccess().getExitStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExitStatementAccess().getLabelsLabelParserRuleCall_1_0(), currentNode); 
	    }
		lv_labels_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExitStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_1_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_22 
    {
        createLeafNode(grammarAccess.getExitStatementAccess().getEXITKeyword_2(), null); 
    }
(
(
		lv_labelName_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getExitStatementAccess().getLabelNameIDTerminalRuleCall_3_0(), "labelName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExitStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"labelName",
	        		lv_labelName_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
	KEYWORD_31 
    {
        createLeafNode(grammarAccess.getExitStatementAccess().getWHENKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExitStatementAccess().getWhenExpressionExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_whenExpression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExitStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whenExpression",
	        		lv_whenExpression_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getExitStatementAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleFetchStatement
entryRuleFetchStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFetchStatementRule(), currentNode); }
	 iv_ruleFetchStatement=ruleFetchStatement 
	 { $current=$iv_ruleFetchStatement.current; } 
	 EOF 
;

// Rule FetchStatement
ruleFetchStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFetchStatementAccess().getLabelsLabelParserRuleCall_0_0(), currentNode); 
	    }
		lv_labels_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFetchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_0_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_38 
    {
        createLeafNode(grammarAccess.getFetchStatementAccess().getFETCHKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFetchStatementAccess().getCursorVariableRefParserRuleCall_2_0(), currentNode); 
	    }
		lv_cursor_2_0=ruleVariableRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFetchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"cursor",
	        		lv_cursor_2_0, 
	        		"VariableRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFetchStatementAccess().getIntoClauseFetchStatementIntoClauseParserRuleCall_3_0(), currentNode); 
	    }
		lv_intoClause_3_0=ruleFetchStatementIntoClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFetchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"intoClause",
	        		lv_intoClause_3_0, 
	        		"FetchStatementIntoClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getFetchStatementAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleFetchStatementIntoClause
entryRuleFetchStatementIntoClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFetchStatementIntoClauseRule(), currentNode); }
	 iv_ruleFetchStatementIntoClause=ruleFetchStatementIntoClause 
	 { $current=$iv_ruleFetchStatementIntoClause.current; } 
	 EOF 
;

// Rule FetchStatementIntoClause
ruleFetchStatementIntoClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFetchStatementIntoClauseAccess().getFetchStatementSingleIntoClauseParserRuleCall_0(), currentNode); 
    }
    this_FetchStatementSingleIntoClause_0=ruleFetchStatementSingleIntoClause
    {
        $current = $this_FetchStatementSingleIntoClause_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getFetchStatementIntoClauseAccess().getFetchStatementBulkIntoClauseParserRuleCall_1(), currentNode); 
    }
    this_FetchStatementBulkIntoClause_1=ruleFetchStatementBulkIntoClause
    {
        $current = $this_FetchStatementBulkIntoClause_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleFetchStatementSingleIntoClause
entryRuleFetchStatementSingleIntoClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFetchStatementSingleIntoClauseRule(), currentNode); }
	 iv_ruleFetchStatementSingleIntoClause=ruleFetchStatementSingleIntoClause 
	 { $current=$iv_ruleFetchStatementSingleIntoClause.current; } 
	 EOF 
;

// Rule FetchStatementSingleIntoClause
ruleFetchStatementSingleIntoClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_24 
    {
        createLeafNode(grammarAccess.getFetchStatementSingleIntoClauseAccess().getINTOKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFetchStatementSingleIntoClauseAccess().getTargetVariablesVariableRefParserRuleCall_1_0(), currentNode); 
	    }
		lv_targetVariables_1_0=ruleVariableRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFetchStatementSingleIntoClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"targetVariables",
	        		lv_targetVariables_1_0, 
	        		"VariableRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleFetchStatementBulkIntoClause
entryRuleFetchStatementBulkIntoClause returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getFetchStatementBulkIntoClauseRule(), currentNode); }
	 iv_ruleFetchStatementBulkIntoClause=ruleFetchStatementBulkIntoClause 
	 { $current=$iv_ruleFetchStatementBulkIntoClause.current; } 
	 EOF 
;

// Rule FetchStatementBulkIntoClause
ruleFetchStatementBulkIntoClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_19 
    {
        createLeafNode(grammarAccess.getFetchStatementBulkIntoClauseAccess().getBULKKeyword_0(), null); 
    }

	KEYWORD_48 
    {
        createLeafNode(grammarAccess.getFetchStatementBulkIntoClauseAccess().getCOLLECTKeyword_1(), null); 
    }

	KEYWORD_24 
    {
        createLeafNode(grammarAccess.getFetchStatementBulkIntoClauseAccess().getINTOKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFetchStatementBulkIntoClauseAccess().getTargetVariablesVariableRefParserRuleCall_3_0(), currentNode); 
	    }
		lv_targetVariables_3_0=ruleVariableRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFetchStatementBulkIntoClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"targetVariables",
	        		lv_targetVariables_3_0, 
	        		"VariableRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+(
	KEYWORD_39 
    {
        createLeafNode(grammarAccess.getFetchStatementBulkIntoClauseAccess().getLIMITKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFetchStatementBulkIntoClauseAccess().getLimitExpressionExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_limitExpression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFetchStatementBulkIntoClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"limitExpression",
	        		lv_limitExpression_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleGotoStatement
entryRuleGotoStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getGotoStatementRule(), currentNode); }
	 iv_ruleGotoStatement=ruleGotoStatement 
	 { $current=$iv_ruleGotoStatement.current; } 
	 EOF 
;

// Rule GotoStatement
ruleGotoStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGotoStatementAccess().getLabelsLabelParserRuleCall_0_0(), currentNode); 
	    }
		lv_labels_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGotoStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_0_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_23 
    {
        createLeafNode(grammarAccess.getGotoStatementAccess().getGOTOKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getGotoStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getGotoStatementAccess().getLabelNameLabelCrossReference_2_0(), "labelName"); 
	}

)
)
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getGotoStatementAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfStatementRule(), currentNode); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementAccess().getLabelsLabelParserRuleCall_0_0(), currentNode); 
	    }
		lv_labels_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_0_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_12 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getIFKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_29 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getTHENKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementAccess().getStatementsStatementParserRuleCall_4_0(), currentNode); 
	    }
		lv_statements_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_4_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementAccess().getElsifBranchesIfStatementElsifBranchParserRuleCall_5_0(), currentNode); 
	    }
		lv_elsifBranches_5_0=ruleIfStatementElsifBranch		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elsifBranches",
	        		lv_elsifBranches_5_0, 
	        		"IfStatementElsifBranch", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementAccess().getElseBranchIfStatementElseBranchParserRuleCall_6_0(), currentNode); 
	    }
		lv_elseBranch_6_0=ruleIfStatementElseBranch		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elseBranch",
	        		lv_elseBranch_6_0, 
	        		"IfStatementElseBranch", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getENDKeyword_7(), null); 
    }

	KEYWORD_12 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getIFKeyword_8(), null); 
    }

	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getSemicolonKeyword_9(), null); 
    }
)
;





// Entry rule entryRuleIfStatementElsifBranch
entryRuleIfStatementElsifBranch returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfStatementElsifBranchRule(), currentNode); }
	 iv_ruleIfStatementElsifBranch=ruleIfStatementElsifBranch 
	 { $current=$iv_ruleIfStatementElsifBranch.current; } 
	 EOF 
;

// Rule IfStatementElsifBranch
ruleIfStatementElsifBranch returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_36 
    {
        createLeafNode(grammarAccess.getIfStatementElsifBranchAccess().getELSIFKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementElsifBranchAccess().getExpressionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementElsifBranchRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_29 
    {
        createLeafNode(grammarAccess.getIfStatementElsifBranchAccess().getTHENKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementElsifBranchAccess().getStatementsStatementParserRuleCall_3_0(), currentNode); 
	    }
		lv_statements_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementElsifBranchRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_3_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleIfStatementElseBranch
entryRuleIfStatementElseBranch returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfStatementElseBranchRule(), currentNode); }
	 iv_ruleIfStatementElseBranch=ruleIfStatementElseBranch 
	 { $current=$iv_ruleIfStatementElseBranch.current; } 
	 EOF 
;

// Rule IfStatementElseBranch
ruleIfStatementElseBranch returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_21 
    {
        createLeafNode(grammarAccess.getIfStatementElseBranchAccess().getELSEKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementElseBranchAccess().getStatementsStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_statements_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementElseBranchRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_1_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleLoopStatement
entryRuleLoopStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getLoopStatementRule(), currentNode); }
	 iv_ruleLoopStatement=ruleLoopStatement 
	 { $current=$iv_ruleLoopStatement.current; } 
	 EOF 
;

// Rule LoopStatement
ruleLoopStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLoopStatementAccess().getBasicLoopStatementParserRuleCall_0(), currentNode); 
    }
    this_BasicLoopStatement_0=ruleBasicLoopStatement
    {
        $current = $this_BasicLoopStatement_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLoopStatementAccess().getWhileLoopStatementParserRuleCall_1(), currentNode); 
    }
    this_WhileLoopStatement_1=ruleWhileLoopStatement
    {
        $current = $this_WhileLoopStatement_1.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLoopStatementAccess().getForLoopStatementParserRuleCall_2(), currentNode); 
    }
    this_ForLoopStatement_2=ruleForLoopStatement
    {
        $current = $this_ForLoopStatement_2.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBasicLoopStatement
entryRuleBasicLoopStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getBasicLoopStatementRule(), currentNode); }
	 iv_ruleBasicLoopStatement=ruleBasicLoopStatement 
	 { $current=$iv_ruleBasicLoopStatement.current; } 
	 EOF 
;

// Rule BasicLoopStatement
ruleBasicLoopStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBasicLoopStatementAccess().getLabelsLabelParserRuleCall_0_0(), currentNode); 
	    }
		lv_labels_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasicLoopStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_0_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_25 
    {
        createLeafNode(grammarAccess.getBasicLoopStatementAccess().getLOOPKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBasicLoopStatementAccess().getStatementsStatementParserRuleCall_2_0(), currentNode); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasicLoopStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_2_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getBasicLoopStatementAccess().getENDKeyword_3(), null); 
    }

	KEYWORD_25 
    {
        createLeafNode(grammarAccess.getBasicLoopStatementAccess().getLOOPKeyword_4(), null); 
    }
(
(
		lv_endLabel_5_0=RULE_ID
		{
			createLeafNode(grammarAccess.getBasicLoopStatementAccess().getEndLabelIDTerminalRuleCall_5_0(), "endLabel"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasicLoopStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"endLabel",
	        		lv_endLabel_5_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getBasicLoopStatementAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleWhileLoopStatement
entryRuleWhileLoopStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getWhileLoopStatementRule(), currentNode); }
	 iv_ruleWhileLoopStatement=ruleWhileLoopStatement 
	 { $current=$iv_ruleWhileLoopStatement.current; } 
	 EOF 
;

// Rule WhileLoopStatement
ruleWhileLoopStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhileLoopStatementAccess().getLabelsLabelParserRuleCall_0_0(), currentNode); 
	    }
		lv_labels_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileLoopStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_0_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_42 
    {
        createLeafNode(grammarAccess.getWhileLoopStatementAccess().getWHILEKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhileLoopStatementAccess().getExpressionExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileLoopStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_25 
    {
        createLeafNode(grammarAccess.getWhileLoopStatementAccess().getLOOPKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhileLoopStatementAccess().getStatementsStatementParserRuleCall_4_0(), currentNode); 
	    }
		lv_statements_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileLoopStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_4_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getWhileLoopStatementAccess().getENDKeyword_5(), null); 
    }

	KEYWORD_25 
    {
        createLeafNode(grammarAccess.getWhileLoopStatementAccess().getLOOPKeyword_6(), null); 
    }
(
(
		lv_endLabel_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getWhileLoopStatementAccess().getEndLabelIDTerminalRuleCall_7_0(), "endLabel"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileLoopStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"endLabel",
	        		lv_endLabel_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getWhileLoopStatementAccess().getSemicolonKeyword_8(), null); 
    }
)
;





// Entry rule entryRuleForLoopStatement
entryRuleForLoopStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getForLoopStatementRule(), currentNode); }
	 iv_ruleForLoopStatement=ruleForLoopStatement 
	 { $current=$iv_ruleForLoopStatement.current; } 
	 EOF 
;

// Rule ForLoopStatement
ruleForLoopStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForLoopStatementAccess().getLabelsLabelParserRuleCall_0_0(), currentNode); 
	    }
		lv_labels_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForLoopStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_0_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_16 
    {
        createLeafNode(grammarAccess.getForLoopStatementAccess().getFORKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForLoopStatementAccess().getIndexVariableLoopVariableDeclarationParserRuleCall_2_0(), currentNode); 
	    }
		lv_indexVariable_2_0=ruleLoopVariableDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForLoopStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"indexVariable",
	        		lv_indexVariable_2_0, 
	        		"LoopVariableDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_13 
    {
        createLeafNode(grammarAccess.getForLoopStatementAccess().getINKeyword_3(), null); 
    }
(
	KEYWORD_53 
    {
        createLeafNode(grammarAccess.getForLoopStatementAccess().getREVERSEKeyword_4(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForLoopStatementAccess().getLowerBoundExpressionParserRuleCall_5_0(), currentNode); 
	    }
		lv_lowerBound_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForLoopStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lowerBound",
	        		lv_lowerBound_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_7 
    {
        createLeafNode(grammarAccess.getForLoopStatementAccess().getFullStopFullStopKeyword_6(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForLoopStatementAccess().getUpperBoundExpressionParserRuleCall_7_0(), currentNode); 
	    }
		lv_upperBound_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForLoopStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upperBound",
	        		lv_upperBound_7_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	KEYWORD_25 
    {
        createLeafNode(grammarAccess.getForLoopStatementAccess().getLOOPKeyword_8(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForLoopStatementAccess().getStatementsStatementParserRuleCall_9_0(), currentNode); 
	    }
		lv_statements_9_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForLoopStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_9_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getForLoopStatementAccess().getENDKeyword_10(), null); 
    }

	KEYWORD_25 
    {
        createLeafNode(grammarAccess.getForLoopStatementAccess().getLOOPKeyword_11(), null); 
    }
(
(
		lv_endLabel_12_0=RULE_ID
		{
			createLeafNode(grammarAccess.getForLoopStatementAccess().getEndLabelIDTerminalRuleCall_12_0(), "endLabel"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForLoopStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"endLabel",
	        		lv_endLabel_12_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getForLoopStatementAccess().getSemicolonKeyword_13(), null); 
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getReturnStatementRule(), currentNode); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReturnStatementAccess().getLabelsLabelParserRuleCall_1_0(), currentNode); 
	    }
		lv_labels_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_1_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_46 
    {
        createLeafNode(grammarAccess.getReturnStatementAccess().getRETURNKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleNullStatement
entryRuleNullStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullStatementRule(), currentNode); }
	 iv_ruleNullStatement=ruleNullStatement 
	 { $current=$iv_ruleNullStatement.current; } 
	 EOF 
;

// Rule NullStatement
ruleNullStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getNullStatementAccess().getNullStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNullStatementAccess().getNullStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNullStatementAccess().getLabelsLabelParserRuleCall_1_0(), currentNode); 
	    }
		lv_labels_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNullStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_1_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_26 
    {
        createLeafNode(grammarAccess.getNullStatementAccess().getNULLKeyword_2(), null); 
    }

	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getNullStatementAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleRaiseStatement
entryRuleRaiseStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getRaiseStatementRule(), currentNode); }
	 iv_ruleRaiseStatement=ruleRaiseStatement 
	 { $current=$iv_ruleRaiseStatement.current; } 
	 EOF 
;

// Rule RaiseStatement
ruleRaiseStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getRaiseStatementAccess().getRaiseStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRaiseStatementAccess().getRaiseStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRaiseStatementAccess().getLabelsLabelParserRuleCall_1_0(), currentNode); 
	    }
		lv_labels_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRaiseStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"labels",
	        		lv_labels_1_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
	KEYWORD_40 
    {
        createLeafNode(grammarAccess.getRaiseStatementAccess().getRAISEKeyword_2(), null); 
    }
(
(
		lv_exceptionName_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRaiseStatementAccess().getExceptionNameIDTerminalRuleCall_3_0(), "exceptionName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRaiseStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exceptionName",
	        		lv_exceptionName_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getRaiseStatementAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleVariableRef
entryRuleVariableRef returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableRefRule(), currentNode); }
	 iv_ruleVariableRef=ruleVariableRef 
	 { $current=$iv_ruleVariableRef.current; } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_isHostRef_0_0=
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getVariableRefAccess().getIsHostRefColonKeyword_0_0(), "isHostRef"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isHostRef", true, ":", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableRefAccess().getNameQualifiedNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedNameRule(), currentNode); }
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current; } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedNameAccess().getNamesNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_names_0_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"names",
	        		lv_names_0_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_4 
    {
        createLeafNode(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedNameAccess().getNamesNameParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_names_2_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"names",
	        		lv_names_2_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleName
entryRuleName returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getNameRule(), currentNode); }
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current; } 
	 EOF 
;

// Rule Name
ruleName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getNameAccess().getDeclarationNameDeclarationCrossReference_0(), "declaration"); 
	}

)
)
;





// Entry rule entryRuleLoopVariableDeclaration
entryRuleLoopVariableDeclaration returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getLoopVariableDeclarationRule(), currentNode); }
	 iv_ruleLoopVariableDeclaration=ruleLoopVariableDeclaration 
	 { $current=$iv_ruleLoopVariableDeclaration.current; } 
	 EOF 
;

// Rule LoopVariableDeclaration
ruleLoopVariableDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoopVariableDeclarationAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;







// Rule InvokerRight
ruleInvokerRight returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((    KEYWORD_63
	{
        $current = grammarAccess.getInvokerRightAccess().getCURRENT_USEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getInvokerRightAccess().getCURRENT_USEREnumLiteralDeclaration_0(), null); 
    }
)
    |(    KEYWORD_51
	{
        $current = grammarAccess.getInvokerRightAccess().getDEFINEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getInvokerRightAccess().getDEFINEREnumLiteralDeclaration_1(), null); 
    }
));



