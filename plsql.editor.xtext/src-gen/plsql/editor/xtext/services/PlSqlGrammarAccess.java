/*
* generated by Xtext
*/

package plsql.editor.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PlSqlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompilationUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcedureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPackageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CompilationUnit:
		//	Procedure | Function | Package;
		public ParserRule getRule() { return rule; }

		//Procedure | Function | Package
		public Alternatives getAlternatives() { return cAlternatives; }

		//Procedure
		public RuleCall getProcedureParserRuleCall_0() { return cProcedureParserRuleCall_0; }

		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }

		//Package
		public RuleCall getPackageParserRuleCall_2() { return cPackageParserRuleCall_2; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROCEDUREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSchemaNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSchemaNameIDTerminalRuleCall_1_0_0 = (RuleCall)cSchemaNameAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersParameterSequenceParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cInvokerRightsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInvokerRightsProcedureInvokerRightsClauseParserRuleCall_4_0 = (RuleCall)cInvokerRightsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cISKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cASKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Assignment cContentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cContentProcedureContentParserRuleCall_6_0 = (RuleCall)cContentAssignment_6.eContents().get(0);
		
		//Procedure:
		//	"PROCEDURE" (schemaName=ID ".")? name=ID ("(" parameters=ParameterSequence ")")?
		//	invokerRights=ProcedureInvokerRightsClause? ("IS" | "AS") content=ProcedureContent;
		public ParserRule getRule() { return rule; }

		//"PROCEDURE" (schemaName=ID ".")? name=ID ("(" parameters=ParameterSequence ")")?
		//invokerRights=ProcedureInvokerRightsClause? ("IS" | "AS") content=ProcedureContent
		public Group getGroup() { return cGroup; }

		//"PROCEDURE"
		public Keyword getPROCEDUREKeyword_0() { return cPROCEDUREKeyword_0; }

		//(schemaName=ID ".")?
		public Group getGroup_1() { return cGroup_1; }

		//schemaName=ID
		public Assignment getSchemaNameAssignment_1_0() { return cSchemaNameAssignment_1_0; }

		//ID
		public RuleCall getSchemaNameIDTerminalRuleCall_1_0_0() { return cSchemaNameIDTerminalRuleCall_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("(" parameters=ParameterSequence ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//parameters=ParameterSequence
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//ParameterSequence
		public RuleCall getParametersParameterSequenceParserRuleCall_3_1_0() { return cParametersParameterSequenceParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//invokerRights=ProcedureInvokerRightsClause?
		public Assignment getInvokerRightsAssignment_4() { return cInvokerRightsAssignment_4; }

		//ProcedureInvokerRightsClause
		public RuleCall getInvokerRightsProcedureInvokerRightsClauseParserRuleCall_4_0() { return cInvokerRightsProcedureInvokerRightsClauseParserRuleCall_4_0; }

		//"IS" | "AS"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"IS"
		public Keyword getISKeyword_5_0() { return cISKeyword_5_0; }

		//"AS"
		public Keyword getASKeyword_5_1() { return cASKeyword_5_1; }

		//content=ProcedureContent
		public Assignment getContentAssignment_6() { return cContentAssignment_6; }

		//ProcedureContent
		public RuleCall getContentProcedureContentParserRuleCall_6_0() { return cContentProcedureContentParserRuleCall_6_0; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPACKAGEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSchemaNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSchemaNameIDTerminalRuleCall_1_0_0 = (RuleCall)cSchemaNameAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cInvokerRightsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInvokerRightsProcedureInvokerRightsClauseParserRuleCall_3_0 = (RuleCall)cInvokerRightsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cISKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cASKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cItemsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cItemsItemParserRuleCall_5_0 = (RuleCall)cItemsAssignment_5.eContents().get(0);
		private final Keyword cENDKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEndNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEndNameIDTerminalRuleCall_7_0 = (RuleCall)cEndNameAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Package:
		//	"PACKAGE" (schemaName=ID ".")? name=ID invokerRights=ProcedureInvokerRightsClause? ("IS" | "AS") items+=Item* "END"
		//	endName=ID? ";";
		public ParserRule getRule() { return rule; }

		//"PACKAGE" (schemaName=ID ".")? name=ID invokerRights=ProcedureInvokerRightsClause? ("IS" | "AS") items+=Item* "END"
		//endName=ID? ";"
		public Group getGroup() { return cGroup; }

		//"PACKAGE"
		public Keyword getPACKAGEKeyword_0() { return cPACKAGEKeyword_0; }

		//(schemaName=ID ".")?
		public Group getGroup_1() { return cGroup_1; }

		//schemaName=ID
		public Assignment getSchemaNameAssignment_1_0() { return cSchemaNameAssignment_1_0; }

		//ID
		public RuleCall getSchemaNameIDTerminalRuleCall_1_0_0() { return cSchemaNameIDTerminalRuleCall_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//invokerRights=ProcedureInvokerRightsClause?
		public Assignment getInvokerRightsAssignment_3() { return cInvokerRightsAssignment_3; }

		//ProcedureInvokerRightsClause
		public RuleCall getInvokerRightsProcedureInvokerRightsClauseParserRuleCall_3_0() { return cInvokerRightsProcedureInvokerRightsClauseParserRuleCall_3_0; }

		//"IS" | "AS"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"IS"
		public Keyword getISKeyword_4_0() { return cISKeyword_4_0; }

		//"AS"
		public Keyword getASKeyword_4_1() { return cASKeyword_4_1; }

		//items+=Item*
		public Assignment getItemsAssignment_5() { return cItemsAssignment_5; }

		//Item
		public RuleCall getItemsItemParserRuleCall_5_0() { return cItemsItemParserRuleCall_5_0; }

		//"END"
		public Keyword getENDKeyword_6() { return cENDKeyword_6; }

		//endName=ID?
		public Assignment getEndNameAssignment_7() { return cEndNameAssignment_7; }

		//ID
		public RuleCall getEndNameIDTerminalRuleCall_7_0() { return cEndNameIDTerminalRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class ProcedureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcedureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROCEDUREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterSequenceParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProcedureDeclaration:
		//	"PROCEDURE" name=ID ("(" parameters=ParameterSequence ")")? ";";
		public ParserRule getRule() { return rule; }

		//"PROCEDURE" name=ID ("(" parameters=ParameterSequence ")")? ";"
		public Group getGroup() { return cGroup; }

		//"PROCEDURE"
		public Keyword getPROCEDUREKeyword_0() { return cPROCEDUREKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" parameters=ParameterSequence ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameters=ParameterSequence
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//ParameterSequence
		public RuleCall getParametersParameterSequenceParserRuleCall_2_1_0() { return cParametersParameterSequenceParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ProcedureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcedureDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROCEDUREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterSequenceParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cISKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cASKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cImplementationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImplementationProcedureImplementationParserRuleCall_4_0 = (RuleCall)cImplementationAssignment_4.eContents().get(0);
		
		//ProcedureDefinition:
		//	"PROCEDURE" name=ID ("(" parameters=ParameterSequence ")")? ("IS" // TODO: USING branch
		//	| "AS") implementation=ProcedureImplementation;
		public ParserRule getRule() { return rule; }

		//"PROCEDURE" name=ID ("(" parameters=ParameterSequence ")")? ("IS" // TODO: USING branch
		//| "AS") implementation=ProcedureImplementation
		public Group getGroup() { return cGroup; }

		//"PROCEDURE"
		public Keyword getPROCEDUREKeyword_0() { return cPROCEDUREKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" parameters=ParameterSequence ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameters=ParameterSequence
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//ParameterSequence
		public RuleCall getParametersParameterSequenceParserRuleCall_2_1_0() { return cParametersParameterSequenceParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//"IS" // TODO: USING branch
		//| "AS"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"IS"
		public Keyword getISKeyword_3_0() { return cISKeyword_3_0; }

		//"AS"
		public Keyword getASKeyword_3_1() { return cASKeyword_3_1; }

		//implementation=ProcedureImplementation
		public Assignment getImplementationAssignment_4() { return cImplementationAssignment_4; }

		//ProcedureImplementation
		public RuleCall getImplementationProcedureImplementationParserRuleCall_4_0() { return cImplementationProcedureImplementationParserRuleCall_4_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFUNCTIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSchemaNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSchemaNameIDTerminalRuleCall_1_0_0 = (RuleCall)cSchemaNameAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersParameterSequenceParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRETURNKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeDataTypeParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		private final Assignment cFunctionClausesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFunctionClausesFunctionClauseParserRuleCall_6_0 = (RuleCall)cFunctionClausesAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Keyword cISKeyword_7_0 = (Keyword)cAlternatives_7.eContents().get(0);
		private final Keyword cASKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		private final Assignment cContentAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cContentFunctionContentParserRuleCall_8_0 = (RuleCall)cContentAssignment_8.eContents().get(0);
		
		//Function:
		//	"FUNCTION" (schemaName=ID ".")? name=ID ("(" parameters=ParameterSequence ")")? "RETURN" returnType=DataType
		//	functionClauses+=FunctionClause ("IS" | "AS") content=FunctionContent;
		public ParserRule getRule() { return rule; }

		//"FUNCTION" (schemaName=ID ".")? name=ID ("(" parameters=ParameterSequence ")")? "RETURN" returnType=DataType
		//functionClauses+=FunctionClause ("IS" | "AS") content=FunctionContent
		public Group getGroup() { return cGroup; }

		//"FUNCTION"
		public Keyword getFUNCTIONKeyword_0() { return cFUNCTIONKeyword_0; }

		//(schemaName=ID ".")?
		public Group getGroup_1() { return cGroup_1; }

		//schemaName=ID
		public Assignment getSchemaNameAssignment_1_0() { return cSchemaNameAssignment_1_0; }

		//ID
		public RuleCall getSchemaNameIDTerminalRuleCall_1_0_0() { return cSchemaNameIDTerminalRuleCall_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("(" parameters=ParameterSequence ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//parameters=ParameterSequence
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//ParameterSequence
		public RuleCall getParametersParameterSequenceParserRuleCall_3_1_0() { return cParametersParameterSequenceParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//"RETURN"
		public Keyword getRETURNKeyword_4() { return cRETURNKeyword_4; }

		//returnType=DataType
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }

		//DataType
		public RuleCall getReturnTypeDataTypeParserRuleCall_5_0() { return cReturnTypeDataTypeParserRuleCall_5_0; }

		//functionClauses+=FunctionClause
		public Assignment getFunctionClausesAssignment_6() { return cFunctionClausesAssignment_6; }

		//FunctionClause
		public RuleCall getFunctionClausesFunctionClauseParserRuleCall_6_0() { return cFunctionClausesFunctionClauseParserRuleCall_6_0; }

		//"IS" | "AS"
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//"IS"
		public Keyword getISKeyword_7_0() { return cISKeyword_7_0; }

		//"AS"
		public Keyword getASKeyword_7_1() { return cASKeyword_7_1; }

		//content=FunctionContent
		public Assignment getContentAssignment_8() { return cContentAssignment_8; }

		//FunctionContent
		public RuleCall getContentFunctionContentParserRuleCall_8_0() { return cContentFunctionContentParserRuleCall_8_0; }
	}

	public class ParameterSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//ParameterSequence:
		//	parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*;
		public ParserRule getRule() { return rule; }

		//parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*
		public Group getGroup() { return cGroup; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_0_0() { return cParametersParameterDeclarationParserRuleCall_0_0; }

		//("," parameters+=ParameterDeclaration)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_1_1_0() { return cParametersParameterDeclarationParserRuleCall_1_1_0; }
	}

	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cBehaviorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBehaviorParameterBehaviorParserRuleCall_1_0 = (RuleCall)cBehaviorAssignment_1.eContents().get(0);
		private final Assignment cDataTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataTypeDataTypeParserRuleCall_2_0 = (RuleCall)cDataTypeAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueParameterValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ParameterDeclaration:
		//	name=ID behavior=ParameterBehavior? dataType=DataType value=ParameterValue?;
		public ParserRule getRule() { return rule; }

		//name=ID behavior=ParameterBehavior? dataType=DataType value=ParameterValue?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//behavior=ParameterBehavior?
		public Assignment getBehaviorAssignment_1() { return cBehaviorAssignment_1; }

		//ParameterBehavior
		public RuleCall getBehaviorParameterBehaviorParserRuleCall_1_0() { return cBehaviorParameterBehaviorParserRuleCall_1_0; }

		//dataType=DataType
		public Assignment getDataTypeAssignment_2() { return cDataTypeAssignment_2; }

		//DataType
		public RuleCall getDataTypeDataTypeParserRuleCall_2_0() { return cDataTypeDataTypeParserRuleCall_2_0; }

		//value=ParameterValue?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//ParameterValue
		public RuleCall getValueParameterValueParserRuleCall_3_0() { return cValueParameterValueParserRuleCall_3_0; }
	}

	public class ParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDEFAULTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ParameterValue:
		//	(":=" | "DEFAULT") expression=Expression;
		public ParserRule getRule() { return rule; }

		//(":=" | "DEFAULT") expression=Expression
		public Group getGroup() { return cGroup; }

		//":=" | "DEFAULT"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_0_0() { return cColonEqualsSignKeyword_0_0; }

		//"DEFAULT"
		public Keyword getDEFAULTKeyword_0_1() { return cDEFAULTKeyword_0_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class ParameterBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterBehavior");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cINKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cOUTKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cNOCOPYKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cINKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cOUTKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cNOCOPYKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ParameterBehavior returns ecore::EString:
		//	"IN" | "OUT" "NOCOPY"? | "IN" "OUT" "NOCOPY"?;
		public ParserRule getRule() { return rule; }

		//"IN" | "OUT" "NOCOPY"? | "IN" "OUT" "NOCOPY"?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"IN"
		public Keyword getINKeyword_0() { return cINKeyword_0; }

		//"OUT" "NOCOPY"?
		public Group getGroup_1() { return cGroup_1; }

		//"OUT"
		public Keyword getOUTKeyword_1_0() { return cOUTKeyword_1_0; }

		//"NOCOPY"?
		public Keyword getNOCOPYKeyword_1_1() { return cNOCOPYKeyword_1_1; }

		//"IN" "OUT" "NOCOPY"?
		public Group getGroup_2() { return cGroup_2; }

		//"IN"
		public Keyword getINKeyword_2_0() { return cINKeyword_2_0; }

		//"OUT"
		public Keyword getOUTKeyword_2_1() { return cOUTKeyword_2_1; }

		//"NOCOPY"?
		public Keyword getNOCOPYKeyword_2_2() { return cNOCOPYKeyword_2_2; }
	}

	public class ProcedureInvokerRightsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcedureInvokerRightsClause");
		private final Assignment cRightAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRightInvokerRightEnumRuleCall_0 = (RuleCall)cRightAssignment.eContents().get(0);
		
		//ProcedureInvokerRightsClause:
		//	right=InvokerRight;
		public ParserRule getRule() { return rule; }

		//right=InvokerRight
		public Assignment getRightAssignment() { return cRightAssignment; }

		//InvokerRight
		public RuleCall getRightInvokerRightEnumRuleCall_0() { return cRightInvokerRightEnumRuleCall_0; }
	}

	public class FunctionInvokerRightsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionInvokerRightsClause");
		private final Assignment cRightAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRightInvokerRightEnumRuleCall_0 = (RuleCall)cRightAssignment.eContents().get(0);
		
		//FunctionInvokerRightsClause:
		//	right=InvokerRight;
		public ParserRule getRule() { return rule; }

		//right=InvokerRight
		public Assignment getRightAssignment() { return cRightAssignment; }

		//InvokerRight
		public RuleCall getRightInvokerRightEnumRuleCall_0() { return cRightInvokerRightEnumRuleCall_0; }
	}

	public class PragmaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pragma");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPragmaRestrictReferencesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPragmaTimestampParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Pragma:
		//	PragmaRestrictReferences | PragmaTimestamp;
		public ParserRule getRule() { return rule; }

		//PragmaRestrictReferences | PragmaTimestamp
		public Alternatives getAlternatives() { return cAlternatives; }

		//PragmaRestrictReferences
		public RuleCall getPragmaRestrictReferencesParserRuleCall_0() { return cPragmaRestrictReferencesParserRuleCall_0; }

		//PragmaTimestamp
		public RuleCall getPragmaTimestampParserRuleCall_1() { return cPragmaTimestampParserRuleCall_1; }
	}

	public class PragmaRestrictReferencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PragmaRestrictReferences");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRAGMAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRESTRICT_REFERENCESKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cSubprogramNameParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Keyword cDEFAULTKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRestrictionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_5_0 = (RuleCall)cRestrictionsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRestrictionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_6_1_0 = (RuleCall)cRestrictionsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//PragmaRestrictReferences:
		//	"PRAGMA" "RESTRICT_REFERENCES" "(" (SubprogramName | "DEFAULT") "," restrictions+=PragmaRestrictReferencesRestriction
		//	("," restrictions+=PragmaRestrictReferencesRestriction)* ")" ";";
		public ParserRule getRule() { return rule; }

		//"PRAGMA" "RESTRICT_REFERENCES" "(" (SubprogramName | "DEFAULT") "," restrictions+=PragmaRestrictReferencesRestriction
		//("," restrictions+=PragmaRestrictReferencesRestriction)* ")" ";"
		public Group getGroup() { return cGroup; }

		//"PRAGMA"
		public Keyword getPRAGMAKeyword_0() { return cPRAGMAKeyword_0; }

		//"RESTRICT_REFERENCES"
		public Keyword getRESTRICT_REFERENCESKeyword_1() { return cRESTRICT_REFERENCESKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//SubprogramName | "DEFAULT"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//SubprogramName
		public RuleCall getSubprogramNameParserRuleCall_3_0() { return cSubprogramNameParserRuleCall_3_0; }

		//"DEFAULT"
		public Keyword getDEFAULTKeyword_3_1() { return cDEFAULTKeyword_3_1; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//restrictions+=PragmaRestrictReferencesRestriction
		public Assignment getRestrictionsAssignment_5() { return cRestrictionsAssignment_5; }

		//PragmaRestrictReferencesRestriction
		public RuleCall getRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_5_0() { return cRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_5_0; }

		//("," restrictions+=PragmaRestrictReferencesRestriction)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//restrictions+=PragmaRestrictReferencesRestriction
		public Assignment getRestrictionsAssignment_6_1() { return cRestrictionsAssignment_6_1; }

		//PragmaRestrictReferencesRestriction
		public RuleCall getRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_6_1_0() { return cRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_6_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class PragmaRestrictReferencesRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PragmaRestrictReferencesRestriction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRNDSKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWNDSKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRNPSKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cWNPSKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTRUSTKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//PragmaRestrictReferencesRestriction returns ecore::EString:
		//	"RNDS" | "WNDS" | "RNPS" | "WNPS" | "TRUST";
		public ParserRule getRule() { return rule; }

		//"RNDS" | "WNDS" | "RNPS" | "WNPS" | "TRUST"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"RNDS"
		public Keyword getRNDSKeyword_0() { return cRNDSKeyword_0; }

		//"WNDS"
		public Keyword getWNDSKeyword_1() { return cWNDSKeyword_1; }

		//"RNPS"
		public Keyword getRNPSKeyword_2() { return cRNPSKeyword_2; }

		//"WNPS"
		public Keyword getWNPSKeyword_3() { return cWNPSKeyword_3; }

		//"TRUST"
		public Keyword getTRUSTKeyword_4() { return cTRUSTKeyword_4; }
	}

	public class SubprogramNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubprogramName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SubprogramName returns ecore::EString:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class PragmaTimestampElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PragmaTimestamp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRAGMAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTIMESTAMPKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTimestampAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimestampSTRINGTerminalRuleCall_3_0 = (RuleCall)cTimestampAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PragmaTimestamp:
		//	"PRAGMA" "TIMESTAMP" "(" timestamp=STRING ")" ";";
		public ParserRule getRule() { return rule; }

		//"PRAGMA" "TIMESTAMP" "(" timestamp=STRING ")" ";"
		public Group getGroup() { return cGroup; }

		//"PRAGMA"
		public Keyword getPRAGMAKeyword_0() { return cPRAGMAKeyword_0; }

		//"TIMESTAMP"
		public Keyword getTIMESTAMPKeyword_1() { return cTIMESTAMPKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//timestamp=STRING
		public Assignment getTimestampAssignment_3() { return cTimestampAssignment_3; }

		//STRING
		public RuleCall getTimestampSTRINGTerminalRuleCall_3_0() { return cTimestampSTRINGTerminalRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNUMBERKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1_2_1 = (RuleCall)cGroup_0_1_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVARCHAR2Keyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cBOOLEANKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DataType returns ecore::EString:
		//	"NUMBER" ("(" INT ("," INT)? ")")? | "VARCHAR2" ("(" INT ")")? | "BOOLEAN" | ID;
		public ParserRule getRule() { return rule; }

		//"NUMBER" ("(" INT ("," INT)? ")")? | "VARCHAR2" ("(" INT ")")? | "BOOLEAN" | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"NUMBER" ("(" INT ("," INT)? ")")?
		public Group getGroup_0() { return cGroup_0; }

		//"NUMBER"
		public Keyword getNUMBERKeyword_0_0() { return cNUMBERKeyword_0_0; }

		//("(" INT ("," INT)? ")")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_1_1() { return cINTTerminalRuleCall_0_1_1; }

		//("," INT)?
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }

		//","
		public Keyword getCommaKeyword_0_1_2_0() { return cCommaKeyword_0_1_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_1_2_1() { return cINTTerminalRuleCall_0_1_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_3() { return cRightParenthesisKeyword_0_1_3; }

		//"VARCHAR2" ("(" INT ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"VARCHAR2"
		public Keyword getVARCHAR2Keyword_1_0() { return cVARCHAR2Keyword_1_0; }

		//("(" INT ")")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1() { return cINTTerminalRuleCall_1_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }

		//"BOOLEAN"
		public Keyword getBOOLEANKeyword_2() { return cBOOLEANKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
	}

	public class ProcedureContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcedureContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcedureImplementationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExternalProcedureDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ProcedureContent:
		//	ProcedureImplementation // TODO | CallSpecification
		//	| ExternalProcedureDeclaration;
		public ParserRule getRule() { return rule; }

		//ProcedureImplementation // TODO | CallSpecification
		//| ExternalProcedureDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProcedureImplementation
		public RuleCall getProcedureImplementationParserRuleCall_0() { return cProcedureImplementationParserRuleCall_0; }

		//ExternalProcedureDeclaration
		public RuleCall getExternalProcedureDeclarationParserRuleCall_1() { return cExternalProcedureDeclarationParserRuleCall_1; }
	}

	public class ProcedureImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcedureImplementation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclareSectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclareSectionDeclareSectionParserRuleCall_0_0 = (RuleCall)cDeclareSectionAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyStatementBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//ProcedureImplementation:
		//	declareSection=DeclareSection? body=StatementBody;
		public ParserRule getRule() { return rule; }

		//declareSection=DeclareSection? body=StatementBody
		public Group getGroup() { return cGroup; }

		//declareSection=DeclareSection?
		public Assignment getDeclareSectionAssignment_0() { return cDeclareSectionAssignment_0; }

		//DeclareSection
		public RuleCall getDeclareSectionDeclareSectionParserRuleCall_0_0() { return cDeclareSectionDeclareSectionParserRuleCall_0_0; }

		//body=StatementBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_1_0() { return cBodyStatementBodyParserRuleCall_1_0; }
	}

	public class FunctionContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionContent");
		private final RuleCall cFunctionImplementationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// TODO | CallSpecification
		//FunctionContent:
		//	FunctionImplementation;
		public ParserRule getRule() { return rule; }

		//FunctionImplementation
		public RuleCall getFunctionImplementationParserRuleCall() { return cFunctionImplementationParserRuleCall; }
	}

	public class FunctionImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionImplementation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclareSectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclareSectionDeclareSectionParserRuleCall_0_0 = (RuleCall)cDeclareSectionAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyStatementBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//FunctionImplementation:
		//	declareSection=DeclareSection? body=StatementBody;
		public ParserRule getRule() { return rule; }

		//declareSection=DeclareSection? body=StatementBody
		public Group getGroup() { return cGroup; }

		//declareSection=DeclareSection?
		public Assignment getDeclareSectionAssignment_0() { return cDeclareSectionAssignment_0; }

		//DeclareSection
		public RuleCall getDeclareSectionDeclareSectionParserRuleCall_0_0() { return cDeclareSectionDeclareSectionParserRuleCall_0_0; }

		//body=StatementBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_1_0() { return cBodyStatementBodyParserRuleCall_1_0; }
	}

	public class FunctionClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionInvokerRightsClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeterministicClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cResultCacheClauseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPipelinedClauseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FunctionClause:
		//	FunctionInvokerRightsClause // TODO | ParallelEnableClause
		//	| DeterministicClause | ResultCacheClause | PipelinedClause;
		public ParserRule getRule() { return rule; }

		//FunctionInvokerRightsClause // TODO | ParallelEnableClause
		//| DeterministicClause | ResultCacheClause | PipelinedClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionInvokerRightsClause
		public RuleCall getFunctionInvokerRightsClauseParserRuleCall_0() { return cFunctionInvokerRightsClauseParserRuleCall_0; }

		//DeterministicClause
		public RuleCall getDeterministicClauseParserRuleCall_1() { return cDeterministicClauseParserRuleCall_1; }

		//ResultCacheClause
		public RuleCall getResultCacheClauseParserRuleCall_2() { return cResultCacheClauseParserRuleCall_2; }

		//PipelinedClause
		public RuleCall getPipelinedClauseParserRuleCall_3() { return cPipelinedClauseParserRuleCall_3; }
	}

	public class DeterministicClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeterministicClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeterministicClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDETERMINISTICKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DeterministicClause:
		//	{DeterministicClause} "DETERMINISTIC";
		public ParserRule getRule() { return rule; }

		//{DeterministicClause} "DETERMINISTIC"
		public Group getGroup() { return cGroup; }

		//{DeterministicClause}
		public Action getDeterministicClauseAction_0() { return cDeterministicClauseAction_0; }

		//"DETERMINISTIC"
		public Keyword getDETERMINISTICKeyword_1() { return cDETERMINISTICKeyword_1; }
	}

	public class ResultCacheClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultCacheClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResultCacheClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRESULT_CACHEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRELIES_ONKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cDataSourcesAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cDataSourcesIDTerminalRuleCall_2_2_0_0 = (RuleCall)cDataSourcesAssignment_2_2_0.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1_0 = (Keyword)cGroup_2_2_1.eContents().get(0);
		private final Assignment cDataSourcesAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final RuleCall cDataSourcesIDTerminalRuleCall_2_2_1_1_0 = (RuleCall)cDataSourcesAssignment_2_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//ResultCacheClause:
		//	{ResultCacheClause} "RESULT_CACHE" ("RELIES_ON" "(" (dataSources+=ID ("," dataSources+=ID))? ")")?;
		public ParserRule getRule() { return rule; }

		//{ResultCacheClause} "RESULT_CACHE" ("RELIES_ON" "(" (dataSources+=ID ("," dataSources+=ID))? ")")?
		public Group getGroup() { return cGroup; }

		//{ResultCacheClause}
		public Action getResultCacheClauseAction_0() { return cResultCacheClauseAction_0; }

		//"RESULT_CACHE"
		public Keyword getRESULT_CACHEKeyword_1() { return cRESULT_CACHEKeyword_1; }

		//("RELIES_ON" "(" (dataSources+=ID ("," dataSources+=ID))? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"RELIES_ON"
		public Keyword getRELIES_ONKeyword_2_0() { return cRELIES_ONKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//(dataSources+=ID ("," dataSources+=ID))?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//dataSources+=ID
		public Assignment getDataSourcesAssignment_2_2_0() { return cDataSourcesAssignment_2_2_0; }

		//ID
		public RuleCall getDataSourcesIDTerminalRuleCall_2_2_0_0() { return cDataSourcesIDTerminalRuleCall_2_2_0_0; }

		//"," dataSources+=ID
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//","
		public Keyword getCommaKeyword_2_2_1_0() { return cCommaKeyword_2_2_1_0; }

		//dataSources+=ID
		public Assignment getDataSourcesAssignment_2_2_1_1() { return cDataSourcesAssignment_2_2_1_1; }

		//ID
		public RuleCall getDataSourcesIDTerminalRuleCall_2_2_1_1_0() { return cDataSourcesIDTerminalRuleCall_2_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class PipelinedClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PipelinedClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPipelinedClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPIPELINEDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PipelinedClause:
		//	{PipelinedClause} "PIPELINED";
		public ParserRule getRule() { return rule; }

		//{PipelinedClause} "PIPELINED"
		public Group getGroup() { return cGroup; }

		//{PipelinedClause}
		public Action getPipelinedClauseAction_0() { return cPipelinedClauseAction_0; }

		//"PIPELINED"
		public Keyword getPIPELINEDKeyword_1() { return cPIPELINEDKeyword_1; }
	}

	public class StatementBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBEGINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEndNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndNameIDTerminalRuleCall_3_0 = (RuleCall)cEndNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StatementBody:
		//	"BEGIN" statements+=Statement+ "END" endName=ID? ";";
		public ParserRule getRule() { return rule; }

		//"BEGIN" statements+=Statement+ "END" endName=ID? ";"
		public Group getGroup() { return cGroup; }

		//"BEGIN"
		public Keyword getBEGINKeyword_0() { return cBEGINKeyword_0; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }

		//"END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }

		//endName=ID?
		public Assignment getEndNameAssignment_3() { return cEndNameAssignment_3; }

		//ID
		public RuleCall getEndNameIDTerminalRuleCall_3_0() { return cEndNameIDTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class DeclareSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclareSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDECLAREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsItemParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		
		//// NOTE: DECLARE should not be allowed for non-anonymous blocks!
		//DeclareSection:
		//	"DECLARE"? items+=Item+;
		public ParserRule getRule() { return rule; }

		//"DECLARE"? items+=Item+
		public Group getGroup() { return cGroup; }

		//"DECLARE"?
		public Keyword getDECLAREKeyword_0() { return cDECLAREKeyword_0; }

		//items+=Item+
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }

		//Item
		public RuleCall getItemsItemParserRuleCall_1_0() { return cItemsItemParserRuleCall_1_0; }
	}

	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cItemDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcedureDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProcedureDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPragmaParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Item:
		//	ItemDeclaration // TODO | TypeDefinition
		//	// TODO | FunctionDeclaration
		//	// TODO | FunctionDefinition
		//	| ProcedureDeclaration | ProcedureDefinition | Pragma;
		public ParserRule getRule() { return rule; }

		//ItemDeclaration // TODO | TypeDefinition
		//// TODO | FunctionDeclaration
		//// TODO | FunctionDefinition
		//| ProcedureDeclaration | ProcedureDefinition | Pragma
		public Alternatives getAlternatives() { return cAlternatives; }

		//ItemDeclaration
		public RuleCall getItemDeclarationParserRuleCall_0() { return cItemDeclarationParserRuleCall_0; }

		//ProcedureDeclaration
		public RuleCall getProcedureDeclarationParserRuleCall_1() { return cProcedureDeclarationParserRuleCall_1; }

		//ProcedureDefinition
		public RuleCall getProcedureDefinitionParserRuleCall_2() { return cProcedureDefinitionParserRuleCall_2; }

		//Pragma
		public RuleCall getPragmaParserRuleCall_3() { return cPragmaParserRuleCall_3; }
	}

	public class ItemDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItemDeclaration");
		private final RuleCall cVariableDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ItemDeclaration:
		//	VariableDeclaration;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall() { return cVariableDeclarationParserRuleCall; }
	}

	public class ExternalProcedureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalProcedureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExternalProcedureDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEXTERNALKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExternalProcedureDeclaration:
		//	{ExternalProcedureDeclaration} "EXTERNAL";
		public ParserRule getRule() { return rule; }

		//{ExternalProcedureDeclaration} "EXTERNAL"
		public Group getGroup() { return cGroup; }

		//{ExternalProcedureDeclaration}
		public Action getExternalProcedureDeclarationAction_0() { return cExternalProcedureDeclarationAction_0; }

		//"EXTERNAL"
		public Keyword getEXTERNALKeyword_1() { return cEXTERNALKeyword_1; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cIsConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsConstantCONSTANTKeyword_1_0 = (Keyword)cIsConstantAssignment_1.eContents().get(0);
		private final Assignment cDataTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataTypeDataTypeParserRuleCall_2_0 = (RuleCall)cDataTypeAssignment_2.eContents().get(0);
		private final Assignment cIsNotNullAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIsNotNullNOT_NULLParserRuleCall_3_0 = (RuleCall)cIsNotNullAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueVariableValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// FIXME: NOT_NULL is not inline since, otherwise, there would be an error in the grammar. it's not clear why...
		//VariableDeclaration:
		//	name=ID isConstant?="CONSTANT"? dataType=DataType isNotNull?=NOT_NULL? value=VariableValue? ";";
		public ParserRule getRule() { return rule; }

		//name=ID isConstant?="CONSTANT"? dataType=DataType isNotNull?=NOT_NULL? value=VariableValue? ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//isConstant?="CONSTANT"?
		public Assignment getIsConstantAssignment_1() { return cIsConstantAssignment_1; }

		//"CONSTANT"
		public Keyword getIsConstantCONSTANTKeyword_1_0() { return cIsConstantCONSTANTKeyword_1_0; }

		//dataType=DataType
		public Assignment getDataTypeAssignment_2() { return cDataTypeAssignment_2; }

		//DataType
		public RuleCall getDataTypeDataTypeParserRuleCall_2_0() { return cDataTypeDataTypeParserRuleCall_2_0; }

		//isNotNull?=NOT_NULL?
		public Assignment getIsNotNullAssignment_3() { return cIsNotNullAssignment_3; }

		//NOT_NULL
		public RuleCall getIsNotNullNOT_NULLParserRuleCall_3_0() { return cIsNotNullNOT_NULLParserRuleCall_3_0; }

		//value=VariableValue?
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//VariableValue
		public RuleCall getValueVariableValueParserRuleCall_4_0() { return cValueVariableValueParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class NOT_NULLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NOT_NULL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNULLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NOT_NULL returns ecore::EString:
		//	"NOT" "NULL";
		public ParserRule getRule() { return rule; }

		//"NOT" "NULL"
		public Group getGroup() { return cGroup; }

		//"NOT"
		public Keyword getNOTKeyword_0() { return cNOTKeyword_0; }

		//"NULL"
		public Keyword getNULLKeyword_1() { return cNULLKeyword_1; }
	}

	public class VariableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDEFAULTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//VariableValue:
		//	(":=" | "DEFAULT") expression=Expression;
		public ParserRule getRule() { return rule; }

		//(":=" | "DEFAULT") expression=Expression
		public Group getGroup() { return cGroup; }

		//":=" | "DEFAULT"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_0_0() { return cColonEqualsSignKeyword_0_0; }

		//"DEFAULT"
		public Keyword getDEFAULTKeyword_0_1() { return cDEFAULTKeyword_0_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullLiteralExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableRefExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Expression:
		//	IntLiteralExpression | StringLiteralExpression | BooleanLiteralExpression | NullLiteralExpression |
		//	VariableRefExpression;
		public ParserRule getRule() { return rule; }

		//IntLiteralExpression | StringLiteralExpression | BooleanLiteralExpression | NullLiteralExpression |
		//VariableRefExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntLiteralExpression
		public RuleCall getIntLiteralExpressionParserRuleCall_0() { return cIntLiteralExpressionParserRuleCall_0; }

		//StringLiteralExpression
		public RuleCall getStringLiteralExpressionParserRuleCall_1() { return cStringLiteralExpressionParserRuleCall_1; }

		//BooleanLiteralExpression
		public RuleCall getBooleanLiteralExpressionParserRuleCall_2() { return cBooleanLiteralExpressionParserRuleCall_2; }

		//NullLiteralExpression
		public RuleCall getNullLiteralExpressionParserRuleCall_3() { return cNullLiteralExpressionParserRuleCall_3; }

		//VariableRefExpression
		public RuleCall getVariableRefExpressionParserRuleCall_4() { return cVariableRefExpressionParserRuleCall_4; }
	}

	public class IntLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteralExpression:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class StringLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteralExpression:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class BooleanLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTRUEKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFALSEKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//// TODO: Make a boolean out of this.
		//BooleanLiteralExpression:
		//	value=("TRUE" | "FALSE");
		public ParserRule getRule() { return rule; }

		//value=("TRUE" | "FALSE")
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"TRUE" | "FALSE"
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//"TRUE"
		public Keyword getValueTRUEKeyword_0_0() { return cValueTRUEKeyword_0_0; }

		//"FALSE"
		public Keyword getValueFALSEKeyword_0_1() { return cValueFALSEKeyword_0_1; }
	}

	public class NullLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteralExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNULLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteralExpression:
		//	{NullLiteralExpression} "NULL";
		public ParserRule getRule() { return rule; }

		//{NullLiteralExpression} "NULL"
		public Group getGroup() { return cGroup; }

		//{NullLiteralExpression}
		public Action getNullLiteralExpressionAction_0() { return cNullLiteralExpressionAction_0; }

		//"NULL"
		public Keyword getNULLKeyword_1() { return cNULLKeyword_1; }
	}

	public class VariableRefExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableRefExpression");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVariableVariableRefParserRuleCall_0 = (RuleCall)cVariableAssignment.eContents().get(0);
		
		//VariableRefExpression:
		//	variable=VariableRef;
		public ParserRule getRule() { return rule; }

		//variable=VariableRef
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//VariableRef
		public RuleCall getVariableVariableRefParserRuleCall_0() { return cVariableVariableRefParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCaseStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCloseStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cContinueStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExitStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFetchStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cGotoStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIfStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLoopStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cNullStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cRaiseStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cReturnStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//// TODO | SqlStatement
		//Statement:
		//	AssignmentStatement // TODO | ExecuteImmediateStatement
		//	// TODO | ForallStatement
		//	// TODO | OpenStatement
		//	// TODO | OpenForStatement
		//	| BlockStatement | CaseStatement | CloseStatement | ContinueStatement | ExitStatement | FetchStatement | GotoStatement
		//	| IfStatement | LoopStatement | NullStatement | RaiseStatement | ReturnStatement;
		public ParserRule getRule() { return rule; }

		//AssignmentStatement // TODO | ExecuteImmediateStatement
		//// TODO | ForallStatement
		//// TODO | OpenStatement
		//// TODO | OpenForStatement
		//| BlockStatement | CaseStatement | CloseStatement | ContinueStatement | ExitStatement | FetchStatement | GotoStatement |
		//IfStatement | LoopStatement | NullStatement | RaiseStatement | ReturnStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//AssignmentStatement
		public RuleCall getAssignmentStatementParserRuleCall_0() { return cAssignmentStatementParserRuleCall_0; }

		//BlockStatement
		public RuleCall getBlockStatementParserRuleCall_1() { return cBlockStatementParserRuleCall_1; }

		//CaseStatement
		public RuleCall getCaseStatementParserRuleCall_2() { return cCaseStatementParserRuleCall_2; }

		//CloseStatement
		public RuleCall getCloseStatementParserRuleCall_3() { return cCloseStatementParserRuleCall_3; }

		//ContinueStatement
		public RuleCall getContinueStatementParserRuleCall_4() { return cContinueStatementParserRuleCall_4; }

		//ExitStatement
		public RuleCall getExitStatementParserRuleCall_5() { return cExitStatementParserRuleCall_5; }

		//FetchStatement
		public RuleCall getFetchStatementParserRuleCall_6() { return cFetchStatementParserRuleCall_6; }

		//GotoStatement
		public RuleCall getGotoStatementParserRuleCall_7() { return cGotoStatementParserRuleCall_7; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_8() { return cIfStatementParserRuleCall_8; }

		//LoopStatement
		public RuleCall getLoopStatementParserRuleCall_9() { return cLoopStatementParserRuleCall_9; }

		//NullStatement
		public RuleCall getNullStatementParserRuleCall_10() { return cNullStatementParserRuleCall_10; }

		//RaiseStatement
		public RuleCall getRaiseStatementParserRuleCall_11() { return cRaiseStatementParserRuleCall_11; }

		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_12() { return cReturnStatementParserRuleCall_12; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Label:
		//	"<<" name=ID ">>";
		public ParserRule getRule() { return rule; }

		//"<<" name=ID ">>"
		public Group getGroup() { return cGroup; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_2() { return cGreaterThanSignGreaterThanSignKeyword_2; }
	}

	public class AssignmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelsLabelParserRuleCall_0_0 = (RuleCall)cLabelsAssignment_0.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetAssignmentTargetParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AssignmentStatement:
		//	labels+=Label* target=AssignmentTarget ":=" expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//labels+=Label* target=AssignmentTarget ":=" expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//labels+=Label*
		public Assignment getLabelsAssignment_0() { return cLabelsAssignment_0; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_0_0() { return cLabelsLabelParserRuleCall_0_0; }

		//target=AssignmentTarget
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//AssignmentTarget
		public RuleCall getTargetAssignmentTargetParserRuleCall_1_0() { return cTargetAssignmentTargetParserRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class AssignmentTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentTarget");
		private final RuleCall cVariableAssignmentTargetParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AssignmentTarget:
		//	VariableAssignmentTarget;
		public ParserRule getRule() { return rule; }

		//VariableAssignmentTarget
		public RuleCall getVariableAssignmentTargetParserRuleCall() { return cVariableAssignmentTargetParserRuleCall; }
	}

	public class VariableAssignmentTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAssignmentTarget");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVariableVariableRefParserRuleCall_0 = (RuleCall)cVariableAssignment.eContents().get(0);
		
		//VariableAssignmentTarget:
		//	variable=VariableRef;
		public ParserRule getRule() { return rule; }

		//variable=VariableRef
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//VariableRef
		public RuleCall getVariableVariableRefParserRuleCall_0() { return cVariableVariableRefParserRuleCall_0; }
	}

	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelsLabelParserRuleCall_0_0 = (RuleCall)cLabelsAssignment_0.eContents().get(0);
		private final Assignment cDeclareSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclareSectionDeclareSectionParserRuleCall_1_0 = (RuleCall)cDeclareSectionAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyStatementBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//BlockStatement:
		//	labels+=Label* declareSection=DeclareSection? body=StatementBody;
		public ParserRule getRule() { return rule; }

		//labels+=Label* declareSection=DeclareSection? body=StatementBody
		public Group getGroup() { return cGroup; }

		//labels+=Label*
		public Assignment getLabelsAssignment_0() { return cLabelsAssignment_0; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_0_0() { return cLabelsLabelParserRuleCall_0_0; }

		//declareSection=DeclareSection?
		public Assignment getDeclareSectionAssignment_1() { return cDeclareSectionAssignment_1; }

		//DeclareSection
		public RuleCall getDeclareSectionDeclareSectionParserRuleCall_1_0() { return cDeclareSectionDeclareSectionParserRuleCall_1_0; }

		//body=StatementBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_2_0() { return cBodyStatementBodyParserRuleCall_2_0; }
	}

	public class CaseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CaseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelsLabelParserRuleCall_0_0 = (RuleCall)cLabelsAssignment_0.eContents().get(0);
		private final Keyword cCASEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cWhenBranchesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhenBranchesCaseStatementWhenBranchParserRuleCall_3_0 = (RuleCall)cWhenBranchesAssignment_3.eContents().get(0);
		private final Assignment cElseBranchAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseBranchCaseStatementElseBranchParserRuleCall_4_0 = (RuleCall)cElseBranchAssignment_4.eContents().get(0);
		private final Keyword cENDKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cCASEKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEndLabelAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEndLabelIDTerminalRuleCall_7_0 = (RuleCall)cEndLabelAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CaseStatement:
		//	labels+=Label* "CASE" expression=Expression? whenBranches+=CaseStatementWhenBranch+
		//	elseBranch=CaseStatementElseBranch? "END" "CASE" endLabel=ID? ";";
		public ParserRule getRule() { return rule; }

		//labels+=Label* "CASE" expression=Expression? whenBranches+=CaseStatementWhenBranch+ elseBranch=CaseStatementElseBranch?
		//"END" "CASE" endLabel=ID? ";"
		public Group getGroup() { return cGroup; }

		//labels+=Label*
		public Assignment getLabelsAssignment_0() { return cLabelsAssignment_0; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_0_0() { return cLabelsLabelParserRuleCall_0_0; }

		//"CASE"
		public Keyword getCASEKeyword_1() { return cCASEKeyword_1; }

		//expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//whenBranches+=CaseStatementWhenBranch+
		public Assignment getWhenBranchesAssignment_3() { return cWhenBranchesAssignment_3; }

		//CaseStatementWhenBranch
		public RuleCall getWhenBranchesCaseStatementWhenBranchParserRuleCall_3_0() { return cWhenBranchesCaseStatementWhenBranchParserRuleCall_3_0; }

		//elseBranch=CaseStatementElseBranch?
		public Assignment getElseBranchAssignment_4() { return cElseBranchAssignment_4; }

		//CaseStatementElseBranch
		public RuleCall getElseBranchCaseStatementElseBranchParserRuleCall_4_0() { return cElseBranchCaseStatementElseBranchParserRuleCall_4_0; }

		//"END"
		public Keyword getENDKeyword_5() { return cENDKeyword_5; }

		//"CASE"
		public Keyword getCASEKeyword_6() { return cCASEKeyword_6; }

		//endLabel=ID?
		public Assignment getEndLabelAssignment_7() { return cEndLabelAssignment_7; }

		//ID
		public RuleCall getEndLabelIDTerminalRuleCall_7_0() { return cEndLabelIDTerminalRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class CaseStatementWhenBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CaseStatementWhenBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHENKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//CaseStatementWhenBranch:
		//	"WHEN" expression=Expression "THEN" statements+=Statement+;
		public ParserRule getRule() { return rule; }

		//"WHEN" expression=Expression "THEN" statements+=Statement+
		public Group getGroup() { return cGroup; }

		//"WHEN"
		public Keyword getWHENKeyword_0() { return cWHENKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//"THEN"
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
	}

	public class CaseStatementElseBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CaseStatementElseBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cELSEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//CaseStatementElseBranch:
		//	"ELSE" statements+=Statement+;
		public ParserRule getRule() { return rule; }

		//"ELSE" statements+=Statement+
		public Group getGroup() { return cGroup; }

		//"ELSE"
		public Keyword getELSEKeyword_0() { return cELSEKeyword_0; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}

	public class CloseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CloseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelsLabelParserRuleCall_0_0 = (RuleCall)cLabelsAssignment_0.eContents().get(0);
		private final Keyword cCLOSEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCursorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCursorVariableRefParserRuleCall_2_0 = (RuleCall)cCursorAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CloseStatement:
		//	labels+=Label* "CLOSE" cursor=VariableRef ";";
		public ParserRule getRule() { return rule; }

		//labels+=Label* "CLOSE" cursor=VariableRef ";"
		public Group getGroup() { return cGroup; }

		//labels+=Label*
		public Assignment getLabelsAssignment_0() { return cLabelsAssignment_0; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_0_0() { return cLabelsLabelParserRuleCall_0_0; }

		//"CLOSE"
		public Keyword getCLOSEKeyword_1() { return cCLOSEKeyword_1; }

		//cursor=VariableRef
		public Assignment getCursorAssignment_2() { return cCursorAssignment_2; }

		//VariableRef
		public RuleCall getCursorVariableRefParserRuleCall_2_0() { return cCursorVariableRefParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ContinueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContinueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContinueStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLabelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelsLabelParserRuleCall_1_0 = (RuleCall)cLabelsAssignment_1.eContents().get(0);
		private final Keyword cCONTINUEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelNameIDTerminalRuleCall_3_0 = (RuleCall)cLabelNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWHENKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWhenExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWhenExpressionExpressionParserRuleCall_4_1_0 = (RuleCall)cWhenExpressionAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ContinueStatement:
		//	{ContinueStatement} labels+=Label* "CONTINUE" labelName=ID? ("WHEN" whenExpression=Expression)? ";";
		public ParserRule getRule() { return rule; }

		//{ContinueStatement} labels+=Label* "CONTINUE" labelName=ID? ("WHEN" whenExpression=Expression)? ";"
		public Group getGroup() { return cGroup; }

		//{ContinueStatement}
		public Action getContinueStatementAction_0() { return cContinueStatementAction_0; }

		//labels+=Label*
		public Assignment getLabelsAssignment_1() { return cLabelsAssignment_1; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_1_0() { return cLabelsLabelParserRuleCall_1_0; }

		//"CONTINUE"
		public Keyword getCONTINUEKeyword_2() { return cCONTINUEKeyword_2; }

		//labelName=ID?
		public Assignment getLabelNameAssignment_3() { return cLabelNameAssignment_3; }

		//ID
		public RuleCall getLabelNameIDTerminalRuleCall_3_0() { return cLabelNameIDTerminalRuleCall_3_0; }

		//("WHEN" whenExpression=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//"WHEN"
		public Keyword getWHENKeyword_4_0() { return cWHENKeyword_4_0; }

		//whenExpression=Expression
		public Assignment getWhenExpressionAssignment_4_1() { return cWhenExpressionAssignment_4_1; }

		//Expression
		public RuleCall getWhenExpressionExpressionParserRuleCall_4_1_0() { return cWhenExpressionExpressionParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ExitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLabelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelsLabelParserRuleCall_1_0 = (RuleCall)cLabelsAssignment_1.eContents().get(0);
		private final Keyword cEXITKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelNameIDTerminalRuleCall_3_0 = (RuleCall)cLabelNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWHENKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWhenExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWhenExpressionExpressionParserRuleCall_4_1_0 = (RuleCall)cWhenExpressionAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExitStatement:
		//	{ExitStatement} labels+=Label* "EXIT" labelName=ID? ("WHEN" whenExpression=Expression)? ";";
		public ParserRule getRule() { return rule; }

		//{ExitStatement} labels+=Label* "EXIT" labelName=ID? ("WHEN" whenExpression=Expression)? ";"
		public Group getGroup() { return cGroup; }

		//{ExitStatement}
		public Action getExitStatementAction_0() { return cExitStatementAction_0; }

		//labels+=Label*
		public Assignment getLabelsAssignment_1() { return cLabelsAssignment_1; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_1_0() { return cLabelsLabelParserRuleCall_1_0; }

		//"EXIT"
		public Keyword getEXITKeyword_2() { return cEXITKeyword_2; }

		//labelName=ID?
		public Assignment getLabelNameAssignment_3() { return cLabelNameAssignment_3; }

		//ID
		public RuleCall getLabelNameIDTerminalRuleCall_3_0() { return cLabelNameIDTerminalRuleCall_3_0; }

		//("WHEN" whenExpression=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//"WHEN"
		public Keyword getWHENKeyword_4_0() { return cWHENKeyword_4_0; }

		//whenExpression=Expression
		public Assignment getWhenExpressionAssignment_4_1() { return cWhenExpressionAssignment_4_1; }

		//Expression
		public RuleCall getWhenExpressionExpressionParserRuleCall_4_1_0() { return cWhenExpressionExpressionParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class FetchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FetchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelsLabelParserRuleCall_0_0 = (RuleCall)cLabelsAssignment_0.eContents().get(0);
		private final Keyword cFETCHKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCursorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCursorVariableRefParserRuleCall_2_0 = (RuleCall)cCursorAssignment_2.eContents().get(0);
		private final Assignment cIntoClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIntoClauseFetchStatementIntoClauseParserRuleCall_3_0 = (RuleCall)cIntoClauseAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FetchStatement:
		//	labels+=Label* "FETCH" cursor=VariableRef? intoClause=FetchStatementIntoClause ";";
		public ParserRule getRule() { return rule; }

		//labels+=Label* "FETCH" cursor=VariableRef? intoClause=FetchStatementIntoClause ";"
		public Group getGroup() { return cGroup; }

		//labels+=Label*
		public Assignment getLabelsAssignment_0() { return cLabelsAssignment_0; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_0_0() { return cLabelsLabelParserRuleCall_0_0; }

		//"FETCH"
		public Keyword getFETCHKeyword_1() { return cFETCHKeyword_1; }

		//cursor=VariableRef?
		public Assignment getCursorAssignment_2() { return cCursorAssignment_2; }

		//VariableRef
		public RuleCall getCursorVariableRefParserRuleCall_2_0() { return cCursorVariableRefParserRuleCall_2_0; }

		//intoClause=FetchStatementIntoClause
		public Assignment getIntoClauseAssignment_3() { return cIntoClauseAssignment_3; }

		//FetchStatementIntoClause
		public RuleCall getIntoClauseFetchStatementIntoClauseParserRuleCall_3_0() { return cIntoClauseFetchStatementIntoClauseParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class FetchStatementIntoClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FetchStatementIntoClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFetchStatementSingleIntoClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFetchStatementBulkIntoClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FetchStatementIntoClause:
		//	FetchStatementSingleIntoClause | FetchStatementBulkIntoClause;
		public ParserRule getRule() { return rule; }

		//FetchStatementSingleIntoClause | FetchStatementBulkIntoClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//FetchStatementSingleIntoClause
		public RuleCall getFetchStatementSingleIntoClauseParserRuleCall_0() { return cFetchStatementSingleIntoClauseParserRuleCall_0; }

		//FetchStatementBulkIntoClause
		public RuleCall getFetchStatementBulkIntoClauseParserRuleCall_1() { return cFetchStatementBulkIntoClauseParserRuleCall_1; }
	}

	public class FetchStatementSingleIntoClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FetchStatementSingleIntoClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINTOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetVariablesVariableRefParserRuleCall_1_0 = (RuleCall)cTargetVariablesAssignment_1.eContents().get(0);
		
		//FetchStatementSingleIntoClause:
		//	"INTO" targetVariables+=VariableRef+;
		public ParserRule getRule() { return rule; }

		//"INTO" targetVariables+=VariableRef+
		public Group getGroup() { return cGroup; }

		//"INTO"
		public Keyword getINTOKeyword_0() { return cINTOKeyword_0; }

		//targetVariables+=VariableRef+
		public Assignment getTargetVariablesAssignment_1() { return cTargetVariablesAssignment_1; }

		//VariableRef
		public RuleCall getTargetVariablesVariableRefParserRuleCall_1_0() { return cTargetVariablesVariableRefParserRuleCall_1_0; }
	}

	public class FetchStatementBulkIntoClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FetchStatementBulkIntoClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBULKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCOLLECTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cINTOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetVariablesVariableRefParserRuleCall_3_0 = (RuleCall)cTargetVariablesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLIMITKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLimitExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLimitExpressionExpressionParserRuleCall_4_1_0 = (RuleCall)cLimitExpressionAssignment_4_1.eContents().get(0);
		
		//FetchStatementBulkIntoClause:
		//	"BULK" "COLLECT" "INTO" targetVariables+=VariableRef+ ("LIMIT" limitExpression=Expression)?;
		public ParserRule getRule() { return rule; }

		//"BULK" "COLLECT" "INTO" targetVariables+=VariableRef+ ("LIMIT" limitExpression=Expression)?
		public Group getGroup() { return cGroup; }

		//"BULK"
		public Keyword getBULKKeyword_0() { return cBULKKeyword_0; }

		//"COLLECT"
		public Keyword getCOLLECTKeyword_1() { return cCOLLECTKeyword_1; }

		//"INTO"
		public Keyword getINTOKeyword_2() { return cINTOKeyword_2; }

		//targetVariables+=VariableRef+
		public Assignment getTargetVariablesAssignment_3() { return cTargetVariablesAssignment_3; }

		//VariableRef
		public RuleCall getTargetVariablesVariableRefParserRuleCall_3_0() { return cTargetVariablesVariableRefParserRuleCall_3_0; }

		//("LIMIT" limitExpression=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//"LIMIT"
		public Keyword getLIMITKeyword_4_0() { return cLIMITKeyword_4_0; }

		//limitExpression=Expression
		public Assignment getLimitExpressionAssignment_4_1() { return cLimitExpressionAssignment_4_1; }

		//Expression
		public RuleCall getLimitExpressionExpressionParserRuleCall_4_1_0() { return cLimitExpressionExpressionParserRuleCall_4_1_0; }
	}

	public class GotoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GotoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelsLabelParserRuleCall_0_0 = (RuleCall)cLabelsAssignment_0.eContents().get(0);
		private final Keyword cGOTOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLabelNameLabelCrossReference_2_0 = (CrossReference)cLabelNameAssignment_2.eContents().get(0);
		private final RuleCall cLabelNameLabelIDTerminalRuleCall_2_0_1 = (RuleCall)cLabelNameLabelCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GotoStatement:
		//	labels+=Label* "GOTO" labelName=[Label] ";";
		public ParserRule getRule() { return rule; }

		//labels+=Label* "GOTO" labelName=[Label] ";"
		public Group getGroup() { return cGroup; }

		//labels+=Label*
		public Assignment getLabelsAssignment_0() { return cLabelsAssignment_0; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_0_0() { return cLabelsLabelParserRuleCall_0_0; }

		//"GOTO"
		public Keyword getGOTOKeyword_1() { return cGOTOKeyword_1; }

		//labelName=[Label]
		public Assignment getLabelNameAssignment_2() { return cLabelNameAssignment_2; }

		//[Label]
		public CrossReference getLabelNameLabelCrossReference_2_0() { return cLabelNameLabelCrossReference_2_0; }

		//ID
		public RuleCall getLabelNameLabelIDTerminalRuleCall_2_0_1() { return cLabelNameLabelIDTerminalRuleCall_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelsLabelParserRuleCall_0_0 = (RuleCall)cLabelsAssignment_0.eContents().get(0);
		private final Keyword cIFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cTHENKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Assignment cElsifBranchesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElsifBranchesIfStatementElsifBranchParserRuleCall_5_0 = (RuleCall)cElsifBranchesAssignment_5.eContents().get(0);
		private final Assignment cElseBranchAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElseBranchIfStatementElseBranchParserRuleCall_6_0 = (RuleCall)cElseBranchAssignment_6.eContents().get(0);
		private final Keyword cENDKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cIFKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//IfStatement:
		//	labels+=Label* "IF" expression=Expression "THEN" statements+=Statement+ elsifBranches+=IfStatementElsifBranch*
		//	elseBranch=IfStatementElseBranch? "END" "IF" ";";
		public ParserRule getRule() { return rule; }

		//labels+=Label* "IF" expression=Expression "THEN" statements+=Statement+ elsifBranches+=IfStatementElsifBranch*
		//elseBranch=IfStatementElseBranch? "END" "IF" ";"
		public Group getGroup() { return cGroup; }

		//labels+=Label*
		public Assignment getLabelsAssignment_0() { return cLabelsAssignment_0; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_0_0() { return cLabelsLabelParserRuleCall_0_0; }

		//"IF"
		public Keyword getIFKeyword_1() { return cIFKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//"THEN"
		public Keyword getTHENKeyword_3() { return cTHENKeyword_3; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }

		//elsifBranches+=IfStatementElsifBranch*
		public Assignment getElsifBranchesAssignment_5() { return cElsifBranchesAssignment_5; }

		//IfStatementElsifBranch
		public RuleCall getElsifBranchesIfStatementElsifBranchParserRuleCall_5_0() { return cElsifBranchesIfStatementElsifBranchParserRuleCall_5_0; }

		//elseBranch=IfStatementElseBranch?
		public Assignment getElseBranchAssignment_6() { return cElseBranchAssignment_6; }

		//IfStatementElseBranch
		public RuleCall getElseBranchIfStatementElseBranchParserRuleCall_6_0() { return cElseBranchIfStatementElseBranchParserRuleCall_6_0; }

		//"END"
		public Keyword getENDKeyword_7() { return cENDKeyword_7; }

		//"IF"
		public Keyword getIFKeyword_8() { return cIFKeyword_8; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}

	public class IfStatementElsifBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatementElsifBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cELSIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//IfStatementElsifBranch:
		//	"ELSIF" expression=Expression "THEN" statements+=Statement+;
		public ParserRule getRule() { return rule; }

		//"ELSIF" expression=Expression "THEN" statements+=Statement+
		public Group getGroup() { return cGroup; }

		//"ELSIF"
		public Keyword getELSIFKeyword_0() { return cELSIFKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//"THEN"
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
	}

	public class IfStatementElseBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatementElseBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cELSEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//IfStatementElseBranch:
		//	"ELSE" statements+=Statement+;
		public ParserRule getRule() { return rule; }

		//"ELSE" statements+=Statement+
		public Group getGroup() { return cGroup; }

		//"ELSE"
		public Keyword getELSEKeyword_0() { return cELSEKeyword_0; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}

	public class LoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoopStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicLoopStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhileLoopStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForLoopStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LoopStatement:
		//	BasicLoopStatement | WhileLoopStatement | ForLoopStatement;
		public ParserRule getRule() { return rule; }

		//BasicLoopStatement | WhileLoopStatement | ForLoopStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicLoopStatement
		public RuleCall getBasicLoopStatementParserRuleCall_0() { return cBasicLoopStatementParserRuleCall_0; }

		//WhileLoopStatement
		public RuleCall getWhileLoopStatementParserRuleCall_1() { return cWhileLoopStatementParserRuleCall_1; }

		//ForLoopStatement
		public RuleCall getForLoopStatementParserRuleCall_2() { return cForLoopStatementParserRuleCall_2; }
	}

	public class BasicLoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicLoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelsLabelParserRuleCall_0_0 = (RuleCall)cLabelsAssignment_0.eContents().get(0);
		private final Keyword cLOOPKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cENDKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLOOPKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEndLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEndLabelIDTerminalRuleCall_5_0 = (RuleCall)cEndLabelAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BasicLoopStatement:
		//	labels+=Label* "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";";
		public ParserRule getRule() { return rule; }

		//labels+=Label* "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";"
		public Group getGroup() { return cGroup; }

		//labels+=Label*
		public Assignment getLabelsAssignment_0() { return cLabelsAssignment_0; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_0_0() { return cLabelsLabelParserRuleCall_0_0; }

		//"LOOP"
		public Keyword getLOOPKeyword_1() { return cLOOPKeyword_1; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"END"
		public Keyword getENDKeyword_3() { return cENDKeyword_3; }

		//"LOOP"
		public Keyword getLOOPKeyword_4() { return cLOOPKeyword_4; }

		//endLabel=ID?
		public Assignment getEndLabelAssignment_5() { return cEndLabelAssignment_5; }

		//ID
		public RuleCall getEndLabelIDTerminalRuleCall_5_0() { return cEndLabelIDTerminalRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class WhileLoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileLoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelsLabelParserRuleCall_0_0 = (RuleCall)cLabelsAssignment_0.eContents().get(0);
		private final Keyword cWHILEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cLOOPKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cENDKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLOOPKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEndLabelAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEndLabelIDTerminalRuleCall_7_0 = (RuleCall)cEndLabelAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//WhileLoopStatement:
		//	labels+=Label* "WHILE" expression=Expression "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";";
		public ParserRule getRule() { return rule; }

		//labels+=Label* "WHILE" expression=Expression "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";"
		public Group getGroup() { return cGroup; }

		//labels+=Label*
		public Assignment getLabelsAssignment_0() { return cLabelsAssignment_0; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_0_0() { return cLabelsLabelParserRuleCall_0_0; }

		//"WHILE"
		public Keyword getWHILEKeyword_1() { return cWHILEKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//"LOOP"
		public Keyword getLOOPKeyword_3() { return cLOOPKeyword_3; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }

		//"END"
		public Keyword getENDKeyword_5() { return cENDKeyword_5; }

		//"LOOP"
		public Keyword getLOOPKeyword_6() { return cLOOPKeyword_6; }

		//endLabel=ID?
		public Assignment getEndLabelAssignment_7() { return cEndLabelAssignment_7; }

		//ID
		public RuleCall getEndLabelIDTerminalRuleCall_7_0() { return cEndLabelIDTerminalRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class ForLoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForLoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelsLabelParserRuleCall_0_0 = (RuleCall)cLabelsAssignment_0.eContents().get(0);
		private final Keyword cFORKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexVariableLoopVariableDeclarationParserRuleCall_2_0 = (RuleCall)cIndexVariableAssignment_2.eContents().get(0);
		private final Keyword cINKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cREVERSEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLowerBoundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLowerBoundExpressionParserRuleCall_5_0 = (RuleCall)cLowerBoundAssignment_5.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cUpperBoundAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cUpperBoundExpressionParserRuleCall_7_0 = (RuleCall)cUpperBoundAssignment_7.eContents().get(0);
		private final Keyword cLOOPKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStatementsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatementsStatementParserRuleCall_9_0 = (RuleCall)cStatementsAssignment_9.eContents().get(0);
		private final Keyword cENDKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLOOPKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cEndLabelAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cEndLabelIDTerminalRuleCall_12_0 = (RuleCall)cEndLabelAssignment_12.eContents().get(0);
		private final Keyword cSemicolonKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//ForLoopStatement:
		//	labels+=Label* "FOR" indexVariable=LoopVariableDeclaration "IN" "REVERSE"? lowerBound=Expression ".."
		//	upperBound=Expression "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";";
		public ParserRule getRule() { return rule; }

		//labels+=Label* "FOR" indexVariable=LoopVariableDeclaration "IN" "REVERSE"? lowerBound=Expression ".."
		//upperBound=Expression "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";"
		public Group getGroup() { return cGroup; }

		//labels+=Label*
		public Assignment getLabelsAssignment_0() { return cLabelsAssignment_0; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_0_0() { return cLabelsLabelParserRuleCall_0_0; }

		//"FOR"
		public Keyword getFORKeyword_1() { return cFORKeyword_1; }

		//indexVariable=LoopVariableDeclaration
		public Assignment getIndexVariableAssignment_2() { return cIndexVariableAssignment_2; }

		//LoopVariableDeclaration
		public RuleCall getIndexVariableLoopVariableDeclarationParserRuleCall_2_0() { return cIndexVariableLoopVariableDeclarationParserRuleCall_2_0; }

		//"IN"
		public Keyword getINKeyword_3() { return cINKeyword_3; }

		//"REVERSE"?
		public Keyword getREVERSEKeyword_4() { return cREVERSEKeyword_4; }

		//lowerBound=Expression
		public Assignment getLowerBoundAssignment_5() { return cLowerBoundAssignment_5; }

		//Expression
		public RuleCall getLowerBoundExpressionParserRuleCall_5_0() { return cLowerBoundExpressionParserRuleCall_5_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_6() { return cFullStopFullStopKeyword_6; }

		//upperBound=Expression
		public Assignment getUpperBoundAssignment_7() { return cUpperBoundAssignment_7; }

		//Expression
		public RuleCall getUpperBoundExpressionParserRuleCall_7_0() { return cUpperBoundExpressionParserRuleCall_7_0; }

		//"LOOP"
		public Keyword getLOOPKeyword_8() { return cLOOPKeyword_8; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_9() { return cStatementsAssignment_9; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_9_0() { return cStatementsStatementParserRuleCall_9_0; }

		//"END"
		public Keyword getENDKeyword_10() { return cENDKeyword_10; }

		//"LOOP"
		public Keyword getLOOPKeyword_11() { return cLOOPKeyword_11; }

		//endLabel=ID?
		public Assignment getEndLabelAssignment_12() { return cEndLabelAssignment_12; }

		//ID
		public RuleCall getEndLabelIDTerminalRuleCall_12_0() { return cEndLabelIDTerminalRuleCall_12_0; }

		//";"
		public Keyword getSemicolonKeyword_13() { return cSemicolonKeyword_13; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLabelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelsLabelParserRuleCall_1_0 = (RuleCall)cLabelsAssignment_1.eContents().get(0);
		private final Keyword cRETURNKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReturnStatement:
		//	{ReturnStatement} labels+=Label* "RETURN" expression=Expression? ";";
		public ParserRule getRule() { return rule; }

		//{ReturnStatement} labels+=Label* "RETURN" expression=Expression? ";"
		public Group getGroup() { return cGroup; }

		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }

		//labels+=Label*
		public Assignment getLabelsAssignment_1() { return cLabelsAssignment_1; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_1_0() { return cLabelsLabelParserRuleCall_1_0; }

		//"RETURN"
		public Keyword getRETURNKeyword_2() { return cRETURNKeyword_2; }

		//expression=Expression?
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NullStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLabelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelsLabelParserRuleCall_1_0 = (RuleCall)cLabelsAssignment_1.eContents().get(0);
		private final Keyword cNULLKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NullStatement:
		//	{NullStatement} labels+=Label* "NULL" ";";
		public ParserRule getRule() { return rule; }

		//{NullStatement} labels+=Label* "NULL" ";"
		public Group getGroup() { return cGroup; }

		//{NullStatement}
		public Action getNullStatementAction_0() { return cNullStatementAction_0; }

		//labels+=Label*
		public Assignment getLabelsAssignment_1() { return cLabelsAssignment_1; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_1_0() { return cLabelsLabelParserRuleCall_1_0; }

		//"NULL"
		public Keyword getNULLKeyword_2() { return cNULLKeyword_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class RaiseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RaiseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRaiseStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLabelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelsLabelParserRuleCall_1_0 = (RuleCall)cLabelsAssignment_1.eContents().get(0);
		private final Keyword cRAISEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExceptionNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExceptionNameIDTerminalRuleCall_3_0 = (RuleCall)cExceptionNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RaiseStatement:
		//	{RaiseStatement} labels+=Label* "RAISE" exceptionName=ID? ";";
		public ParserRule getRule() { return rule; }

		//{RaiseStatement} labels+=Label* "RAISE" exceptionName=ID? ";"
		public Group getGroup() { return cGroup; }

		//{RaiseStatement}
		public Action getRaiseStatementAction_0() { return cRaiseStatementAction_0; }

		//labels+=Label*
		public Assignment getLabelsAssignment_1() { return cLabelsAssignment_1; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_1_0() { return cLabelsLabelParserRuleCall_1_0; }

		//"RAISE"
		public Keyword getRAISEKeyword_2() { return cRAISEKeyword_2; }

		//exceptionName=ID?
		public Assignment getExceptionNameAssignment_3() { return cExceptionNameAssignment_3; }

		//ID
		public RuleCall getExceptionNameIDTerminalRuleCall_3_0() { return cExceptionNameIDTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsHostRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsHostRefColonKeyword_0_0 = (Keyword)cIsHostRefAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VariableRef:
		//	isHostRef?=":"? name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//isHostRef?=":"? name=QualifiedName
		public Group getGroup() { return cGroup; }

		//isHostRef?=":"?
		public Assignment getIsHostRefAssignment_0() { return cIsHostRefAssignment_0; }

		//":"
		public Keyword getIsHostRefColonKeyword_0_0() { return cIsHostRefColonKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamesNameParserRuleCall_0_0 = (RuleCall)cNamesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamesNameParserRuleCall_1_1_0 = (RuleCall)cNamesAssignment_1_1.eContents().get(0);
		
		//QualifiedName:
		//	names+=Name ("." names+=Name)*;
		public ParserRule getRule() { return rule; }

		//names+=Name ("." names+=Name)*
		public Group getGroup() { return cGroup; }

		//names+=Name
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }

		//Name
		public RuleCall getNamesNameParserRuleCall_0_0() { return cNamesNameParserRuleCall_0_0; }

		//("." names+=Name)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//names+=Name
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }

		//Name
		public RuleCall getNamesNameParserRuleCall_1_1_0() { return cNamesNameParserRuleCall_1_1_0; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Assignment cDeclarationAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cDeclarationNameDeclarationCrossReference_0 = (CrossReference)cDeclarationAssignment.eContents().get(0);
		private final RuleCall cDeclarationNameDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cDeclarationNameDeclarationCrossReference_0.eContents().get(1);
		
		//Name:
		//	declaration=[NameDeclaration];
		public ParserRule getRule() { return rule; }

		//declaration=[NameDeclaration]
		public Assignment getDeclarationAssignment() { return cDeclarationAssignment; }

		//[NameDeclaration]
		public CrossReference getDeclarationNameDeclarationCrossReference_0() { return cDeclarationNameDeclarationCrossReference_0; }

		//ID
		public RuleCall getDeclarationNameDeclarationIDTerminalRuleCall_0_1() { return cDeclarationNameDeclarationIDTerminalRuleCall_0_1; }
	}

	public class LoopVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoopVariableDeclaration");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//LoopVariableDeclaration:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class NameDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProcedureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPackageParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cProcedureDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLoopVariableDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//NameDeclaration:
		//	VariableDeclaration | ParameterDeclaration | Procedure | Function | Package | ProcedureDefinition |
		//	LoopVariableDeclaration;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration | ParameterDeclaration | Procedure | Function | Package | ProcedureDefinition |
		//LoopVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_1() { return cParameterDeclarationParserRuleCall_1; }

		//Procedure
		public RuleCall getProcedureParserRuleCall_2() { return cProcedureParserRuleCall_2; }

		//Function
		public RuleCall getFunctionParserRuleCall_3() { return cFunctionParserRuleCall_3; }

		//Package
		public RuleCall getPackageParserRuleCall_4() { return cPackageParserRuleCall_4; }

		//ProcedureDefinition
		public RuleCall getProcedureDefinitionParserRuleCall_5() { return cProcedureDefinitionParserRuleCall_5; }

		//LoopVariableDeclaration
		public RuleCall getLoopVariableDeclarationParserRuleCall_6() { return cLoopVariableDeclarationParserRuleCall_6; }
	}
	
	
	public class InvokerRightElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "InvokerRight");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCURRENT_USEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCURRENT_USERCURRENT_USERKeyword_0_0 = (Keyword)cCURRENT_USEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEFINEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDEFINERDEFINERKeyword_1_0 = (Keyword)cDEFINEREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum InvokerRight:
		//	CURRENT_USER | DEFINER;
		public EnumRule getRule() { return rule; }

		//CURRENT_USER | DEFINER
		public Alternatives getAlternatives() { return cAlternatives; }

		//CURRENT_USER
		public EnumLiteralDeclaration getCURRENT_USEREnumLiteralDeclaration_0() { return cCURRENT_USEREnumLiteralDeclaration_0; }

		//"CURRENT_USER"
		public Keyword getCURRENT_USERCURRENT_USERKeyword_0_0() { return cCURRENT_USERCURRENT_USERKeyword_0_0; }

		//DEFINER
		public EnumLiteralDeclaration getDEFINEREnumLiteralDeclaration_1() { return cDEFINEREnumLiteralDeclaration_1; }

		//"DEFINER"
		public Keyword getDEFINERDEFINERKeyword_1_0() { return cDEFINERDEFINERKeyword_1_0; }
	}
	
	private CompilationUnitElements pCompilationUnit;
	private ProcedureElements pProcedure;
	private PackageElements pPackage;
	private ProcedureDeclarationElements pProcedureDeclaration;
	private ProcedureDefinitionElements pProcedureDefinition;
	private FunctionElements pFunction;
	private ParameterSequenceElements pParameterSequence;
	private ParameterDeclarationElements pParameterDeclaration;
	private ParameterValueElements pParameterValue;
	private ParameterBehaviorElements pParameterBehavior;
	private ProcedureInvokerRightsClauseElements pProcedureInvokerRightsClause;
	private FunctionInvokerRightsClauseElements pFunctionInvokerRightsClause;
	private InvokerRightElements unknownRuleInvokerRight;
	private PragmaElements pPragma;
	private PragmaRestrictReferencesElements pPragmaRestrictReferences;
	private PragmaRestrictReferencesRestrictionElements pPragmaRestrictReferencesRestriction;
	private SubprogramNameElements pSubprogramName;
	private PragmaTimestampElements pPragmaTimestamp;
	private DataTypeElements pDataType;
	private ProcedureContentElements pProcedureContent;
	private ProcedureImplementationElements pProcedureImplementation;
	private FunctionContentElements pFunctionContent;
	private FunctionImplementationElements pFunctionImplementation;
	private FunctionClauseElements pFunctionClause;
	private DeterministicClauseElements pDeterministicClause;
	private ResultCacheClauseElements pResultCacheClause;
	private PipelinedClauseElements pPipelinedClause;
	private StatementBodyElements pStatementBody;
	private DeclareSectionElements pDeclareSection;
	private ItemElements pItem;
	private ItemDeclarationElements pItemDeclaration;
	private ExternalProcedureDeclarationElements pExternalProcedureDeclaration;
	private VariableDeclarationElements pVariableDeclaration;
	private NOT_NULLElements pNOT_NULL;
	private VariableValueElements pVariableValue;
	private ExpressionElements pExpression;
	private IntLiteralExpressionElements pIntLiteralExpression;
	private StringLiteralExpressionElements pStringLiteralExpression;
	private BooleanLiteralExpressionElements pBooleanLiteralExpression;
	private NullLiteralExpressionElements pNullLiteralExpression;
	private VariableRefExpressionElements pVariableRefExpression;
	private StatementElements pStatement;
	private LabelElements pLabel;
	private AssignmentStatementElements pAssignmentStatement;
	private AssignmentTargetElements pAssignmentTarget;
	private VariableAssignmentTargetElements pVariableAssignmentTarget;
	private BlockStatementElements pBlockStatement;
	private CaseStatementElements pCaseStatement;
	private CaseStatementWhenBranchElements pCaseStatementWhenBranch;
	private CaseStatementElseBranchElements pCaseStatementElseBranch;
	private CloseStatementElements pCloseStatement;
	private ContinueStatementElements pContinueStatement;
	private ExitStatementElements pExitStatement;
	private FetchStatementElements pFetchStatement;
	private FetchStatementIntoClauseElements pFetchStatementIntoClause;
	private FetchStatementSingleIntoClauseElements pFetchStatementSingleIntoClause;
	private FetchStatementBulkIntoClauseElements pFetchStatementBulkIntoClause;
	private GotoStatementElements pGotoStatement;
	private IfStatementElements pIfStatement;
	private IfStatementElsifBranchElements pIfStatementElsifBranch;
	private IfStatementElseBranchElements pIfStatementElseBranch;
	private LoopStatementElements pLoopStatement;
	private BasicLoopStatementElements pBasicLoopStatement;
	private WhileLoopStatementElements pWhileLoopStatement;
	private ForLoopStatementElements pForLoopStatement;
	private ReturnStatementElements pReturnStatement;
	private NullStatementElements pNullStatement;
	private RaiseStatementElements pRaiseStatement;
	private VariableRefElements pVariableRef;
	private QualifiedNameElements pQualifiedName;
	private NameElements pName;
	private LoopVariableDeclarationElements pLoopVariableDeclaration;
	private NameDeclarationElements pNameDeclaration;
	private TerminalRule tSL_COMMENT;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PlSqlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CompilationUnit:
	//	Procedure | Function | Package;
	public CompilationUnitElements getCompilationUnitAccess() {
		return (pCompilationUnit != null) ? pCompilationUnit : (pCompilationUnit = new CompilationUnitElements());
	}
	
	public ParserRule getCompilationUnitRule() {
		return getCompilationUnitAccess().getRule();
	}

	//Procedure:
	//	"PROCEDURE" (schemaName=ID ".")? name=ID ("(" parameters=ParameterSequence ")")?
	//	invokerRights=ProcedureInvokerRightsClause? ("IS" | "AS") content=ProcedureContent;
	public ProcedureElements getProcedureAccess() {
		return (pProcedure != null) ? pProcedure : (pProcedure = new ProcedureElements());
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//Package:
	//	"PACKAGE" (schemaName=ID ".")? name=ID invokerRights=ProcedureInvokerRightsClause? ("IS" | "AS") items+=Item* "END"
	//	endName=ID? ";";
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//ProcedureDeclaration:
	//	"PROCEDURE" name=ID ("(" parameters=ParameterSequence ")")? ";";
	public ProcedureDeclarationElements getProcedureDeclarationAccess() {
		return (pProcedureDeclaration != null) ? pProcedureDeclaration : (pProcedureDeclaration = new ProcedureDeclarationElements());
	}
	
	public ParserRule getProcedureDeclarationRule() {
		return getProcedureDeclarationAccess().getRule();
	}

	//ProcedureDefinition:
	//	"PROCEDURE" name=ID ("(" parameters=ParameterSequence ")")? ("IS" // TODO: USING branch
	//	| "AS") implementation=ProcedureImplementation;
	public ProcedureDefinitionElements getProcedureDefinitionAccess() {
		return (pProcedureDefinition != null) ? pProcedureDefinition : (pProcedureDefinition = new ProcedureDefinitionElements());
	}
	
	public ParserRule getProcedureDefinitionRule() {
		return getProcedureDefinitionAccess().getRule();
	}

	//Function:
	//	"FUNCTION" (schemaName=ID ".")? name=ID ("(" parameters=ParameterSequence ")")? "RETURN" returnType=DataType
	//	functionClauses+=FunctionClause ("IS" | "AS") content=FunctionContent;
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//ParameterSequence:
	//	parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*;
	public ParameterSequenceElements getParameterSequenceAccess() {
		return (pParameterSequence != null) ? pParameterSequence : (pParameterSequence = new ParameterSequenceElements());
	}
	
	public ParserRule getParameterSequenceRule() {
		return getParameterSequenceAccess().getRule();
	}

	//ParameterDeclaration:
	//	name=ID behavior=ParameterBehavior? dataType=DataType value=ParameterValue?;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return (pParameterDeclaration != null) ? pParameterDeclaration : (pParameterDeclaration = new ParameterDeclarationElements());
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	//ParameterValue:
	//	(":=" | "DEFAULT") expression=Expression;
	public ParameterValueElements getParameterValueAccess() {
		return (pParameterValue != null) ? pParameterValue : (pParameterValue = new ParameterValueElements());
	}
	
	public ParserRule getParameterValueRule() {
		return getParameterValueAccess().getRule();
	}

	//ParameterBehavior returns ecore::EString:
	//	"IN" | "OUT" "NOCOPY"? | "IN" "OUT" "NOCOPY"?;
	public ParameterBehaviorElements getParameterBehaviorAccess() {
		return (pParameterBehavior != null) ? pParameterBehavior : (pParameterBehavior = new ParameterBehaviorElements());
	}
	
	public ParserRule getParameterBehaviorRule() {
		return getParameterBehaviorAccess().getRule();
	}

	//ProcedureInvokerRightsClause:
	//	right=InvokerRight;
	public ProcedureInvokerRightsClauseElements getProcedureInvokerRightsClauseAccess() {
		return (pProcedureInvokerRightsClause != null) ? pProcedureInvokerRightsClause : (pProcedureInvokerRightsClause = new ProcedureInvokerRightsClauseElements());
	}
	
	public ParserRule getProcedureInvokerRightsClauseRule() {
		return getProcedureInvokerRightsClauseAccess().getRule();
	}

	//FunctionInvokerRightsClause:
	//	right=InvokerRight;
	public FunctionInvokerRightsClauseElements getFunctionInvokerRightsClauseAccess() {
		return (pFunctionInvokerRightsClause != null) ? pFunctionInvokerRightsClause : (pFunctionInvokerRightsClause = new FunctionInvokerRightsClauseElements());
	}
	
	public ParserRule getFunctionInvokerRightsClauseRule() {
		return getFunctionInvokerRightsClauseAccess().getRule();
	}

	//enum InvokerRight:
	//	CURRENT_USER | DEFINER;
	public InvokerRightElements getInvokerRightAccess() {
		return (unknownRuleInvokerRight != null) ? unknownRuleInvokerRight : (unknownRuleInvokerRight = new InvokerRightElements());
	}
	
	public EnumRule getInvokerRightRule() {
		return getInvokerRightAccess().getRule();
	}

	//Pragma:
	//	PragmaRestrictReferences | PragmaTimestamp;
	public PragmaElements getPragmaAccess() {
		return (pPragma != null) ? pPragma : (pPragma = new PragmaElements());
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}

	//PragmaRestrictReferences:
	//	"PRAGMA" "RESTRICT_REFERENCES" "(" (SubprogramName | "DEFAULT") "," restrictions+=PragmaRestrictReferencesRestriction
	//	("," restrictions+=PragmaRestrictReferencesRestriction)* ")" ";";
	public PragmaRestrictReferencesElements getPragmaRestrictReferencesAccess() {
		return (pPragmaRestrictReferences != null) ? pPragmaRestrictReferences : (pPragmaRestrictReferences = new PragmaRestrictReferencesElements());
	}
	
	public ParserRule getPragmaRestrictReferencesRule() {
		return getPragmaRestrictReferencesAccess().getRule();
	}

	//PragmaRestrictReferencesRestriction returns ecore::EString:
	//	"RNDS" | "WNDS" | "RNPS" | "WNPS" | "TRUST";
	public PragmaRestrictReferencesRestrictionElements getPragmaRestrictReferencesRestrictionAccess() {
		return (pPragmaRestrictReferencesRestriction != null) ? pPragmaRestrictReferencesRestriction : (pPragmaRestrictReferencesRestriction = new PragmaRestrictReferencesRestrictionElements());
	}
	
	public ParserRule getPragmaRestrictReferencesRestrictionRule() {
		return getPragmaRestrictReferencesRestrictionAccess().getRule();
	}

	//SubprogramName returns ecore::EString:
	//	ID;
	public SubprogramNameElements getSubprogramNameAccess() {
		return (pSubprogramName != null) ? pSubprogramName : (pSubprogramName = new SubprogramNameElements());
	}
	
	public ParserRule getSubprogramNameRule() {
		return getSubprogramNameAccess().getRule();
	}

	//PragmaTimestamp:
	//	"PRAGMA" "TIMESTAMP" "(" timestamp=STRING ")" ";";
	public PragmaTimestampElements getPragmaTimestampAccess() {
		return (pPragmaTimestamp != null) ? pPragmaTimestamp : (pPragmaTimestamp = new PragmaTimestampElements());
	}
	
	public ParserRule getPragmaTimestampRule() {
		return getPragmaTimestampAccess().getRule();
	}

	//DataType returns ecore::EString:
	//	"NUMBER" ("(" INT ("," INT)? ")")? | "VARCHAR2" ("(" INT ")")? | "BOOLEAN" | ID;
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//ProcedureContent:
	//	ProcedureImplementation // TODO | CallSpecification
	//	| ExternalProcedureDeclaration;
	public ProcedureContentElements getProcedureContentAccess() {
		return (pProcedureContent != null) ? pProcedureContent : (pProcedureContent = new ProcedureContentElements());
	}
	
	public ParserRule getProcedureContentRule() {
		return getProcedureContentAccess().getRule();
	}

	//ProcedureImplementation:
	//	declareSection=DeclareSection? body=StatementBody;
	public ProcedureImplementationElements getProcedureImplementationAccess() {
		return (pProcedureImplementation != null) ? pProcedureImplementation : (pProcedureImplementation = new ProcedureImplementationElements());
	}
	
	public ParserRule getProcedureImplementationRule() {
		return getProcedureImplementationAccess().getRule();
	}

	//// TODO | CallSpecification
	//FunctionContent:
	//	FunctionImplementation;
	public FunctionContentElements getFunctionContentAccess() {
		return (pFunctionContent != null) ? pFunctionContent : (pFunctionContent = new FunctionContentElements());
	}
	
	public ParserRule getFunctionContentRule() {
		return getFunctionContentAccess().getRule();
	}

	//FunctionImplementation:
	//	declareSection=DeclareSection? body=StatementBody;
	public FunctionImplementationElements getFunctionImplementationAccess() {
		return (pFunctionImplementation != null) ? pFunctionImplementation : (pFunctionImplementation = new FunctionImplementationElements());
	}
	
	public ParserRule getFunctionImplementationRule() {
		return getFunctionImplementationAccess().getRule();
	}

	//FunctionClause:
	//	FunctionInvokerRightsClause // TODO | ParallelEnableClause
	//	| DeterministicClause | ResultCacheClause | PipelinedClause;
	public FunctionClauseElements getFunctionClauseAccess() {
		return (pFunctionClause != null) ? pFunctionClause : (pFunctionClause = new FunctionClauseElements());
	}
	
	public ParserRule getFunctionClauseRule() {
		return getFunctionClauseAccess().getRule();
	}

	//DeterministicClause:
	//	{DeterministicClause} "DETERMINISTIC";
	public DeterministicClauseElements getDeterministicClauseAccess() {
		return (pDeterministicClause != null) ? pDeterministicClause : (pDeterministicClause = new DeterministicClauseElements());
	}
	
	public ParserRule getDeterministicClauseRule() {
		return getDeterministicClauseAccess().getRule();
	}

	//ResultCacheClause:
	//	{ResultCacheClause} "RESULT_CACHE" ("RELIES_ON" "(" (dataSources+=ID ("," dataSources+=ID))? ")")?;
	public ResultCacheClauseElements getResultCacheClauseAccess() {
		return (pResultCacheClause != null) ? pResultCacheClause : (pResultCacheClause = new ResultCacheClauseElements());
	}
	
	public ParserRule getResultCacheClauseRule() {
		return getResultCacheClauseAccess().getRule();
	}

	//PipelinedClause:
	//	{PipelinedClause} "PIPELINED";
	public PipelinedClauseElements getPipelinedClauseAccess() {
		return (pPipelinedClause != null) ? pPipelinedClause : (pPipelinedClause = new PipelinedClauseElements());
	}
	
	public ParserRule getPipelinedClauseRule() {
		return getPipelinedClauseAccess().getRule();
	}

	//StatementBody:
	//	"BEGIN" statements+=Statement+ "END" endName=ID? ";";
	public StatementBodyElements getStatementBodyAccess() {
		return (pStatementBody != null) ? pStatementBody : (pStatementBody = new StatementBodyElements());
	}
	
	public ParserRule getStatementBodyRule() {
		return getStatementBodyAccess().getRule();
	}

	//// NOTE: DECLARE should not be allowed for non-anonymous blocks!
	//DeclareSection:
	//	"DECLARE"? items+=Item+;
	public DeclareSectionElements getDeclareSectionAccess() {
		return (pDeclareSection != null) ? pDeclareSection : (pDeclareSection = new DeclareSectionElements());
	}
	
	public ParserRule getDeclareSectionRule() {
		return getDeclareSectionAccess().getRule();
	}

	//Item:
	//	ItemDeclaration // TODO | TypeDefinition
	//	// TODO | FunctionDeclaration
	//	// TODO | FunctionDefinition
	//	| ProcedureDeclaration | ProcedureDefinition | Pragma;
	public ItemElements getItemAccess() {
		return (pItem != null) ? pItem : (pItem = new ItemElements());
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}

	//ItemDeclaration:
	//	VariableDeclaration;
	public ItemDeclarationElements getItemDeclarationAccess() {
		return (pItemDeclaration != null) ? pItemDeclaration : (pItemDeclaration = new ItemDeclarationElements());
	}
	
	public ParserRule getItemDeclarationRule() {
		return getItemDeclarationAccess().getRule();
	}

	//ExternalProcedureDeclaration:
	//	{ExternalProcedureDeclaration} "EXTERNAL";
	public ExternalProcedureDeclarationElements getExternalProcedureDeclarationAccess() {
		return (pExternalProcedureDeclaration != null) ? pExternalProcedureDeclaration : (pExternalProcedureDeclaration = new ExternalProcedureDeclarationElements());
	}
	
	public ParserRule getExternalProcedureDeclarationRule() {
		return getExternalProcedureDeclarationAccess().getRule();
	}

	//// FIXME: NOT_NULL is not inline since, otherwise, there would be an error in the grammar. it's not clear why...
	//VariableDeclaration:
	//	name=ID isConstant?="CONSTANT"? dataType=DataType isNotNull?=NOT_NULL? value=VariableValue? ";";
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//NOT_NULL returns ecore::EString:
	//	"NOT" "NULL";
	public NOT_NULLElements getNOT_NULLAccess() {
		return (pNOT_NULL != null) ? pNOT_NULL : (pNOT_NULL = new NOT_NULLElements());
	}
	
	public ParserRule getNOT_NULLRule() {
		return getNOT_NULLAccess().getRule();
	}

	//VariableValue:
	//	(":=" | "DEFAULT") expression=Expression;
	public VariableValueElements getVariableValueAccess() {
		return (pVariableValue != null) ? pVariableValue : (pVariableValue = new VariableValueElements());
	}
	
	public ParserRule getVariableValueRule() {
		return getVariableValueAccess().getRule();
	}

	//Expression:
	//	IntLiteralExpression | StringLiteralExpression | BooleanLiteralExpression | NullLiteralExpression |
	//	VariableRefExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//IntLiteralExpression:
	//	value=INT;
	public IntLiteralExpressionElements getIntLiteralExpressionAccess() {
		return (pIntLiteralExpression != null) ? pIntLiteralExpression : (pIntLiteralExpression = new IntLiteralExpressionElements());
	}
	
	public ParserRule getIntLiteralExpressionRule() {
		return getIntLiteralExpressionAccess().getRule();
	}

	//StringLiteralExpression:
	//	value=STRING;
	public StringLiteralExpressionElements getStringLiteralExpressionAccess() {
		return (pStringLiteralExpression != null) ? pStringLiteralExpression : (pStringLiteralExpression = new StringLiteralExpressionElements());
	}
	
	public ParserRule getStringLiteralExpressionRule() {
		return getStringLiteralExpressionAccess().getRule();
	}

	//// TODO: Make a boolean out of this.
	//BooleanLiteralExpression:
	//	value=("TRUE" | "FALSE");
	public BooleanLiteralExpressionElements getBooleanLiteralExpressionAccess() {
		return (pBooleanLiteralExpression != null) ? pBooleanLiteralExpression : (pBooleanLiteralExpression = new BooleanLiteralExpressionElements());
	}
	
	public ParserRule getBooleanLiteralExpressionRule() {
		return getBooleanLiteralExpressionAccess().getRule();
	}

	//NullLiteralExpression:
	//	{NullLiteralExpression} "NULL";
	public NullLiteralExpressionElements getNullLiteralExpressionAccess() {
		return (pNullLiteralExpression != null) ? pNullLiteralExpression : (pNullLiteralExpression = new NullLiteralExpressionElements());
	}
	
	public ParserRule getNullLiteralExpressionRule() {
		return getNullLiteralExpressionAccess().getRule();
	}

	//VariableRefExpression:
	//	variable=VariableRef;
	public VariableRefExpressionElements getVariableRefExpressionAccess() {
		return (pVariableRefExpression != null) ? pVariableRefExpression : (pVariableRefExpression = new VariableRefExpressionElements());
	}
	
	public ParserRule getVariableRefExpressionRule() {
		return getVariableRefExpressionAccess().getRule();
	}

	//// TODO | SqlStatement
	//Statement:
	//	AssignmentStatement // TODO | ExecuteImmediateStatement
	//	// TODO | ForallStatement
	//	// TODO | OpenStatement
	//	// TODO | OpenForStatement
	//	| BlockStatement | CaseStatement | CloseStatement | ContinueStatement | ExitStatement | FetchStatement | GotoStatement
	//	| IfStatement | LoopStatement | NullStatement | RaiseStatement | ReturnStatement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Label:
	//	"<<" name=ID ">>";
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//AssignmentStatement:
	//	labels+=Label* target=AssignmentTarget ":=" expression=Expression ";";
	public AssignmentStatementElements getAssignmentStatementAccess() {
		return (pAssignmentStatement != null) ? pAssignmentStatement : (pAssignmentStatement = new AssignmentStatementElements());
	}
	
	public ParserRule getAssignmentStatementRule() {
		return getAssignmentStatementAccess().getRule();
	}

	//AssignmentTarget:
	//	VariableAssignmentTarget;
	public AssignmentTargetElements getAssignmentTargetAccess() {
		return (pAssignmentTarget != null) ? pAssignmentTarget : (pAssignmentTarget = new AssignmentTargetElements());
	}
	
	public ParserRule getAssignmentTargetRule() {
		return getAssignmentTargetAccess().getRule();
	}

	//VariableAssignmentTarget:
	//	variable=VariableRef;
	public VariableAssignmentTargetElements getVariableAssignmentTargetAccess() {
		return (pVariableAssignmentTarget != null) ? pVariableAssignmentTarget : (pVariableAssignmentTarget = new VariableAssignmentTargetElements());
	}
	
	public ParserRule getVariableAssignmentTargetRule() {
		return getVariableAssignmentTargetAccess().getRule();
	}

	//BlockStatement:
	//	labels+=Label* declareSection=DeclareSection? body=StatementBody;
	public BlockStatementElements getBlockStatementAccess() {
		return (pBlockStatement != null) ? pBlockStatement : (pBlockStatement = new BlockStatementElements());
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}

	//CaseStatement:
	//	labels+=Label* "CASE" expression=Expression? whenBranches+=CaseStatementWhenBranch+
	//	elseBranch=CaseStatementElseBranch? "END" "CASE" endLabel=ID? ";";
	public CaseStatementElements getCaseStatementAccess() {
		return (pCaseStatement != null) ? pCaseStatement : (pCaseStatement = new CaseStatementElements());
	}
	
	public ParserRule getCaseStatementRule() {
		return getCaseStatementAccess().getRule();
	}

	//CaseStatementWhenBranch:
	//	"WHEN" expression=Expression "THEN" statements+=Statement+;
	public CaseStatementWhenBranchElements getCaseStatementWhenBranchAccess() {
		return (pCaseStatementWhenBranch != null) ? pCaseStatementWhenBranch : (pCaseStatementWhenBranch = new CaseStatementWhenBranchElements());
	}
	
	public ParserRule getCaseStatementWhenBranchRule() {
		return getCaseStatementWhenBranchAccess().getRule();
	}

	//CaseStatementElseBranch:
	//	"ELSE" statements+=Statement+;
	public CaseStatementElseBranchElements getCaseStatementElseBranchAccess() {
		return (pCaseStatementElseBranch != null) ? pCaseStatementElseBranch : (pCaseStatementElseBranch = new CaseStatementElseBranchElements());
	}
	
	public ParserRule getCaseStatementElseBranchRule() {
		return getCaseStatementElseBranchAccess().getRule();
	}

	//CloseStatement:
	//	labels+=Label* "CLOSE" cursor=VariableRef ";";
	public CloseStatementElements getCloseStatementAccess() {
		return (pCloseStatement != null) ? pCloseStatement : (pCloseStatement = new CloseStatementElements());
	}
	
	public ParserRule getCloseStatementRule() {
		return getCloseStatementAccess().getRule();
	}

	//ContinueStatement:
	//	{ContinueStatement} labels+=Label* "CONTINUE" labelName=ID? ("WHEN" whenExpression=Expression)? ";";
	public ContinueStatementElements getContinueStatementAccess() {
		return (pContinueStatement != null) ? pContinueStatement : (pContinueStatement = new ContinueStatementElements());
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}

	//ExitStatement:
	//	{ExitStatement} labels+=Label* "EXIT" labelName=ID? ("WHEN" whenExpression=Expression)? ";";
	public ExitStatementElements getExitStatementAccess() {
		return (pExitStatement != null) ? pExitStatement : (pExitStatement = new ExitStatementElements());
	}
	
	public ParserRule getExitStatementRule() {
		return getExitStatementAccess().getRule();
	}

	//FetchStatement:
	//	labels+=Label* "FETCH" cursor=VariableRef? intoClause=FetchStatementIntoClause ";";
	public FetchStatementElements getFetchStatementAccess() {
		return (pFetchStatement != null) ? pFetchStatement : (pFetchStatement = new FetchStatementElements());
	}
	
	public ParserRule getFetchStatementRule() {
		return getFetchStatementAccess().getRule();
	}

	//FetchStatementIntoClause:
	//	FetchStatementSingleIntoClause | FetchStatementBulkIntoClause;
	public FetchStatementIntoClauseElements getFetchStatementIntoClauseAccess() {
		return (pFetchStatementIntoClause != null) ? pFetchStatementIntoClause : (pFetchStatementIntoClause = new FetchStatementIntoClauseElements());
	}
	
	public ParserRule getFetchStatementIntoClauseRule() {
		return getFetchStatementIntoClauseAccess().getRule();
	}

	//FetchStatementSingleIntoClause:
	//	"INTO" targetVariables+=VariableRef+;
	public FetchStatementSingleIntoClauseElements getFetchStatementSingleIntoClauseAccess() {
		return (pFetchStatementSingleIntoClause != null) ? pFetchStatementSingleIntoClause : (pFetchStatementSingleIntoClause = new FetchStatementSingleIntoClauseElements());
	}
	
	public ParserRule getFetchStatementSingleIntoClauseRule() {
		return getFetchStatementSingleIntoClauseAccess().getRule();
	}

	//FetchStatementBulkIntoClause:
	//	"BULK" "COLLECT" "INTO" targetVariables+=VariableRef+ ("LIMIT" limitExpression=Expression)?;
	public FetchStatementBulkIntoClauseElements getFetchStatementBulkIntoClauseAccess() {
		return (pFetchStatementBulkIntoClause != null) ? pFetchStatementBulkIntoClause : (pFetchStatementBulkIntoClause = new FetchStatementBulkIntoClauseElements());
	}
	
	public ParserRule getFetchStatementBulkIntoClauseRule() {
		return getFetchStatementBulkIntoClauseAccess().getRule();
	}

	//GotoStatement:
	//	labels+=Label* "GOTO" labelName=[Label] ";";
	public GotoStatementElements getGotoStatementAccess() {
		return (pGotoStatement != null) ? pGotoStatement : (pGotoStatement = new GotoStatementElements());
	}
	
	public ParserRule getGotoStatementRule() {
		return getGotoStatementAccess().getRule();
	}

	//IfStatement:
	//	labels+=Label* "IF" expression=Expression "THEN" statements+=Statement+ elsifBranches+=IfStatementElsifBranch*
	//	elseBranch=IfStatementElseBranch? "END" "IF" ";";
	public IfStatementElements getIfStatementAccess() {
		return (pIfStatement != null) ? pIfStatement : (pIfStatement = new IfStatementElements());
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//IfStatementElsifBranch:
	//	"ELSIF" expression=Expression "THEN" statements+=Statement+;
	public IfStatementElsifBranchElements getIfStatementElsifBranchAccess() {
		return (pIfStatementElsifBranch != null) ? pIfStatementElsifBranch : (pIfStatementElsifBranch = new IfStatementElsifBranchElements());
	}
	
	public ParserRule getIfStatementElsifBranchRule() {
		return getIfStatementElsifBranchAccess().getRule();
	}

	//IfStatementElseBranch:
	//	"ELSE" statements+=Statement+;
	public IfStatementElseBranchElements getIfStatementElseBranchAccess() {
		return (pIfStatementElseBranch != null) ? pIfStatementElseBranch : (pIfStatementElseBranch = new IfStatementElseBranchElements());
	}
	
	public ParserRule getIfStatementElseBranchRule() {
		return getIfStatementElseBranchAccess().getRule();
	}

	//LoopStatement:
	//	BasicLoopStatement | WhileLoopStatement | ForLoopStatement;
	public LoopStatementElements getLoopStatementAccess() {
		return (pLoopStatement != null) ? pLoopStatement : (pLoopStatement = new LoopStatementElements());
	}
	
	public ParserRule getLoopStatementRule() {
		return getLoopStatementAccess().getRule();
	}

	//BasicLoopStatement:
	//	labels+=Label* "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";";
	public BasicLoopStatementElements getBasicLoopStatementAccess() {
		return (pBasicLoopStatement != null) ? pBasicLoopStatement : (pBasicLoopStatement = new BasicLoopStatementElements());
	}
	
	public ParserRule getBasicLoopStatementRule() {
		return getBasicLoopStatementAccess().getRule();
	}

	//WhileLoopStatement:
	//	labels+=Label* "WHILE" expression=Expression "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";";
	public WhileLoopStatementElements getWhileLoopStatementAccess() {
		return (pWhileLoopStatement != null) ? pWhileLoopStatement : (pWhileLoopStatement = new WhileLoopStatementElements());
	}
	
	public ParserRule getWhileLoopStatementRule() {
		return getWhileLoopStatementAccess().getRule();
	}

	//ForLoopStatement:
	//	labels+=Label* "FOR" indexVariable=LoopVariableDeclaration "IN" "REVERSE"? lowerBound=Expression ".."
	//	upperBound=Expression "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";";
	public ForLoopStatementElements getForLoopStatementAccess() {
		return (pForLoopStatement != null) ? pForLoopStatement : (pForLoopStatement = new ForLoopStatementElements());
	}
	
	public ParserRule getForLoopStatementRule() {
		return getForLoopStatementAccess().getRule();
	}

	//ReturnStatement:
	//	{ReturnStatement} labels+=Label* "RETURN" expression=Expression? ";";
	public ReturnStatementElements getReturnStatementAccess() {
		return (pReturnStatement != null) ? pReturnStatement : (pReturnStatement = new ReturnStatementElements());
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//NullStatement:
	//	{NullStatement} labels+=Label* "NULL" ";";
	public NullStatementElements getNullStatementAccess() {
		return (pNullStatement != null) ? pNullStatement : (pNullStatement = new NullStatementElements());
	}
	
	public ParserRule getNullStatementRule() {
		return getNullStatementAccess().getRule();
	}

	//RaiseStatement:
	//	{RaiseStatement} labels+=Label* "RAISE" exceptionName=ID? ";";
	public RaiseStatementElements getRaiseStatementAccess() {
		return (pRaiseStatement != null) ? pRaiseStatement : (pRaiseStatement = new RaiseStatementElements());
	}
	
	public ParserRule getRaiseStatementRule() {
		return getRaiseStatementAccess().getRule();
	}

	//VariableRef:
	//	isHostRef?=":"? name=QualifiedName;
	public VariableRefElements getVariableRefAccess() {
		return (pVariableRef != null) ? pVariableRef : (pVariableRef = new VariableRefElements());
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}

	//QualifiedName:
	//	names+=Name ("." names+=Name)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Name:
	//	declaration=[NameDeclaration];
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//LoopVariableDeclaration:
	//	name=ID;
	public LoopVariableDeclarationElements getLoopVariableDeclarationAccess() {
		return (pLoopVariableDeclaration != null) ? pLoopVariableDeclaration : (pLoopVariableDeclaration = new LoopVariableDeclarationElements());
	}
	
	public ParserRule getLoopVariableDeclarationRule() {
		return getLoopVariableDeclarationAccess().getRule();
	}

	//NameDeclaration:
	//	VariableDeclaration | ParameterDeclaration | Procedure | Function | Package | ProcedureDefinition |
	//	LoopVariableDeclaration;
	public NameDeclarationElements getNameDeclarationAccess() {
		return (pNameDeclaration != null) ? pNameDeclaration : (pNameDeclaration = new NameDeclarationElements());
	}
	
	public ParserRule getNameDeclarationRule() {
		return getNameDeclarationAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
