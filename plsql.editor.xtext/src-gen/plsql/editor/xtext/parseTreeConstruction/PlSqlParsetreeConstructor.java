/*
* generated by Xtext
*/
package plsql.editor.xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import plsql.editor.xtext.services.PlSqlGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class PlSqlParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private PlSqlGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompilationUnit_Alternatives(this, this, 0, inst);
			case 1: return new Procedure_Group(this, this, 1, inst);
			case 2: return new Package_Group(this, this, 2, inst);
			case 3: return new ProcedureDeclaration_Group(this, this, 3, inst);
			case 4: return new ProcedureDefinition_Group(this, this, 4, inst);
			case 5: return new Function_Group(this, this, 5, inst);
			case 6: return new ParameterSequence_Group(this, this, 6, inst);
			case 7: return new ParameterDeclaration_Group(this, this, 7, inst);
			case 8: return new ParameterValue_Group(this, this, 8, inst);
			case 9: return new ProcedureInvokerRightsClause_RightAssignment(this, this, 9, inst);
			case 10: return new FunctionInvokerRightsClause_RightAssignment(this, this, 10, inst);
			case 11: return new Pragma_Alternatives(this, this, 11, inst);
			case 12: return new PragmaRestrictReferences_Group(this, this, 12, inst);
			case 13: return new PragmaTimestamp_Group(this, this, 13, inst);
			case 14: return new ProcedureContent_Alternatives(this, this, 14, inst);
			case 15: return new ProcedureImplementation_Group(this, this, 15, inst);
			case 16: return new FunctionContent_FunctionImplementationParserRuleCall(this, this, 16, inst);
			case 17: return new FunctionImplementation_Group(this, this, 17, inst);
			case 18: return new FunctionClause_Alternatives(this, this, 18, inst);
			case 19: return new DeterministicClause_Group(this, this, 19, inst);
			case 20: return new ResultCacheClause_Group(this, this, 20, inst);
			case 21: return new PipelinedClause_Group(this, this, 21, inst);
			case 22: return new StatementBody_Group(this, this, 22, inst);
			case 23: return new DeclareSection_Group(this, this, 23, inst);
			case 24: return new Item_Alternatives(this, this, 24, inst);
			case 25: return new ItemDeclaration_VariableDeclarationParserRuleCall(this, this, 25, inst);
			case 26: return new ExternalProcedureDeclaration_Group(this, this, 26, inst);
			case 27: return new VariableDeclaration_Group(this, this, 27, inst);
			case 28: return new VariableValue_Group(this, this, 28, inst);
			case 29: return new Expression_Alternatives(this, this, 29, inst);
			case 30: return new IntLiteralExpression_ValueAssignment(this, this, 30, inst);
			case 31: return new StringLiteralExpression_ValueAssignment(this, this, 31, inst);
			case 32: return new BooleanLiteralExpression_ValueAssignment(this, this, 32, inst);
			case 33: return new NullLiteralExpression_Group(this, this, 33, inst);
			case 34: return new VariableRefExpression_VariableAssignment(this, this, 34, inst);
			case 35: return new Statement_Alternatives(this, this, 35, inst);
			case 36: return new Label_Group(this, this, 36, inst);
			case 37: return new AssignmentStatement_Group(this, this, 37, inst);
			case 38: return new AssignmentTarget_VariableAssignmentTargetParserRuleCall(this, this, 38, inst);
			case 39: return new VariableAssignmentTarget_VariableAssignment(this, this, 39, inst);
			case 40: return new BlockStatement_Group(this, this, 40, inst);
			case 41: return new CaseStatement_Group(this, this, 41, inst);
			case 42: return new CaseStatementWhenBranch_Group(this, this, 42, inst);
			case 43: return new CaseStatementElseBranch_Group(this, this, 43, inst);
			case 44: return new CloseStatement_Group(this, this, 44, inst);
			case 45: return new ContinueStatement_Group(this, this, 45, inst);
			case 46: return new ExitStatement_Group(this, this, 46, inst);
			case 47: return new FetchStatement_Group(this, this, 47, inst);
			case 48: return new FetchStatementIntoClause_Alternatives(this, this, 48, inst);
			case 49: return new FetchStatementSingleIntoClause_Group(this, this, 49, inst);
			case 50: return new FetchStatementBulkIntoClause_Group(this, this, 50, inst);
			case 51: return new GotoStatement_Group(this, this, 51, inst);
			case 52: return new IfStatement_Group(this, this, 52, inst);
			case 53: return new IfStatementElsifBranch_Group(this, this, 53, inst);
			case 54: return new IfStatementElseBranch_Group(this, this, 54, inst);
			case 55: return new LoopStatement_Alternatives(this, this, 55, inst);
			case 56: return new BasicLoopStatement_Group(this, this, 56, inst);
			case 57: return new WhileLoopStatement_Group(this, this, 57, inst);
			case 58: return new ForLoopStatement_Group(this, this, 58, inst);
			case 59: return new ReturnStatement_Group(this, this, 59, inst);
			case 60: return new NullStatement_Group(this, this, 60, inst);
			case 61: return new RaiseStatement_Group(this, this, 61, inst);
			case 62: return new VariableRef_Group(this, this, 62, inst);
			case 63: return new QualifiedName_Group(this, this, 63, inst);
			case 64: return new Name_DeclarationAssignment(this, this, 64, inst);
			case 65: return new LoopVariableDeclaration_NameAssignment(this, this, 65, inst);
			case 66: return new NameDeclaration_Alternatives(this, this, 66, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule CompilationUnit ****************
 *
 * CompilationUnit:
 * 	Procedure | Function | Package;
 *
 **/

// Procedure | Function | Package
protected class CompilationUnit_Alternatives extends AlternativesToken {

	public CompilationUnit_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCompilationUnitAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompilationUnit_ProcedureParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CompilationUnit_FunctionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new CompilationUnit_PackageParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunctionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPackageRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProcedureRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Procedure
protected class CompilationUnit_ProcedureParserRuleCall_0 extends RuleCallToken {
	
	public CompilationUnit_ProcedureParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompilationUnitAccess().getProcedureParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Procedure_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcedureRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Procedure_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Function
protected class CompilationUnit_FunctionParserRuleCall_1 extends RuleCallToken {
	
	public CompilationUnit_FunctionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompilationUnitAccess().getFunctionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunctionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Function_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Package
protected class CompilationUnit_PackageParserRuleCall_2 extends RuleCallToken {
	
	public CompilationUnit_PackageParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompilationUnitAccess().getPackageParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Package_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPackageRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Package_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule CompilationUnit ****************/


/************ begin Rule Procedure ****************
 *
 * Procedure:
 * 	"PROCEDURE" (schemaName=ID ".")? name=ID ("(" parameters=ParameterSequence ")")?
 * 	invokerRights=ProcedureInvokerRightsClause? ("IS" | "AS") content=ProcedureContent;
 *
 **/

// "PROCEDURE" (schemaName=ID ".")? name=ID ("(" parameters=ParameterSequence ")")?
// invokerRights=ProcedureInvokerRightsClause? ("IS" | "AS") content=ProcedureContent
protected class Procedure_Group extends GroupToken {
	
	public Procedure_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Procedure_ContentAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcedureRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "PROCEDURE"
protected class Procedure_PROCEDUREKeyword_0 extends KeywordToken  {
	
	public Procedure_PROCEDUREKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureAccess().getPROCEDUREKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// (schemaName=ID ".")?
protected class Procedure_Group_1 extends GroupToken {
	
	public Procedure_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Procedure_FullStopKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// schemaName=ID
protected class Procedure_SchemaNameAssignment_1_0 extends AssignmentToken  {
	
	public Procedure_SchemaNameAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureAccess().getSchemaNameAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Procedure_PROCEDUREKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("schemaName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("schemaName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcedureAccess().getSchemaNameIDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcedureAccess().getSchemaNameIDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class Procedure_FullStopKeyword_1_1 extends KeywordToken  {
	
	public Procedure_FullStopKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureAccess().getFullStopKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Procedure_SchemaNameAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// name=ID
protected class Procedure_NameAssignment_2 extends AssignmentToken  {
	
	public Procedure_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Procedure_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Procedure_PROCEDUREKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("(" parameters=ParameterSequence ")")?
protected class Procedure_Group_3 extends GroupToken {
	
	public Procedure_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Procedure_RightParenthesisKeyword_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class Procedure_LeftParenthesisKeyword_3_0 extends KeywordToken  {
	
	public Procedure_LeftParenthesisKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Procedure_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parameters=ParameterSequence
protected class Procedure_ParametersAssignment_3_1 extends AssignmentToken  {
	
	public Procedure_ParametersAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureAccess().getParametersAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterSequence_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterSequenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcedureAccess().getParametersParameterSequenceParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Procedure_LeftParenthesisKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Procedure_RightParenthesisKeyword_3_2 extends KeywordToken  {
	
	public Procedure_RightParenthesisKeyword_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureAccess().getRightParenthesisKeyword_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Procedure_ParametersAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// invokerRights=ProcedureInvokerRightsClause?
protected class Procedure_InvokerRightsAssignment_4 extends AssignmentToken  {
	
	public Procedure_InvokerRightsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureAccess().getInvokerRightsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureInvokerRightsClause_RightAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("invokerRights",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("invokerRights");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcedureInvokerRightsClauseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcedureAccess().getInvokerRightsProcedureInvokerRightsClauseParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Procedure_Group_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Procedure_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "IS" | "AS"
protected class Procedure_Alternatives_5 extends AlternativesToken {

	public Procedure_Alternatives_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcedureAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Procedure_ISKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "IS"
protected class Procedure_ISKeyword_5_0 extends KeywordToken  {
	
	public Procedure_ISKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureAccess().getISKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Procedure_InvokerRightsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Procedure_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Procedure_NameAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


// content=ProcedureContent
protected class Procedure_ContentAssignment_6 extends AssignmentToken  {
	
	public Procedure_ContentAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureAccess().getContentAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureContent_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("content",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("content");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcedureContentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcedureAccess().getContentProcedureContentParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Procedure_Alternatives_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Procedure ****************/


/************ begin Rule Package ****************
 *
 * Package:
 * 	"PACKAGE" (schemaName=ID ".")? name=ID invokerRights=ProcedureInvokerRightsClause? ("IS" | "AS") items+=Item* "END"
 * 	endName=ID? ";";
 *
 **/

// "PACKAGE" (schemaName=ID ".")? name=ID invokerRights=ProcedureInvokerRightsClause? ("IS" | "AS") items+=Item* "END"
// endName=ID? ";"
protected class Package_Group extends GroupToken {
	
	public Package_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPackageAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Package_SemicolonKeyword_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPackageRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "PACKAGE"
protected class Package_PACKAGEKeyword_0 extends KeywordToken  {
	
	public Package_PACKAGEKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPackageAccess().getPACKAGEKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// (schemaName=ID ".")?
protected class Package_Group_1 extends GroupToken {
	
	public Package_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPackageAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Package_FullStopKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// schemaName=ID
protected class Package_SchemaNameAssignment_1_0 extends AssignmentToken  {
	
	public Package_SchemaNameAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPackageAccess().getSchemaNameAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Package_PACKAGEKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("schemaName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("schemaName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPackageAccess().getSchemaNameIDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPackageAccess().getSchemaNameIDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class Package_FullStopKeyword_1_1 extends KeywordToken  {
	
	public Package_FullStopKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPackageAccess().getFullStopKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Package_SchemaNameAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// name=ID
protected class Package_NameAssignment_2 extends AssignmentToken  {
	
	public Package_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPackageAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Package_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Package_PACKAGEKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// invokerRights=ProcedureInvokerRightsClause?
protected class Package_InvokerRightsAssignment_3 extends AssignmentToken  {
	
	public Package_InvokerRightsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPackageAccess().getInvokerRightsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureInvokerRightsClause_RightAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("invokerRights",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("invokerRights");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcedureInvokerRightsClauseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPackageAccess().getInvokerRightsProcedureInvokerRightsClauseParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Package_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "IS" | "AS"
protected class Package_Alternatives_4 extends AlternativesToken {

	public Package_Alternatives_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPackageAccess().getAlternatives_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Package_ISKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "IS"
protected class Package_ISKeyword_4_0 extends KeywordToken  {
	
	public Package_ISKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPackageAccess().getISKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Package_InvokerRightsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Package_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// items+=Item*
protected class Package_ItemsAssignment_5 extends AssignmentToken  {
	
	public Package_ItemsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPackageAccess().getItemsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Item_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("items",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("items");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getItemRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPackageAccess().getItemsItemParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Package_ItemsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Package_Alternatives_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "END"
protected class Package_ENDKeyword_6 extends KeywordToken  {
	
	public Package_ENDKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPackageAccess().getENDKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Package_ItemsAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Package_Alternatives_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// endName=ID?
protected class Package_EndNameAssignment_7 extends AssignmentToken  {
	
	public Package_EndNameAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPackageAccess().getEndNameAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Package_ENDKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("endName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("endName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPackageAccess().getEndNameIDTerminalRuleCall_7_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPackageAccess().getEndNameIDTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Package_SemicolonKeyword_8 extends KeywordToken  {
	
	public Package_SemicolonKeyword_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPackageAccess().getSemicolonKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Package_EndNameAssignment_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Package_ENDKeyword_6(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Package ****************/


/************ begin Rule ProcedureDeclaration ****************
 *
 * ProcedureDeclaration:
 * 	"PROCEDURE" name=ID ("(" parameters=ParameterSequence ")")? ";";
 *
 **/

// "PROCEDURE" name=ID ("(" parameters=ParameterSequence ")")? ";"
protected class ProcedureDeclaration_Group extends GroupToken {
	
	public ProcedureDeclaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDeclaration_SemicolonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcedureDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "PROCEDURE"
protected class ProcedureDeclaration_PROCEDUREKeyword_0 extends KeywordToken  {
	
	public ProcedureDeclaration_PROCEDUREKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureDeclarationAccess().getPROCEDUREKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class ProcedureDeclaration_NameAssignment_1 extends AssignmentToken  {
	
	public ProcedureDeclaration_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureDeclarationAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDeclaration_PROCEDUREKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcedureDeclarationAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcedureDeclarationAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("(" parameters=ParameterSequence ")")?
protected class ProcedureDeclaration_Group_2 extends GroupToken {
	
	public ProcedureDeclaration_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureDeclarationAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDeclaration_RightParenthesisKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class ProcedureDeclaration_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public ProcedureDeclaration_LeftParenthesisKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureDeclarationAccess().getLeftParenthesisKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDeclaration_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parameters=ParameterSequence
protected class ProcedureDeclaration_ParametersAssignment_2_1 extends AssignmentToken  {
	
	public ProcedureDeclaration_ParametersAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureDeclarationAccess().getParametersAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterSequence_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterSequenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcedureDeclarationAccess().getParametersParameterSequenceParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcedureDeclaration_LeftParenthesisKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ProcedureDeclaration_RightParenthesisKeyword_2_2 extends KeywordToken  {
	
	public ProcedureDeclaration_RightParenthesisKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureDeclarationAccess().getRightParenthesisKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDeclaration_ParametersAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ";"
protected class ProcedureDeclaration_SemicolonKeyword_3 extends KeywordToken  {
	
	public ProcedureDeclaration_SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDeclaration_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcedureDeclaration_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ProcedureDeclaration ****************/


/************ begin Rule ProcedureDefinition ****************
 *
 * ProcedureDefinition:
 * 	"PROCEDURE" name=ID ("(" parameters=ParameterSequence ")")? ("IS" // TODO: USING branch
 * 	| "AS") implementation=ProcedureImplementation;
 *
 **/

// "PROCEDURE" name=ID ("(" parameters=ParameterSequence ")")? ("IS" // TODO: USING branch
// | "AS") implementation=ProcedureImplementation
protected class ProcedureDefinition_Group extends GroupToken {
	
	public ProcedureDefinition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDefinition_ImplementationAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcedureDefinitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "PROCEDURE"
protected class ProcedureDefinition_PROCEDUREKeyword_0 extends KeywordToken  {
	
	public ProcedureDefinition_PROCEDUREKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureDefinitionAccess().getPROCEDUREKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class ProcedureDefinition_NameAssignment_1 extends AssignmentToken  {
	
	public ProcedureDefinition_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureDefinitionAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDefinition_PROCEDUREKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProcedureDefinitionAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProcedureDefinitionAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("(" parameters=ParameterSequence ")")?
protected class ProcedureDefinition_Group_2 extends GroupToken {
	
	public ProcedureDefinition_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureDefinitionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDefinition_RightParenthesisKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class ProcedureDefinition_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public ProcedureDefinition_LeftParenthesisKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureDefinitionAccess().getLeftParenthesisKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDefinition_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parameters=ParameterSequence
protected class ProcedureDefinition_ParametersAssignment_2_1 extends AssignmentToken  {
	
	public ProcedureDefinition_ParametersAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureDefinitionAccess().getParametersAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterSequence_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterSequenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcedureDefinitionAccess().getParametersParameterSequenceParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcedureDefinition_LeftParenthesisKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ProcedureDefinition_RightParenthesisKeyword_2_2 extends KeywordToken  {
	
	public ProcedureDefinition_RightParenthesisKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureDefinitionAccess().getRightParenthesisKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDefinition_ParametersAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "IS" // TODO: USING branch
// | "AS"
protected class ProcedureDefinition_Alternatives_3 extends AlternativesToken {

	public ProcedureDefinition_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcedureDefinitionAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDefinition_ISKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "IS"
protected class ProcedureDefinition_ISKeyword_3_0 extends KeywordToken  {
	
	public ProcedureDefinition_ISKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProcedureDefinitionAccess().getISKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDefinition_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcedureDefinition_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// implementation=ProcedureImplementation
protected class ProcedureDefinition_ImplementationAssignment_4 extends AssignmentToken  {
	
	public ProcedureDefinition_ImplementationAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureDefinitionAccess().getImplementationAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureImplementation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("implementation",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("implementation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProcedureImplementationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcedureDefinitionAccess().getImplementationProcedureImplementationParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcedureDefinition_Alternatives_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ProcedureDefinition ****************/


/************ begin Rule Function ****************
 *
 * Function:
 * 	"FUNCTION" (schemaName=ID ".")? name=ID ("(" parameters=ParameterSequence ")")? "RETURN" returnType=DataType
 * 	functionClauses+=FunctionClause ("IS" | "AS") content=FunctionContent;
 *
 **/

// "FUNCTION" (schemaName=ID ".")? name=ID ("(" parameters=ParameterSequence ")")? "RETURN" returnType=DataType
// functionClauses+=FunctionClause ("IS" | "AS") content=FunctionContent
protected class Function_Group extends GroupToken {
	
	public Function_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_ContentAssignment_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunctionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "FUNCTION"
protected class Function_FUNCTIONKeyword_0 extends KeywordToken  {
	
	public Function_FUNCTIONKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getFUNCTIONKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// (schemaName=ID ".")?
protected class Function_Group_1 extends GroupToken {
	
	public Function_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_FullStopKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// schemaName=ID
protected class Function_SchemaNameAssignment_1_0 extends AssignmentToken  {
	
	public Function_SchemaNameAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getSchemaNameAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_FUNCTIONKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("schemaName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("schemaName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFunctionAccess().getSchemaNameIDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFunctionAccess().getSchemaNameIDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "."
protected class Function_FullStopKeyword_1_1 extends KeywordToken  {
	
	public Function_FullStopKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getFullStopKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_SchemaNameAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// name=ID
protected class Function_NameAssignment_2 extends AssignmentToken  {
	
	public Function_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Function_FUNCTIONKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("(" parameters=ParameterSequence ")")?
protected class Function_Group_3 extends GroupToken {
	
	public Function_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_RightParenthesisKeyword_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class Function_LeftParenthesisKeyword_3_0 extends KeywordToken  {
	
	public Function_LeftParenthesisKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parameters=ParameterSequence
protected class Function_ParametersAssignment_3_1 extends AssignmentToken  {
	
	public Function_ParametersAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getParametersAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterSequence_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterSequenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunctionAccess().getParametersParameterSequenceParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_LeftParenthesisKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Function_RightParenthesisKeyword_3_2 extends KeywordToken  {
	
	public Function_RightParenthesisKeyword_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_ParametersAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "RETURN"
protected class Function_RETURNKeyword_4 extends KeywordToken  {
	
	public Function_RETURNKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getRETURNKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Function_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// returnType=DataType
protected class Function_ReturnTypeAssignment_5 extends AssignmentToken  {
	
	public Function_ReturnTypeAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getReturnTypeAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_RETURNKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnType");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFunctionAccess().getReturnTypeDataTypeParserRuleCall_5_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFunctionAccess().getReturnTypeDataTypeParserRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// functionClauses+=FunctionClause
protected class Function_FunctionClausesAssignment_6 extends AssignmentToken  {
	
	public Function_FunctionClausesAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getFunctionClausesAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionClause_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("functionClauses",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("functionClauses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionClauseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunctionAccess().getFunctionClausesFunctionClauseParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_ReturnTypeAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "IS" | "AS"
protected class Function_Alternatives_7 extends AlternativesToken {

	public Function_Alternatives_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFunctionAccess().getAlternatives_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_ISKeyword_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "IS"
protected class Function_ISKeyword_7_0 extends KeywordToken  {
	
	public Function_ISKeyword_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionAccess().getISKeyword_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_FunctionClausesAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// content=FunctionContent
protected class Function_ContentAssignment_8 extends AssignmentToken  {
	
	public Function_ContentAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionAccess().getContentAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionContent_FunctionImplementationParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("content",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("content");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionContentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunctionAccess().getContentFunctionContentParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Function_Alternatives_7(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Function ****************/


/************ begin Rule ParameterSequence ****************
 *
 * ParameterSequence:
 * 	parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*;
 *
 **/

// parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*
protected class ParameterSequence_Group extends GroupToken {
	
	public ParameterSequence_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterSequenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterSequence_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterSequence_ParametersAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameterSequenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// parameters+=ParameterDeclaration
protected class ParameterSequence_ParametersAssignment_0 extends AssignmentToken  {
	
	public ParameterSequence_ParametersAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterSequenceAccess().getParametersAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterSequenceAccess().getParametersParameterDeclarationParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ("," parameters+=ParameterDeclaration)*
protected class ParameterSequence_Group_1 extends GroupToken {
	
	public ParameterSequence_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterSequenceAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterSequence_ParametersAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ParameterSequence_CommaKeyword_1_0 extends KeywordToken  {
	
	public ParameterSequence_CommaKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterSequenceAccess().getCommaKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterSequence_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterSequence_ParametersAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters+=ParameterDeclaration
protected class ParameterSequence_ParametersAssignment_1_1 extends AssignmentToken  {
	
	public ParameterSequence_ParametersAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterSequenceAccess().getParametersAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterSequenceAccess().getParametersParameterDeclarationParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterSequence_CommaKeyword_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ParameterSequence ****************/


/************ begin Rule ParameterDeclaration ****************
 *
 * ParameterDeclaration:
 * 	name=ID behavior=ParameterBehavior? dataType=DataType value=ParameterValue?;
 *
 **/

// name=ID behavior=ParameterBehavior? dataType=DataType value=ParameterValue?
protected class ParameterDeclaration_Group extends GroupToken {
	
	public ParameterDeclaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_ValueAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterDeclaration_DataTypeAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameterDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class ParameterDeclaration_NameAssignment_0 extends AssignmentToken  {
	
	public ParameterDeclaration_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// behavior=ParameterBehavior?
protected class ParameterDeclaration_BehaviorAssignment_1 extends AssignmentToken  {
	
	public ParameterDeclaration_BehaviorAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationAccess().getBehaviorAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("behavior",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("behavior");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getParameterDeclarationAccess().getBehaviorParameterBehaviorParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getParameterDeclarationAccess().getBehaviorParameterBehaviorParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// dataType=DataType
protected class ParameterDeclaration_DataTypeAssignment_2 extends AssignmentToken  {
	
	public ParameterDeclaration_DataTypeAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationAccess().getDataTypeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_BehaviorAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterDeclaration_NameAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dataType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dataType");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getParameterDeclarationAccess().getDataTypeDataTypeParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getParameterDeclarationAccess().getDataTypeDataTypeParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// value=ParameterValue?
protected class ParameterDeclaration_ValueAssignment_3 extends AssignmentToken  {
	
	public ParameterDeclaration_ValueAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDeclarationAccess().getValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterValue_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterValueRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterDeclarationAccess().getValueParameterValueParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterDeclaration_DataTypeAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ParameterDeclaration ****************/


/************ begin Rule ParameterValue ****************
 *
 * ParameterValue:
 * 	(":=" | "DEFAULT") expression=Expression;
 *
 **/

// (":=" | "DEFAULT") expression=Expression
protected class ParameterValue_Group extends GroupToken {
	
	public ParameterValue_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterValueAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterValue_ExpressionAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameterValueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ":=" | "DEFAULT"
protected class ParameterValue_Alternatives_0 extends AlternativesToken {

	public ParameterValue_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getParameterValueAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterValue_ColonEqualsSignKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":="
protected class ParameterValue_ColonEqualsSignKeyword_0_0 extends KeywordToken  {
	
	public ParameterValue_ColonEqualsSignKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterValueAccess().getColonEqualsSignKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}


// expression=Expression
protected class ParameterValue_ExpressionAssignment_1 extends AssignmentToken  {
	
	public ParameterValue_ExpressionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterValueAccess().getExpressionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterValueAccess().getExpressionExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterValue_Alternatives_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ParameterValue ****************/



/************ begin Rule ProcedureInvokerRightsClause ****************
 *
 * ProcedureInvokerRightsClause:
 * 	right=InvokerRight;
 *
 **/

// right=InvokerRight
protected class ProcedureInvokerRightsClause_RightAssignment extends AssignmentToken  {
	
	public ProcedureInvokerRightsClause_RightAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureInvokerRightsClauseAccess().getRightAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcedureInvokerRightsClauseRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getProcedureInvokerRightsClauseAccess().getRightInvokerRightEnumRuleCall_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getProcedureInvokerRightsClauseAccess().getRightInvokerRightEnumRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule ProcedureInvokerRightsClause ****************/


/************ begin Rule FunctionInvokerRightsClause ****************
 *
 * FunctionInvokerRightsClause:
 * 	right=InvokerRight;
 *
 **/

// right=InvokerRight
protected class FunctionInvokerRightsClause_RightAssignment extends AssignmentToken  {
	
	public FunctionInvokerRightsClause_RightAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionInvokerRightsClauseAccess().getRightAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunctionInvokerRightsClauseRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getFunctionInvokerRightsClauseAccess().getRightInvokerRightEnumRuleCall_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getFunctionInvokerRightsClauseAccess().getRightInvokerRightEnumRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule FunctionInvokerRightsClause ****************/


/************ begin Rule Pragma ****************
 *
 * Pragma:
 * 	PragmaRestrictReferences | PragmaTimestamp;
 *
 **/

// PragmaRestrictReferences | PragmaTimestamp
protected class Pragma_Alternatives extends AlternativesToken {

	public Pragma_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPragmaAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Pragma_PragmaRestrictReferencesParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Pragma_PragmaTimestampParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPragmaRestrictReferencesRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPragmaTimestampRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PragmaRestrictReferences
protected class Pragma_PragmaRestrictReferencesParserRuleCall_0 extends RuleCallToken {
	
	public Pragma_PragmaRestrictReferencesParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPragmaAccess().getPragmaRestrictReferencesParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaRestrictReferences_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPragmaRestrictReferencesRule().getType().getClassifier())
			return null;
		if(checkForRecursion(PragmaRestrictReferences_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// PragmaTimestamp
protected class Pragma_PragmaTimestampParserRuleCall_1 extends RuleCallToken {
	
	public Pragma_PragmaTimestampParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPragmaAccess().getPragmaTimestampParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaTimestamp_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPragmaTimestampRule().getType().getClassifier())
			return null;
		if(checkForRecursion(PragmaTimestamp_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Pragma ****************/


/************ begin Rule PragmaRestrictReferences ****************
 *
 * PragmaRestrictReferences:
 * 	"PRAGMA" "RESTRICT_REFERENCES" "(" (SubprogramName | "DEFAULT") "," restrictions+=PragmaRestrictReferencesRestriction
 * 	("," restrictions+=PragmaRestrictReferencesRestriction)* ")" ";";
 *
 **/

// "PRAGMA" "RESTRICT_REFERENCES" "(" (SubprogramName | "DEFAULT") "," restrictions+=PragmaRestrictReferencesRestriction
// ("," restrictions+=PragmaRestrictReferencesRestriction)* ")" ";"
protected class PragmaRestrictReferences_Group extends GroupToken {
	
	public PragmaRestrictReferences_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPragmaRestrictReferencesAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaRestrictReferences_SemicolonKeyword_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPragmaRestrictReferencesRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "PRAGMA"
protected class PragmaRestrictReferences_PRAGMAKeyword_0 extends KeywordToken  {
	
	public PragmaRestrictReferences_PRAGMAKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPragmaRestrictReferencesAccess().getPRAGMAKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "RESTRICT_REFERENCES"
protected class PragmaRestrictReferences_RESTRICT_REFERENCESKeyword_1 extends KeywordToken  {
	
	public PragmaRestrictReferences_RESTRICT_REFERENCESKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPragmaRestrictReferencesAccess().getRESTRICT_REFERENCESKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaRestrictReferences_PRAGMAKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class PragmaRestrictReferences_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public PragmaRestrictReferences_LeftParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPragmaRestrictReferencesAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaRestrictReferences_RESTRICT_REFERENCESKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SubprogramName | "DEFAULT"
protected class PragmaRestrictReferences_Alternatives_3 extends AlternativesToken {

	public PragmaRestrictReferences_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPragmaRestrictReferencesAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaRestrictReferences_SubprogramNameParserRuleCall_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SubprogramName
protected class PragmaRestrictReferences_SubprogramNameParserRuleCall_3_0 extends UnassignedTextToken {

	public PragmaRestrictReferences_SubprogramNameParserRuleCall_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPragmaRestrictReferencesAccess().getSubprogramNameParserRuleCall_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaRestrictReferences_LeftParenthesisKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ","
protected class PragmaRestrictReferences_CommaKeyword_4 extends KeywordToken  {
	
	public PragmaRestrictReferences_CommaKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPragmaRestrictReferencesAccess().getCommaKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaRestrictReferences_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// restrictions+=PragmaRestrictReferencesRestriction
protected class PragmaRestrictReferences_RestrictionsAssignment_5 extends AssignmentToken  {
	
	public PragmaRestrictReferences_RestrictionsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaRestrictReferences_CommaKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("restrictions",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("restrictions");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_5_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// ("," restrictions+=PragmaRestrictReferencesRestriction)*
protected class PragmaRestrictReferences_Group_6 extends GroupToken {
	
	public PragmaRestrictReferences_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPragmaRestrictReferencesAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaRestrictReferences_RestrictionsAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class PragmaRestrictReferences_CommaKeyword_6_0 extends KeywordToken  {
	
	public PragmaRestrictReferences_CommaKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPragmaRestrictReferencesAccess().getCommaKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaRestrictReferences_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PragmaRestrictReferences_RestrictionsAssignment_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// restrictions+=PragmaRestrictReferencesRestriction
protected class PragmaRestrictReferences_RestrictionsAssignment_6_1 extends AssignmentToken  {
	
	public PragmaRestrictReferences_RestrictionsAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaRestrictReferences_CommaKeyword_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("restrictions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("restrictions");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_6_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getPragmaRestrictReferencesAccess().getRestrictionsPragmaRestrictReferencesRestrictionParserRuleCall_6_1_0();
			return obj;
		}
		return null;
	}

}


// ")"
protected class PragmaRestrictReferences_RightParenthesisKeyword_7 extends KeywordToken  {
	
	public PragmaRestrictReferences_RightParenthesisKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPragmaRestrictReferencesAccess().getRightParenthesisKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaRestrictReferences_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PragmaRestrictReferences_RestrictionsAssignment_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ";"
protected class PragmaRestrictReferences_SemicolonKeyword_8 extends KeywordToken  {
	
	public PragmaRestrictReferences_SemicolonKeyword_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPragmaRestrictReferencesAccess().getSemicolonKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaRestrictReferences_RightParenthesisKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule PragmaRestrictReferences ****************/




/************ begin Rule PragmaTimestamp ****************
 *
 * PragmaTimestamp:
 * 	"PRAGMA" "TIMESTAMP" "(" timestamp=STRING ")" ";";
 *
 **/

// "PRAGMA" "TIMESTAMP" "(" timestamp=STRING ")" ";"
protected class PragmaTimestamp_Group extends GroupToken {
	
	public PragmaTimestamp_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPragmaTimestampAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaTimestamp_SemicolonKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPragmaTimestampRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "PRAGMA"
protected class PragmaTimestamp_PRAGMAKeyword_0 extends KeywordToken  {
	
	public PragmaTimestamp_PRAGMAKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPragmaTimestampAccess().getPRAGMAKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "TIMESTAMP"
protected class PragmaTimestamp_TIMESTAMPKeyword_1 extends KeywordToken  {
	
	public PragmaTimestamp_TIMESTAMPKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPragmaTimestampAccess().getTIMESTAMPKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaTimestamp_PRAGMAKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class PragmaTimestamp_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public PragmaTimestamp_LeftParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPragmaTimestampAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaTimestamp_TIMESTAMPKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// timestamp=STRING
protected class PragmaTimestamp_TimestampAssignment_3 extends AssignmentToken  {
	
	public PragmaTimestamp_TimestampAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPragmaTimestampAccess().getTimestampAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaTimestamp_LeftParenthesisKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("timestamp",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("timestamp");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPragmaTimestampAccess().getTimestampSTRINGTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPragmaTimestampAccess().getTimestampSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ")"
protected class PragmaTimestamp_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public PragmaTimestamp_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPragmaTimestampAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaTimestamp_TimestampAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ";"
protected class PragmaTimestamp_SemicolonKeyword_5 extends KeywordToken  {
	
	public PragmaTimestamp_SemicolonKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPragmaTimestampAccess().getSemicolonKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PragmaTimestamp_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule PragmaTimestamp ****************/



/************ begin Rule ProcedureContent ****************
 *
 * ProcedureContent:
 * 	ProcedureImplementation // TODO | CallSpecification
 * 	| ExternalProcedureDeclaration;
 *
 **/

// ProcedureImplementation // TODO | CallSpecification
// | ExternalProcedureDeclaration
protected class ProcedureContent_Alternatives extends AlternativesToken {

	public ProcedureContent_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getProcedureContentAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureContent_ProcedureImplementationParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProcedureContent_ExternalProcedureDeclarationParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExternalProcedureDeclarationAccess().getExternalProcedureDeclarationAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProcedureImplementationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ProcedureImplementation
protected class ProcedureContent_ProcedureImplementationParserRuleCall_0 extends RuleCallToken {
	
	public ProcedureContent_ProcedureImplementationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcedureContentAccess().getProcedureImplementationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureImplementation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcedureImplementationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ProcedureImplementation_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ExternalProcedureDeclaration
protected class ProcedureContent_ExternalProcedureDeclarationParserRuleCall_1 extends RuleCallToken {
	
	public ProcedureContent_ExternalProcedureDeclarationParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getProcedureContentAccess().getExternalProcedureDeclarationParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExternalProcedureDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExternalProcedureDeclarationAccess().getExternalProcedureDeclarationAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ExternalProcedureDeclaration_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ProcedureContent ****************/


/************ begin Rule ProcedureImplementation ****************
 *
 * ProcedureImplementation:
 * 	declareSection=DeclareSection? body=StatementBody;
 *
 **/

// declareSection=DeclareSection? body=StatementBody
protected class ProcedureImplementation_Group extends GroupToken {
	
	public ProcedureImplementation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProcedureImplementationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureImplementation_BodyAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcedureImplementationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// declareSection=DeclareSection?
protected class ProcedureImplementation_DeclareSectionAssignment_0 extends AssignmentToken  {
	
	public ProcedureImplementation_DeclareSectionAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureImplementationAccess().getDeclareSectionAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DeclareSection_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareSection",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareSection");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclareSectionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcedureImplementationAccess().getDeclareSectionDeclareSectionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// body=StatementBody
protected class ProcedureImplementation_BodyAssignment_1 extends AssignmentToken  {
	
	public ProcedureImplementation_BodyAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProcedureImplementationAccess().getBodyAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProcedureImplementationAccess().getBodyStatementBodyParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProcedureImplementation_DeclareSectionAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule ProcedureImplementation ****************/


/************ begin Rule FunctionContent ****************
 *
 * // TODO | CallSpecification
 * FunctionContent:
 * 	FunctionImplementation;
 *
 **/

// FunctionImplementation
protected class FunctionContent_FunctionImplementationParserRuleCall extends RuleCallToken {
	
	public FunctionContent_FunctionImplementationParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFunctionContentAccess().getFunctionImplementationParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionImplementation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunctionImplementationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FunctionImplementation_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule FunctionContent ****************/


/************ begin Rule FunctionImplementation ****************
 *
 * FunctionImplementation:
 * 	declareSection=DeclareSection? body=StatementBody;
 *
 **/

// declareSection=DeclareSection? body=StatementBody
protected class FunctionImplementation_Group extends GroupToken {
	
	public FunctionImplementation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionImplementationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionImplementation_BodyAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunctionImplementationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// declareSection=DeclareSection?
protected class FunctionImplementation_DeclareSectionAssignment_0 extends AssignmentToken  {
	
	public FunctionImplementation_DeclareSectionAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionImplementationAccess().getDeclareSectionAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DeclareSection_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareSection",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareSection");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclareSectionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunctionImplementationAccess().getDeclareSectionDeclareSectionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// body=StatementBody
protected class FunctionImplementation_BodyAssignment_1 extends AssignmentToken  {
	
	public FunctionImplementation_BodyAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionImplementationAccess().getBodyAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunctionImplementationAccess().getBodyStatementBodyParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionImplementation_DeclareSectionAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule FunctionImplementation ****************/


/************ begin Rule FunctionClause ****************
 *
 * FunctionClause:
 * 	FunctionInvokerRightsClause // TODO | ParallelEnableClause
 * 	| DeterministicClause | ResultCacheClause | PipelinedClause;
 *
 **/

// FunctionInvokerRightsClause // TODO | ParallelEnableClause
// | DeterministicClause | ResultCacheClause | PipelinedClause
protected class FunctionClause_Alternatives extends AlternativesToken {

	public FunctionClause_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFunctionClauseAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionClause_FunctionInvokerRightsClauseParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FunctionClause_DeterministicClauseParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new FunctionClause_ResultCacheClauseParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new FunctionClause_PipelinedClauseParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDeterministicClauseAccess().getDeterministicClauseAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionInvokerRightsClauseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPipelinedClauseAccess().getPipelinedClauseAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getResultCacheClauseAccess().getResultCacheClauseAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// FunctionInvokerRightsClause
protected class FunctionClause_FunctionInvokerRightsClauseParserRuleCall_0 extends RuleCallToken {
	
	public FunctionClause_FunctionInvokerRightsClauseParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFunctionClauseAccess().getFunctionInvokerRightsClauseParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionInvokerRightsClause_RightAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunctionInvokerRightsClauseRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FunctionInvokerRightsClause_RightAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// DeterministicClause
protected class FunctionClause_DeterministicClauseParserRuleCall_1 extends RuleCallToken {
	
	public FunctionClause_DeterministicClauseParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFunctionClauseAccess().getDeterministicClauseParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DeterministicClause_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDeterministicClauseAccess().getDeterministicClauseAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(DeterministicClause_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ResultCacheClause
protected class FunctionClause_ResultCacheClauseParserRuleCall_2 extends RuleCallToken {
	
	public FunctionClause_ResultCacheClauseParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFunctionClauseAccess().getResultCacheClauseParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResultCacheClause_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getResultCacheClauseAccess().getResultCacheClauseAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ResultCacheClause_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// PipelinedClause
protected class FunctionClause_PipelinedClauseParserRuleCall_3 extends RuleCallToken {
	
	public FunctionClause_PipelinedClauseParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFunctionClauseAccess().getPipelinedClauseParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PipelinedClause_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPipelinedClauseAccess().getPipelinedClauseAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(PipelinedClause_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule FunctionClause ****************/


/************ begin Rule DeterministicClause ****************
 *
 * DeterministicClause:
 * 	{DeterministicClause} "DETERMINISTIC";
 *
 **/

// {DeterministicClause} "DETERMINISTIC"
protected class DeterministicClause_Group extends GroupToken {
	
	public DeterministicClause_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeterministicClauseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DeterministicClause_DETERMINISTICKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDeterministicClauseAccess().getDeterministicClauseAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {DeterministicClause}
protected class DeterministicClause_DeterministicClauseAction_0 extends ActionToken  {

	public DeterministicClause_DeterministicClauseAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDeterministicClauseAccess().getDeterministicClauseAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "DETERMINISTIC"
protected class DeterministicClause_DETERMINISTICKeyword_1 extends KeywordToken  {
	
	public DeterministicClause_DETERMINISTICKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeterministicClauseAccess().getDETERMINISTICKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DeterministicClause_DeterministicClauseAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule DeterministicClause ****************/


/************ begin Rule ResultCacheClause ****************
 *
 * ResultCacheClause:
 * 	{ResultCacheClause} "RESULT_CACHE" ("RELIES_ON" "(" (dataSources+=ID ("," dataSources+=ID))? ")")?;
 *
 **/

// {ResultCacheClause} "RESULT_CACHE" ("RELIES_ON" "(" (dataSources+=ID ("," dataSources+=ID))? ")")?
protected class ResultCacheClause_Group extends GroupToken {
	
	public ResultCacheClause_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getResultCacheClauseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResultCacheClause_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ResultCacheClause_RESULT_CACHEKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getResultCacheClauseAccess().getResultCacheClauseAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ResultCacheClause}
protected class ResultCacheClause_ResultCacheClauseAction_0 extends ActionToken  {

	public ResultCacheClause_ResultCacheClauseAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getResultCacheClauseAccess().getResultCacheClauseAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "RESULT_CACHE"
protected class ResultCacheClause_RESULT_CACHEKeyword_1 extends KeywordToken  {
	
	public ResultCacheClause_RESULT_CACHEKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getResultCacheClauseAccess().getRESULT_CACHEKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResultCacheClause_ResultCacheClauseAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("RELIES_ON" "(" (dataSources+=ID ("," dataSources+=ID))? ")")?
protected class ResultCacheClause_Group_2 extends GroupToken {
	
	public ResultCacheClause_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getResultCacheClauseAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResultCacheClause_RightParenthesisKeyword_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "RELIES_ON"
protected class ResultCacheClause_RELIES_ONKeyword_2_0 extends KeywordToken  {
	
	public ResultCacheClause_RELIES_ONKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getResultCacheClauseAccess().getRELIES_ONKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResultCacheClause_RESULT_CACHEKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class ResultCacheClause_LeftParenthesisKeyword_2_1 extends KeywordToken  {
	
	public ResultCacheClause_LeftParenthesisKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getResultCacheClauseAccess().getLeftParenthesisKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResultCacheClause_RELIES_ONKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (dataSources+=ID ("," dataSources+=ID))?
protected class ResultCacheClause_Group_2_2 extends GroupToken {
	
	public ResultCacheClause_Group_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getResultCacheClauseAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResultCacheClause_Group_2_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// dataSources+=ID
protected class ResultCacheClause_DataSourcesAssignment_2_2_0 extends AssignmentToken  {
	
	public ResultCacheClause_DataSourcesAssignment_2_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getResultCacheClauseAccess().getDataSourcesAssignment_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResultCacheClause_LeftParenthesisKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dataSources",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dataSources");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getResultCacheClauseAccess().getDataSourcesIDTerminalRuleCall_2_2_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getResultCacheClauseAccess().getDataSourcesIDTerminalRuleCall_2_2_0_0();
			return obj;
		}
		return null;
	}

}

// "," dataSources+=ID
protected class ResultCacheClause_Group_2_2_1 extends GroupToken {
	
	public ResultCacheClause_Group_2_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getResultCacheClauseAccess().getGroup_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResultCacheClause_DataSourcesAssignment_2_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ResultCacheClause_CommaKeyword_2_2_1_0 extends KeywordToken  {
	
	public ResultCacheClause_CommaKeyword_2_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getResultCacheClauseAccess().getCommaKeyword_2_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResultCacheClause_DataSourcesAssignment_2_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// dataSources+=ID
protected class ResultCacheClause_DataSourcesAssignment_2_2_1_1 extends AssignmentToken  {
	
	public ResultCacheClause_DataSourcesAssignment_2_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getResultCacheClauseAccess().getDataSourcesAssignment_2_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResultCacheClause_CommaKeyword_2_2_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dataSources",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dataSources");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getResultCacheClauseAccess().getDataSourcesIDTerminalRuleCall_2_2_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getResultCacheClauseAccess().getDataSourcesIDTerminalRuleCall_2_2_1_1_0();
			return obj;
		}
		return null;
	}

}



// ")"
protected class ResultCacheClause_RightParenthesisKeyword_2_3 extends KeywordToken  {
	
	public ResultCacheClause_RightParenthesisKeyword_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getResultCacheClauseAccess().getRightParenthesisKeyword_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ResultCacheClause_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule ResultCacheClause ****************/


/************ begin Rule PipelinedClause ****************
 *
 * PipelinedClause:
 * 	{PipelinedClause} "PIPELINED";
 *
 **/

// {PipelinedClause} "PIPELINED"
protected class PipelinedClause_Group extends GroupToken {
	
	public PipelinedClause_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPipelinedClauseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PipelinedClause_PIPELINEDKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPipelinedClauseAccess().getPipelinedClauseAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {PipelinedClause}
protected class PipelinedClause_PipelinedClauseAction_0 extends ActionToken  {

	public PipelinedClause_PipelinedClauseAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPipelinedClauseAccess().getPipelinedClauseAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "PIPELINED"
protected class PipelinedClause_PIPELINEDKeyword_1 extends KeywordToken  {
	
	public PipelinedClause_PIPELINEDKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPipelinedClauseAccess().getPIPELINEDKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PipelinedClause_PipelinedClauseAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule PipelinedClause ****************/


/************ begin Rule StatementBody ****************
 *
 * StatementBody:
 * 	"BEGIN" statements+=Statement+ "END" endName=ID? ";";
 *
 **/

// "BEGIN" statements+=Statement+ "END" endName=ID? ";"
protected class StatementBody_Group extends GroupToken {
	
	public StatementBody_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementBodyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBody_SemicolonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementBodyRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "BEGIN"
protected class StatementBody_BEGINKeyword_0 extends KeywordToken  {
	
	public StatementBody_BEGINKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementBodyAccess().getBEGINKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// statements+=Statement+
protected class StatementBody_StatementsAssignment_1 extends AssignmentToken  {
	
	public StatementBody_StatementsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementBodyAccess().getStatementsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementBodyAccess().getStatementsStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StatementBody_StatementsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new StatementBody_BEGINKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "END"
protected class StatementBody_ENDKeyword_2 extends KeywordToken  {
	
	public StatementBody_ENDKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementBodyAccess().getENDKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBody_StatementsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// endName=ID?
protected class StatementBody_EndNameAssignment_3 extends AssignmentToken  {
	
	public StatementBody_EndNameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementBodyAccess().getEndNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBody_ENDKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("endName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("endName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStatementBodyAccess().getEndNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStatementBodyAccess().getEndNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class StatementBody_SemicolonKeyword_4 extends KeywordToken  {
	
	public StatementBody_SemicolonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementBodyAccess().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBody_EndNameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StatementBody_ENDKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule StatementBody ****************/


/************ begin Rule DeclareSection ****************
 *
 * // NOTE: DECLARE should not be allowed for non-anonymous blocks!
 * DeclareSection:
 * 	"DECLARE"? items+=Item+;
 *
 **/

// "DECLARE"? items+=Item+
protected class DeclareSection_Group extends GroupToken {
	
	public DeclareSection_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclareSectionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DeclareSection_ItemsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDeclareSectionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// items+=Item+
protected class DeclareSection_ItemsAssignment_1 extends AssignmentToken  {
	
	public DeclareSection_ItemsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclareSectionAccess().getItemsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Item_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("items",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("items");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getItemRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclareSectionAccess().getItemsItemParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DeclareSection_ItemsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule DeclareSection ****************/


/************ begin Rule Item ****************
 *
 * Item:
 * 	ItemDeclaration // TODO | TypeDefinition
 * 	// TODO | FunctionDeclaration
 * 	// TODO | FunctionDefinition
 * 	| ProcedureDeclaration | ProcedureDefinition | Pragma;
 *
 **/

// ItemDeclaration // TODO | TypeDefinition
// // TODO | FunctionDeclaration
// // TODO | FunctionDefinition
// | ProcedureDeclaration | ProcedureDefinition | Pragma
protected class Item_Alternatives extends AlternativesToken {

	public Item_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getItemAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Item_ItemDeclarationParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Item_ProcedureDeclarationParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Item_ProcedureDefinitionParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Item_PragmaParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPragmaRestrictReferencesRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPragmaTimestampRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProcedureDeclarationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProcedureDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ItemDeclaration
protected class Item_ItemDeclarationParserRuleCall_0 extends RuleCallToken {
	
	public Item_ItemDeclarationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemAccess().getItemDeclarationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ItemDeclaration_VariableDeclarationParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableDeclarationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ItemDeclaration_VariableDeclarationParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ProcedureDeclaration
protected class Item_ProcedureDeclarationParserRuleCall_1 extends RuleCallToken {
	
	public Item_ProcedureDeclarationParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemAccess().getProcedureDeclarationParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcedureDeclarationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ProcedureDeclaration_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ProcedureDefinition
protected class Item_ProcedureDefinitionParserRuleCall_2 extends RuleCallToken {
	
	public Item_ProcedureDefinitionParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemAccess().getProcedureDefinitionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcedureDefinitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ProcedureDefinition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Pragma
protected class Item_PragmaParserRuleCall_3 extends RuleCallToken {
	
	public Item_PragmaParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemAccess().getPragmaParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Pragma_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPragmaRestrictReferencesRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPragmaTimestampRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Pragma_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Item ****************/


/************ begin Rule ItemDeclaration ****************
 *
 * ItemDeclaration:
 * 	VariableDeclaration;
 *
 **/

// VariableDeclaration
protected class ItemDeclaration_VariableDeclarationParserRuleCall extends RuleCallToken {
	
	public ItemDeclaration_VariableDeclarationParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getItemDeclarationAccess().getVariableDeclarationParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableDeclarationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(VariableDeclaration_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule ItemDeclaration ****************/


/************ begin Rule ExternalProcedureDeclaration ****************
 *
 * ExternalProcedureDeclaration:
 * 	{ExternalProcedureDeclaration} "EXTERNAL";
 *
 **/

// {ExternalProcedureDeclaration} "EXTERNAL"
protected class ExternalProcedureDeclaration_Group extends GroupToken {
	
	public ExternalProcedureDeclaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExternalProcedureDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExternalProcedureDeclaration_EXTERNALKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExternalProcedureDeclarationAccess().getExternalProcedureDeclarationAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExternalProcedureDeclaration}
protected class ExternalProcedureDeclaration_ExternalProcedureDeclarationAction_0 extends ActionToken  {

	public ExternalProcedureDeclaration_ExternalProcedureDeclarationAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExternalProcedureDeclarationAccess().getExternalProcedureDeclarationAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "EXTERNAL"
protected class ExternalProcedureDeclaration_EXTERNALKeyword_1 extends KeywordToken  {
	
	public ExternalProcedureDeclaration_EXTERNALKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExternalProcedureDeclarationAccess().getEXTERNALKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExternalProcedureDeclaration_ExternalProcedureDeclarationAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ExternalProcedureDeclaration ****************/


/************ begin Rule VariableDeclaration ****************
 *
 * // FIXME: NOT_NULL is not inline since, otherwise, there would be an error in the grammar. it's not clear why...
 * VariableDeclaration:
 * 	name=ID isConstant?="CONSTANT"? dataType=DataType isNotNull?=NOT_NULL? value=VariableValue? ";";
 *
 **/

// name=ID isConstant?="CONSTANT"? dataType=DataType isNotNull?=NOT_NULL? value=VariableValue? ";"
protected class VariableDeclaration_Group extends GroupToken {
	
	public VariableDeclaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDeclaration_SemicolonKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class VariableDeclaration_NameAssignment_0 extends AssignmentToken  {
	
	public VariableDeclaration_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableDeclarationAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// isConstant?="CONSTANT"?
protected class VariableDeclaration_IsConstantAssignment_1 extends AssignmentToken  {
	
	public VariableDeclaration_IsConstantAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableDeclarationAccess().getIsConstantAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDeclaration_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isConstant",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isConstant");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getVariableDeclarationAccess().getIsConstantCONSTANTKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// dataType=DataType
protected class VariableDeclaration_DataTypeAssignment_2 extends AssignmentToken  {
	
	public VariableDeclaration_DataTypeAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableDeclarationAccess().getDataTypeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDeclaration_IsConstantAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VariableDeclaration_NameAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("dataType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("dataType");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getVariableDeclarationAccess().getDataTypeDataTypeParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getVariableDeclarationAccess().getDataTypeDataTypeParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// isNotNull?=NOT_NULL?
protected class VariableDeclaration_IsNotNullAssignment_3 extends AssignmentToken  {
	
	public VariableDeclaration_IsNotNullAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableDeclarationAccess().getIsNotNullAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDeclaration_DataTypeAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isNotNull",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isNotNull");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getVariableDeclarationAccess().getIsNotNullNOT_NULLParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getVariableDeclarationAccess().getIsNotNullNOT_NULLParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// value=VariableValue?
protected class VariableDeclaration_ValueAssignment_4 extends AssignmentToken  {
	
	public VariableDeclaration_ValueAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableDeclarationAccess().getValueAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableValue_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableValueRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVariableDeclarationAccess().getValueVariableValueParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VariableDeclaration_IsNotNullAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new VariableDeclaration_DataTypeAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class VariableDeclaration_SemicolonKeyword_5 extends KeywordToken  {
	
	public VariableDeclaration_SemicolonKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDeclaration_ValueAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VariableDeclaration_IsNotNullAssignment_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new VariableDeclaration_DataTypeAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule VariableDeclaration ****************/



/************ begin Rule VariableValue ****************
 *
 * VariableValue:
 * 	(":=" | "DEFAULT") expression=Expression;
 *
 **/

// (":=" | "DEFAULT") expression=Expression
protected class VariableValue_Group extends GroupToken {
	
	public VariableValue_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableValue_ExpressionAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableValueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ":=" | "DEFAULT"
protected class VariableValue_Alternatives_0 extends AlternativesToken {

	public VariableValue_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableValue_ColonEqualsSignKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":="
protected class VariableValue_ColonEqualsSignKeyword_0_0 extends KeywordToken  {
	
	public VariableValue_ColonEqualsSignKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getColonEqualsSignKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}


// expression=Expression
protected class VariableValue_ExpressionAssignment_1 extends AssignmentToken  {
	
	public VariableValue_ExpressionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableValueAccess().getExpressionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVariableValueAccess().getExpressionExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VariableValue_Alternatives_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule VariableValue ****************/


/************ begin Rule Expression ****************
 *
 * Expression:
 * 	IntLiteralExpression | StringLiteralExpression | BooleanLiteralExpression | NullLiteralExpression |
 * 	VariableRefExpression;
 *
 **/

// IntLiteralExpression | StringLiteralExpression | BooleanLiteralExpression | NullLiteralExpression |
// VariableRefExpression
protected class Expression_Alternatives extends AlternativesToken {

	public Expression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_IntLiteralExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Expression_StringLiteralExpressionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Expression_BooleanLiteralExpressionParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Expression_NullLiteralExpressionParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Expression_VariableRefExpressionParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullLiteralExpressionAccess().getNullLiteralExpressionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringLiteralExpressionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRefExpressionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// IntLiteralExpression
protected class Expression_IntLiteralExpressionParserRuleCall_0 extends RuleCallToken {
	
	public Expression_IntLiteralExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getIntLiteralExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IntLiteralExpression_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIntLiteralExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IntLiteralExpression_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StringLiteralExpression
protected class Expression_StringLiteralExpressionParserRuleCall_1 extends RuleCallToken {
	
	public Expression_StringLiteralExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getStringLiteralExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringLiteralExpression_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringLiteralExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StringLiteralExpression_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BooleanLiteralExpression
protected class Expression_BooleanLiteralExpressionParserRuleCall_2 extends RuleCallToken {
	
	public Expression_BooleanLiteralExpressionParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getBooleanLiteralExpressionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanLiteralExpression_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanLiteralExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BooleanLiteralExpression_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NullLiteralExpression
protected class Expression_NullLiteralExpressionParserRuleCall_3 extends RuleCallToken {
	
	public Expression_NullLiteralExpressionParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getNullLiteralExpressionParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullLiteralExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNullLiteralExpressionAccess().getNullLiteralExpressionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(NullLiteralExpression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// VariableRefExpression
protected class Expression_VariableRefExpressionParserRuleCall_4 extends RuleCallToken {
	
	public Expression_VariableRefExpressionParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getVariableRefExpressionParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableRefExpression_VariableAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableRefExpressionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(VariableRefExpression_VariableAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Expression ****************/


/************ begin Rule IntLiteralExpression ****************
 *
 * IntLiteralExpression:
 * 	value=INT;
 *
 **/

// value=INT
protected class IntLiteralExpression_ValueAssignment extends AssignmentToken  {
	
	public IntLiteralExpression_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIntLiteralExpressionAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIntLiteralExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getIntLiteralExpressionAccess().getValueINTTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getIntLiteralExpressionAccess().getValueINTTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule IntLiteralExpression ****************/


/************ begin Rule StringLiteralExpression ****************
 *
 * StringLiteralExpression:
 * 	value=STRING;
 *
 **/

// value=STRING
protected class StringLiteralExpression_ValueAssignment extends AssignmentToken  {
	
	public StringLiteralExpression_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringLiteralExpressionAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringLiteralExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule StringLiteralExpression ****************/


/************ begin Rule BooleanLiteralExpression ****************
 *
 * // TODO: Make a boolean out of this.
 * BooleanLiteralExpression:
 * 	value=("TRUE" | "FALSE");
 *
 **/

// value=("TRUE" | "FALSE")
protected class BooleanLiteralExpression_ValueAssignment extends AssignmentToken  {
	
	public BooleanLiteralExpression_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanLiteralExpressionAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanLiteralExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBooleanLiteralExpressionAccess().getValueTRUEKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBooleanLiteralExpressionAccess().getValueTRUEKeyword_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBooleanLiteralExpressionAccess().getValueFALSEKeyword_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBooleanLiteralExpressionAccess().getValueFALSEKeyword_0_1();
			return obj;
		}
		return null;
	}

}

/************ end Rule BooleanLiteralExpression ****************/


/************ begin Rule NullLiteralExpression ****************
 *
 * NullLiteralExpression:
 * 	{NullLiteralExpression} "NULL";
 *
 **/

// {NullLiteralExpression} "NULL"
protected class NullLiteralExpression_Group extends GroupToken {
	
	public NullLiteralExpression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNullLiteralExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullLiteralExpression_NULLKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNullLiteralExpressionAccess().getNullLiteralExpressionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {NullLiteralExpression}
protected class NullLiteralExpression_NullLiteralExpressionAction_0 extends ActionToken  {

	public NullLiteralExpression_NullLiteralExpressionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNullLiteralExpressionAccess().getNullLiteralExpressionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "NULL"
protected class NullLiteralExpression_NULLKeyword_1 extends KeywordToken  {
	
	public NullLiteralExpression_NULLKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNullLiteralExpressionAccess().getNULLKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullLiteralExpression_NullLiteralExpressionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule NullLiteralExpression ****************/


/************ begin Rule VariableRefExpression ****************
 *
 * VariableRefExpression:
 * 	variable=VariableRef;
 *
 **/

// variable=VariableRef
protected class VariableRefExpression_VariableAssignment extends AssignmentToken  {
	
	public VariableRefExpression_VariableAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableRefExpressionAccess().getVariableAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableRefExpressionRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("variable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("variable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableRefRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVariableRefExpressionAccess().getVariableVariableRefParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule VariableRefExpression ****************/


/************ begin Rule Statement ****************
 *
 * // TODO | SqlStatement
 * Statement:
 * 	AssignmentStatement // TODO | ExecuteImmediateStatement
 * 	// TODO | ForallStatement
 * 	// TODO | OpenStatement
 * 	// TODO | OpenForStatement
 * 	| BlockStatement | CaseStatement | CloseStatement | ContinueStatement | ExitStatement | FetchStatement | GotoStatement
 * 	| IfStatement | LoopStatement | NullStatement | RaiseStatement | ReturnStatement;
 *
 **/

// AssignmentStatement // TODO | ExecuteImmediateStatement
// // TODO | ForallStatement
// // TODO | OpenStatement
// // TODO | OpenForStatement
// | BlockStatement | CaseStatement | CloseStatement | ContinueStatement | ExitStatement | FetchStatement | GotoStatement |
// IfStatement | LoopStatement | NullStatement | RaiseStatement | ReturnStatement
protected class Statement_Alternatives extends AlternativesToken {

	public Statement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStatementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_AssignmentStatementParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_BlockStatementParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Statement_CaseStatementParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Statement_CloseStatementParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Statement_ContinueStatementParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Statement_ExitStatementParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Statement_FetchStatementParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Statement_GotoStatementParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Statement_IfStatementParserRuleCall_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Statement_LoopStatementParserRuleCall_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Statement_NullStatementParserRuleCall_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Statement_RaiseStatementParserRuleCall_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Statement_ReturnStatementParserRuleCall_12(lastRuleCallOrigin, this, 12, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignmentStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBasicLoopStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBlockStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCaseStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCloseStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getContinueStatementAccess().getContinueStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExitStatementAccess().getExitStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFetchStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getForLoopStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGotoStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIfStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNullStatementAccess().getNullStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRaiseStatementAccess().getRaiseStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReturnStatementAccess().getReturnStatementAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhileLoopStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AssignmentStatement
protected class Statement_AssignmentStatementParserRuleCall_0 extends RuleCallToken {
	
	public Statement_AssignmentStatementParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignmentStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AssignmentStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BlockStatement
protected class Statement_BlockStatementParserRuleCall_1 extends RuleCallToken {
	
	public Statement_BlockStatementParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getBlockStatementParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBlockStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BlockStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CaseStatement
protected class Statement_CaseStatementParserRuleCall_2 extends RuleCallToken {
	
	public Statement_CaseStatementParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getCaseStatementParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCaseStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CaseStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CloseStatement
protected class Statement_CloseStatementParserRuleCall_3 extends RuleCallToken {
	
	public Statement_CloseStatementParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getCloseStatementParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CloseStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCloseStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CloseStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ContinueStatement
protected class Statement_ContinueStatementParserRuleCall_4 extends RuleCallToken {
	
	public Statement_ContinueStatementParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContinueStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getContinueStatementAccess().getContinueStatementAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ContinueStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ExitStatement
protected class Statement_ExitStatementParserRuleCall_5 extends RuleCallToken {
	
	public Statement_ExitStatementParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getExitStatementParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExitStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExitStatementAccess().getExitStatementAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ExitStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FetchStatement
protected class Statement_FetchStatementParserRuleCall_6 extends RuleCallToken {
	
	public Statement_FetchStatementParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getFetchStatementParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFetchStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FetchStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// GotoStatement
protected class Statement_GotoStatementParserRuleCall_7 extends RuleCallToken {
	
	public Statement_GotoStatementParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getGotoStatementParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGotoStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(GotoStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// IfStatement
protected class Statement_IfStatementParserRuleCall_8 extends RuleCallToken {
	
	public Statement_IfStatementParserRuleCall_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getIfStatementParserRuleCall_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIfStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IfStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LoopStatement
protected class Statement_LoopStatementParserRuleCall_9 extends RuleCallToken {
	
	public Statement_LoopStatementParserRuleCall_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LoopStatement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBasicLoopStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getForLoopStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhileLoopStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LoopStatement_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NullStatement
protected class Statement_NullStatementParserRuleCall_10 extends RuleCallToken {
	
	public Statement_NullStatementParserRuleCall_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getNullStatementParserRuleCall_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNullStatementAccess().getNullStatementAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(NullStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RaiseStatement
protected class Statement_RaiseStatementParserRuleCall_11 extends RuleCallToken {
	
	public Statement_RaiseStatementParserRuleCall_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getRaiseStatementParserRuleCall_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RaiseStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRaiseStatementAccess().getRaiseStatementAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(RaiseStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ReturnStatement
protected class Statement_ReturnStatementParserRuleCall_12 extends RuleCallToken {
	
	public Statement_ReturnStatementParserRuleCall_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReturnStatementAccess().getReturnStatementAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ReturnStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Statement ****************/


/************ begin Rule Label ****************
 *
 * Label:
 * 	"<<" name=ID ">>";
 *
 **/

// "<<" name=ID ">>"
protected class Label_Group extends GroupToken {
	
	public Label_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLabelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_GreaterThanSignGreaterThanSignKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLabelRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "<<"
protected class Label_LessThanSignLessThanSignKeyword_0 extends KeywordToken  {
	
	public Label_LessThanSignLessThanSignKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLabelAccess().getLessThanSignLessThanSignKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class Label_NameAssignment_1 extends AssignmentToken  {
	
	public Label_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLabelAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_LessThanSignLessThanSignKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ">>"
protected class Label_GreaterThanSignGreaterThanSignKeyword_2 extends KeywordToken  {
	
	public Label_GreaterThanSignGreaterThanSignKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLabelAccess().getGreaterThanSignGreaterThanSignKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Label ****************/


/************ begin Rule AssignmentStatement ****************
 *
 * AssignmentStatement:
 * 	labels+=Label* target=AssignmentTarget ":=" expression=Expression ";";
 *
 **/

// labels+=Label* target=AssignmentTarget ":=" expression=Expression ";"
protected class AssignmentStatement_Group extends GroupToken {
	
	public AssignmentStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentStatement_SemicolonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignmentStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// labels+=Label*
protected class AssignmentStatement_LabelsAssignment_0 extends AssignmentToken  {
	
	public AssignmentStatement_LabelsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentStatementAccess().getLabelsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssignmentStatementAccess().getLabelsLabelParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssignmentStatement_LabelsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// target=AssignmentTarget
protected class AssignmentStatement_TargetAssignment_1 extends AssignmentToken  {
	
	public AssignmentStatement_TargetAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentStatementAccess().getTargetAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentTarget_VariableAssignmentTargetParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("target",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignmentTargetRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssignmentStatementAccess().getTargetAssignmentTargetParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssignmentStatement_LabelsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// ":="
protected class AssignmentStatement_ColonEqualsSignKeyword_2 extends KeywordToken  {
	
	public AssignmentStatement_ColonEqualsSignKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssignmentStatementAccess().getColonEqualsSignKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentStatement_TargetAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// expression=Expression
protected class AssignmentStatement_ExpressionAssignment_3 extends AssignmentToken  {
	
	public AssignmentStatement_ExpressionAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentStatementAccess().getExpressionAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssignmentStatementAccess().getExpressionExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssignmentStatement_ColonEqualsSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class AssignmentStatement_SemicolonKeyword_4 extends KeywordToken  {
	
	public AssignmentStatement_SemicolonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssignmentStatementAccess().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentStatement_ExpressionAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule AssignmentStatement ****************/


/************ begin Rule AssignmentTarget ****************
 *
 * AssignmentTarget:
 * 	VariableAssignmentTarget;
 *
 **/

// VariableAssignmentTarget
protected class AssignmentTarget_VariableAssignmentTargetParserRuleCall extends RuleCallToken {
	
	public AssignmentTarget_VariableAssignmentTargetParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAssignmentTargetAccess().getVariableAssignmentTargetParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableAssignmentTarget_VariableAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableAssignmentTargetRule().getType().getClassifier())
			return null;
		if(checkForRecursion(VariableAssignmentTarget_VariableAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule AssignmentTarget ****************/


/************ begin Rule VariableAssignmentTarget ****************
 *
 * VariableAssignmentTarget:
 * 	variable=VariableRef;
 *
 **/

// variable=VariableRef
protected class VariableAssignmentTarget_VariableAssignment extends AssignmentToken  {
	
	public VariableAssignmentTarget_VariableAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAssignmentTargetAccess().getVariableAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableAssignmentTargetRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("variable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("variable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableRefRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVariableAssignmentTargetAccess().getVariableVariableRefParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule VariableAssignmentTarget ****************/


/************ begin Rule BlockStatement ****************
 *
 * BlockStatement:
 * 	labels+=Label* declareSection=DeclareSection? body=StatementBody;
 *
 **/

// labels+=Label* declareSection=DeclareSection? body=StatementBody
protected class BlockStatement_Group extends GroupToken {
	
	public BlockStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBlockStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BlockStatement_BodyAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBlockStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// labels+=Label*
protected class BlockStatement_LabelsAssignment_0 extends AssignmentToken  {
	
	public BlockStatement_LabelsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockStatementAccess().getLabelsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBlockStatementAccess().getLabelsLabelParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BlockStatement_LabelsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// declareSection=DeclareSection?
protected class BlockStatement_DeclareSectionAssignment_1 extends AssignmentToken  {
	
	public BlockStatement_DeclareSectionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockStatementAccess().getDeclareSectionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DeclareSection_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declareSection",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declareSection");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclareSectionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBlockStatementAccess().getDeclareSectionDeclareSectionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BlockStatement_LabelsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// body=StatementBody
protected class BlockStatement_BodyAssignment_2 extends AssignmentToken  {
	
	public BlockStatement_BodyAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockStatementAccess().getBodyAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StatementBody_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBlockStatementAccess().getBodyStatementBodyParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BlockStatement_DeclareSectionAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new BlockStatement_LabelsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 2, consumed);
		}	
	}	
}


/************ end Rule BlockStatement ****************/


/************ begin Rule CaseStatement ****************
 *
 * CaseStatement:
 * 	labels+=Label* "CASE" expression=Expression? whenBranches+=CaseStatementWhenBranch+
 * 	elseBranch=CaseStatementElseBranch? "END" "CASE" endLabel=ID? ";";
 *
 **/

// labels+=Label* "CASE" expression=Expression? whenBranches+=CaseStatementWhenBranch+ elseBranch=CaseStatementElseBranch?
// "END" "CASE" endLabel=ID? ";"
protected class CaseStatement_Group extends GroupToken {
	
	public CaseStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCaseStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseStatement_SemicolonKeyword_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCaseStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// labels+=Label*
protected class CaseStatement_LabelsAssignment_0 extends AssignmentToken  {
	
	public CaseStatement_LabelsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseStatementAccess().getLabelsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseStatementAccess().getLabelsLabelParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CaseStatement_LabelsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "CASE"
protected class CaseStatement_CASEKeyword_1 extends KeywordToken  {
	
	public CaseStatement_CASEKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseStatementAccess().getCASEKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseStatement_LabelsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// expression=Expression?
protected class CaseStatement_ExpressionAssignment_2 extends AssignmentToken  {
	
	public CaseStatement_ExpressionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseStatementAccess().getExpressionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseStatementAccess().getExpressionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CaseStatement_CASEKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// whenBranches+=CaseStatementWhenBranch+
protected class CaseStatement_WhenBranchesAssignment_3 extends AssignmentToken  {
	
	public CaseStatement_WhenBranchesAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseStatementAccess().getWhenBranchesAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseStatementWhenBranch_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("whenBranches",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("whenBranches");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCaseStatementWhenBranchRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseStatementAccess().getWhenBranchesCaseStatementWhenBranchParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CaseStatement_WhenBranchesAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new CaseStatement_ExpressionAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new CaseStatement_CASEKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elseBranch=CaseStatementElseBranch?
protected class CaseStatement_ElseBranchAssignment_4 extends AssignmentToken  {
	
	public CaseStatement_ElseBranchAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseStatementAccess().getElseBranchAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseStatementElseBranch_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elseBranch",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elseBranch");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCaseStatementElseBranchRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseStatementAccess().getElseBranchCaseStatementElseBranchParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CaseStatement_WhenBranchesAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "END"
protected class CaseStatement_ENDKeyword_5 extends KeywordToken  {
	
	public CaseStatement_ENDKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseStatementAccess().getENDKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseStatement_ElseBranchAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CaseStatement_WhenBranchesAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "CASE"
protected class CaseStatement_CASEKeyword_6 extends KeywordToken  {
	
	public CaseStatement_CASEKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseStatementAccess().getCASEKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseStatement_ENDKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// endLabel=ID?
protected class CaseStatement_EndLabelAssignment_7 extends AssignmentToken  {
	
	public CaseStatement_EndLabelAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseStatementAccess().getEndLabelAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseStatement_CASEKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("endLabel",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("endLabel");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCaseStatementAccess().getEndLabelIDTerminalRuleCall_7_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getCaseStatementAccess().getEndLabelIDTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class CaseStatement_SemicolonKeyword_8 extends KeywordToken  {
	
	public CaseStatement_SemicolonKeyword_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseStatementAccess().getSemicolonKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseStatement_EndLabelAssignment_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CaseStatement_CASEKeyword_6(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule CaseStatement ****************/


/************ begin Rule CaseStatementWhenBranch ****************
 *
 * CaseStatementWhenBranch:
 * 	"WHEN" expression=Expression "THEN" statements+=Statement+;
 *
 **/

// "WHEN" expression=Expression "THEN" statements+=Statement+
protected class CaseStatementWhenBranch_Group extends GroupToken {
	
	public CaseStatementWhenBranch_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCaseStatementWhenBranchAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseStatementWhenBranch_StatementsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCaseStatementWhenBranchRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "WHEN"
protected class CaseStatementWhenBranch_WHENKeyword_0 extends KeywordToken  {
	
	public CaseStatementWhenBranch_WHENKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseStatementWhenBranchAccess().getWHENKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// expression=Expression
protected class CaseStatementWhenBranch_ExpressionAssignment_1 extends AssignmentToken  {
	
	public CaseStatementWhenBranch_ExpressionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseStatementWhenBranchAccess().getExpressionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseStatementWhenBranchAccess().getExpressionExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CaseStatementWhenBranch_WHENKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "THEN"
protected class CaseStatementWhenBranch_THENKeyword_2 extends KeywordToken  {
	
	public CaseStatementWhenBranch_THENKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseStatementWhenBranchAccess().getTHENKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseStatementWhenBranch_ExpressionAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statements+=Statement+
protected class CaseStatementWhenBranch_StatementsAssignment_3 extends AssignmentToken  {
	
	public CaseStatementWhenBranch_StatementsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseStatementWhenBranchAccess().getStatementsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseStatementWhenBranchAccess().getStatementsStatementParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CaseStatementWhenBranch_StatementsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new CaseStatementWhenBranch_THENKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule CaseStatementWhenBranch ****************/


/************ begin Rule CaseStatementElseBranch ****************
 *
 * CaseStatementElseBranch:
 * 	"ELSE" statements+=Statement+;
 *
 **/

// "ELSE" statements+=Statement+
protected class CaseStatementElseBranch_Group extends GroupToken {
	
	public CaseStatementElseBranch_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCaseStatementElseBranchAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CaseStatementElseBranch_StatementsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCaseStatementElseBranchRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "ELSE"
protected class CaseStatementElseBranch_ELSEKeyword_0 extends KeywordToken  {
	
	public CaseStatementElseBranch_ELSEKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCaseStatementElseBranchAccess().getELSEKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// statements+=Statement+
protected class CaseStatementElseBranch_StatementsAssignment_1 extends AssignmentToken  {
	
	public CaseStatementElseBranch_StatementsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCaseStatementElseBranchAccess().getStatementsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCaseStatementElseBranchAccess().getStatementsStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CaseStatementElseBranch_StatementsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new CaseStatementElseBranch_ELSEKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule CaseStatementElseBranch ****************/


/************ begin Rule CloseStatement ****************
 *
 * CloseStatement:
 * 	labels+=Label* "CLOSE" cursor=VariableRef ";";
 *
 **/

// labels+=Label* "CLOSE" cursor=VariableRef ";"
protected class CloseStatement_Group extends GroupToken {
	
	public CloseStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCloseStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CloseStatement_SemicolonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCloseStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// labels+=Label*
protected class CloseStatement_LabelsAssignment_0 extends AssignmentToken  {
	
	public CloseStatement_LabelsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCloseStatementAccess().getLabelsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCloseStatementAccess().getLabelsLabelParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CloseStatement_LabelsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "CLOSE"
protected class CloseStatement_CLOSEKeyword_1 extends KeywordToken  {
	
	public CloseStatement_CLOSEKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCloseStatementAccess().getCLOSEKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CloseStatement_LabelsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// cursor=VariableRef
protected class CloseStatement_CursorAssignment_2 extends AssignmentToken  {
	
	public CloseStatement_CursorAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCloseStatementAccess().getCursorAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cursor",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cursor");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableRefRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCloseStatementAccess().getCursorVariableRefParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CloseStatement_CLOSEKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class CloseStatement_SemicolonKeyword_3 extends KeywordToken  {
	
	public CloseStatement_SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCloseStatementAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CloseStatement_CursorAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule CloseStatement ****************/


/************ begin Rule ContinueStatement ****************
 *
 * ContinueStatement:
 * 	{ContinueStatement} labels+=Label* "CONTINUE" labelName=ID? ("WHEN" whenExpression=Expression)? ";";
 *
 **/

// {ContinueStatement} labels+=Label* "CONTINUE" labelName=ID? ("WHEN" whenExpression=Expression)? ";"
protected class ContinueStatement_Group extends GroupToken {
	
	public ContinueStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContinueStatement_SemicolonKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getContinueStatementAccess().getContinueStatementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ContinueStatement}
protected class ContinueStatement_ContinueStatementAction_0 extends ActionToken  {

	public ContinueStatement_ContinueStatementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getContinueStatementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// labels+=Label*
protected class ContinueStatement_LabelsAssignment_1 extends AssignmentToken  {
	
	public ContinueStatement_LabelsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getLabelsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getContinueStatementAccess().getLabelsLabelParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContinueStatement_LabelsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ContinueStatement_ContinueStatementAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "CONTINUE"
protected class ContinueStatement_CONTINUEKeyword_2 extends KeywordToken  {
	
	public ContinueStatement_CONTINUEKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getCONTINUEKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContinueStatement_LabelsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ContinueStatement_ContinueStatementAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// labelName=ID?
protected class ContinueStatement_LabelNameAssignment_3 extends AssignmentToken  {
	
	public ContinueStatement_LabelNameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getLabelNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContinueStatement_CONTINUEKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labelName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labelName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getContinueStatementAccess().getLabelNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getContinueStatementAccess().getLabelNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("WHEN" whenExpression=Expression)?
protected class ContinueStatement_Group_4 extends GroupToken {
	
	public ContinueStatement_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContinueStatement_WhenExpressionAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "WHEN"
protected class ContinueStatement_WHENKeyword_4_0 extends KeywordToken  {
	
	public ContinueStatement_WHENKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getWHENKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContinueStatement_LabelNameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ContinueStatement_CONTINUEKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// whenExpression=Expression
protected class ContinueStatement_WhenExpressionAssignment_4_1 extends AssignmentToken  {
	
	public ContinueStatement_WhenExpressionAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getWhenExpressionAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("whenExpression",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("whenExpression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getContinueStatementAccess().getWhenExpressionExpressionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ContinueStatement_WHENKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class ContinueStatement_SemicolonKeyword_5 extends KeywordToken  {
	
	public ContinueStatement_SemicolonKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getContinueStatementAccess().getSemicolonKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ContinueStatement_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ContinueStatement_LabelNameAssignment_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ContinueStatement_CONTINUEKeyword_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule ContinueStatement ****************/


/************ begin Rule ExitStatement ****************
 *
 * ExitStatement:
 * 	{ExitStatement} labels+=Label* "EXIT" labelName=ID? ("WHEN" whenExpression=Expression)? ";";
 *
 **/

// {ExitStatement} labels+=Label* "EXIT" labelName=ID? ("WHEN" whenExpression=Expression)? ";"
protected class ExitStatement_Group extends GroupToken {
	
	public ExitStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExitStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExitStatement_SemicolonKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExitStatementAccess().getExitStatementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExitStatement}
protected class ExitStatement_ExitStatementAction_0 extends ActionToken  {

	public ExitStatement_ExitStatementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExitStatementAccess().getExitStatementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// labels+=Label*
protected class ExitStatement_LabelsAssignment_1 extends AssignmentToken  {
	
	public ExitStatement_LabelsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExitStatementAccess().getLabelsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExitStatementAccess().getLabelsLabelParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExitStatement_LabelsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ExitStatement_ExitStatementAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "EXIT"
protected class ExitStatement_EXITKeyword_2 extends KeywordToken  {
	
	public ExitStatement_EXITKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExitStatementAccess().getEXITKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExitStatement_LabelsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExitStatement_ExitStatementAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// labelName=ID?
protected class ExitStatement_LabelNameAssignment_3 extends AssignmentToken  {
	
	public ExitStatement_LabelNameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExitStatementAccess().getLabelNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExitStatement_EXITKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labelName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labelName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExitStatementAccess().getLabelNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExitStatementAccess().getLabelNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("WHEN" whenExpression=Expression)?
protected class ExitStatement_Group_4 extends GroupToken {
	
	public ExitStatement_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExitStatementAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExitStatement_WhenExpressionAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "WHEN"
protected class ExitStatement_WHENKeyword_4_0 extends KeywordToken  {
	
	public ExitStatement_WHENKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExitStatementAccess().getWHENKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExitStatement_LabelNameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExitStatement_EXITKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// whenExpression=Expression
protected class ExitStatement_WhenExpressionAssignment_4_1 extends AssignmentToken  {
	
	public ExitStatement_WhenExpressionAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExitStatementAccess().getWhenExpressionAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("whenExpression",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("whenExpression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExitStatementAccess().getWhenExpressionExpressionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExitStatement_WHENKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class ExitStatement_SemicolonKeyword_5 extends KeywordToken  {
	
	public ExitStatement_SemicolonKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExitStatementAccess().getSemicolonKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExitStatement_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExitStatement_LabelNameAssignment_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ExitStatement_EXITKeyword_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule ExitStatement ****************/


/************ begin Rule FetchStatement ****************
 *
 * FetchStatement:
 * 	labels+=Label* "FETCH" cursor=VariableRef? intoClause=FetchStatementIntoClause ";";
 *
 **/

// labels+=Label* "FETCH" cursor=VariableRef? intoClause=FetchStatementIntoClause ";"
protected class FetchStatement_Group extends GroupToken {
	
	public FetchStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFetchStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatement_SemicolonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFetchStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// labels+=Label*
protected class FetchStatement_LabelsAssignment_0 extends AssignmentToken  {
	
	public FetchStatement_LabelsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFetchStatementAccess().getLabelsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFetchStatementAccess().getLabelsLabelParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FetchStatement_LabelsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "FETCH"
protected class FetchStatement_FETCHKeyword_1 extends KeywordToken  {
	
	public FetchStatement_FETCHKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFetchStatementAccess().getFETCHKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatement_LabelsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// cursor=VariableRef?
protected class FetchStatement_CursorAssignment_2 extends AssignmentToken  {
	
	public FetchStatement_CursorAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFetchStatementAccess().getCursorAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cursor",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cursor");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableRefRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFetchStatementAccess().getCursorVariableRefParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FetchStatement_FETCHKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// intoClause=FetchStatementIntoClause
protected class FetchStatement_IntoClauseAssignment_3 extends AssignmentToken  {
	
	public FetchStatement_IntoClauseAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFetchStatementAccess().getIntoClauseAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatementIntoClause_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("intoClause",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("intoClause");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFetchStatementIntoClauseRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFetchStatementAccess().getIntoClauseFetchStatementIntoClauseParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FetchStatement_CursorAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new FetchStatement_FETCHKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class FetchStatement_SemicolonKeyword_4 extends KeywordToken  {
	
	public FetchStatement_SemicolonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFetchStatementAccess().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatement_IntoClauseAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule FetchStatement ****************/


/************ begin Rule FetchStatementIntoClause ****************
 *
 * FetchStatementIntoClause:
 * 	FetchStatementSingleIntoClause | FetchStatementBulkIntoClause;
 *
 **/

// FetchStatementSingleIntoClause | FetchStatementBulkIntoClause
protected class FetchStatementIntoClause_Alternatives extends AlternativesToken {

	public FetchStatementIntoClause_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFetchStatementIntoClauseAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatementIntoClause_FetchStatementSingleIntoClauseParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FetchStatementIntoClause_FetchStatementBulkIntoClauseParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFetchStatementBulkIntoClauseRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFetchStatementSingleIntoClauseRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// FetchStatementSingleIntoClause
protected class FetchStatementIntoClause_FetchStatementSingleIntoClauseParserRuleCall_0 extends RuleCallToken {
	
	public FetchStatementIntoClause_FetchStatementSingleIntoClauseParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFetchStatementIntoClauseAccess().getFetchStatementSingleIntoClauseParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatementSingleIntoClause_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFetchStatementSingleIntoClauseRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FetchStatementSingleIntoClause_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FetchStatementBulkIntoClause
protected class FetchStatementIntoClause_FetchStatementBulkIntoClauseParserRuleCall_1 extends RuleCallToken {
	
	public FetchStatementIntoClause_FetchStatementBulkIntoClauseParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFetchStatementIntoClauseAccess().getFetchStatementBulkIntoClauseParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatementBulkIntoClause_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFetchStatementBulkIntoClauseRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FetchStatementBulkIntoClause_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule FetchStatementIntoClause ****************/


/************ begin Rule FetchStatementSingleIntoClause ****************
 *
 * FetchStatementSingleIntoClause:
 * 	"INTO" targetVariables+=VariableRef+;
 *
 **/

// "INTO" targetVariables+=VariableRef+
protected class FetchStatementSingleIntoClause_Group extends GroupToken {
	
	public FetchStatementSingleIntoClause_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFetchStatementSingleIntoClauseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatementSingleIntoClause_TargetVariablesAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFetchStatementSingleIntoClauseRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "INTO"
protected class FetchStatementSingleIntoClause_INTOKeyword_0 extends KeywordToken  {
	
	public FetchStatementSingleIntoClause_INTOKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFetchStatementSingleIntoClauseAccess().getINTOKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// targetVariables+=VariableRef+
protected class FetchStatementSingleIntoClause_TargetVariablesAssignment_1 extends AssignmentToken  {
	
	public FetchStatementSingleIntoClause_TargetVariablesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFetchStatementSingleIntoClauseAccess().getTargetVariablesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("targetVariables",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("targetVariables");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableRefRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFetchStatementSingleIntoClauseAccess().getTargetVariablesVariableRefParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FetchStatementSingleIntoClause_TargetVariablesAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new FetchStatementSingleIntoClause_INTOKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FetchStatementSingleIntoClause ****************/


/************ begin Rule FetchStatementBulkIntoClause ****************
 *
 * FetchStatementBulkIntoClause:
 * 	"BULK" "COLLECT" "INTO" targetVariables+=VariableRef+ ("LIMIT" limitExpression=Expression)?;
 *
 **/

// "BULK" "COLLECT" "INTO" targetVariables+=VariableRef+ ("LIMIT" limitExpression=Expression)?
protected class FetchStatementBulkIntoClause_Group extends GroupToken {
	
	public FetchStatementBulkIntoClause_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFetchStatementBulkIntoClauseAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatementBulkIntoClause_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FetchStatementBulkIntoClause_TargetVariablesAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFetchStatementBulkIntoClauseRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "BULK"
protected class FetchStatementBulkIntoClause_BULKKeyword_0 extends KeywordToken  {
	
	public FetchStatementBulkIntoClause_BULKKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFetchStatementBulkIntoClauseAccess().getBULKKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "COLLECT"
protected class FetchStatementBulkIntoClause_COLLECTKeyword_1 extends KeywordToken  {
	
	public FetchStatementBulkIntoClause_COLLECTKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFetchStatementBulkIntoClauseAccess().getCOLLECTKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatementBulkIntoClause_BULKKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "INTO"
protected class FetchStatementBulkIntoClause_INTOKeyword_2 extends KeywordToken  {
	
	public FetchStatementBulkIntoClause_INTOKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFetchStatementBulkIntoClauseAccess().getINTOKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatementBulkIntoClause_COLLECTKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// targetVariables+=VariableRef+
protected class FetchStatementBulkIntoClause_TargetVariablesAssignment_3 extends AssignmentToken  {
	
	public FetchStatementBulkIntoClause_TargetVariablesAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFetchStatementBulkIntoClauseAccess().getTargetVariablesAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("targetVariables",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("targetVariables");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableRefRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFetchStatementBulkIntoClauseAccess().getTargetVariablesVariableRefParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FetchStatementBulkIntoClause_TargetVariablesAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new FetchStatementBulkIntoClause_INTOKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("LIMIT" limitExpression=Expression)?
protected class FetchStatementBulkIntoClause_Group_4 extends GroupToken {
	
	public FetchStatementBulkIntoClause_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFetchStatementBulkIntoClauseAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatementBulkIntoClause_LimitExpressionAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "LIMIT"
protected class FetchStatementBulkIntoClause_LIMITKeyword_4_0 extends KeywordToken  {
	
	public FetchStatementBulkIntoClause_LIMITKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFetchStatementBulkIntoClauseAccess().getLIMITKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FetchStatementBulkIntoClause_TargetVariablesAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// limitExpression=Expression
protected class FetchStatementBulkIntoClause_LimitExpressionAssignment_4_1 extends AssignmentToken  {
	
	public FetchStatementBulkIntoClause_LimitExpressionAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFetchStatementBulkIntoClauseAccess().getLimitExpressionAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("limitExpression",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("limitExpression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFetchStatementBulkIntoClauseAccess().getLimitExpressionExpressionParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FetchStatementBulkIntoClause_LIMITKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule FetchStatementBulkIntoClause ****************/


/************ begin Rule GotoStatement ****************
 *
 * GotoStatement:
 * 	labels+=Label* "GOTO" labelName=[Label] ";";
 *
 **/

// labels+=Label* "GOTO" labelName=[Label] ";"
protected class GotoStatement_Group extends GroupToken {
	
	public GotoStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGotoStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoStatement_SemicolonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGotoStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// labels+=Label*
protected class GotoStatement_LabelsAssignment_0 extends AssignmentToken  {
	
	public GotoStatement_LabelsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGotoStatementAccess().getLabelsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGotoStatementAccess().getLabelsLabelParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GotoStatement_LabelsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "GOTO"
protected class GotoStatement_GOTOKeyword_1 extends KeywordToken  {
	
	public GotoStatement_GOTOKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGotoStatementAccess().getGOTOKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoStatement_LabelsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// labelName=[Label]
protected class GotoStatement_LabelNameAssignment_2 extends AssignmentToken  {
	
	public GotoStatement_LabelNameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGotoStatementAccess().getLabelNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoStatement_GOTOKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labelName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labelName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGotoStatementAccess().getLabelNameLabelCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getGotoStatementAccess().getLabelNameLabelCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"
protected class GotoStatement_SemicolonKeyword_3 extends KeywordToken  {
	
	public GotoStatement_SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGotoStatementAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GotoStatement_LabelNameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule GotoStatement ****************/


/************ begin Rule IfStatement ****************
 *
 * IfStatement:
 * 	labels+=Label* "IF" expression=Expression "THEN" statements+=Statement+ elsifBranches+=IfStatementElsifBranch*
 * 	elseBranch=IfStatementElseBranch? "END" "IF" ";";
 *
 **/

// labels+=Label* "IF" expression=Expression "THEN" statements+=Statement+ elsifBranches+=IfStatementElsifBranch*
// elseBranch=IfStatementElseBranch? "END" "IF" ";"
protected class IfStatement_Group extends GroupToken {
	
	public IfStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_SemicolonKeyword_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIfStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// labels+=Label*
protected class IfStatement_LabelsAssignment_0 extends AssignmentToken  {
	
	public IfStatement_LabelsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getLabelsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementAccess().getLabelsLabelParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_LabelsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "IF"
protected class IfStatement_IFKeyword_1 extends KeywordToken  {
	
	public IfStatement_IFKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getIFKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_LabelsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// expression=Expression
protected class IfStatement_ExpressionAssignment_2 extends AssignmentToken  {
	
	public IfStatement_ExpressionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getExpressionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_IFKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "THEN"
protected class IfStatement_THENKeyword_3 extends KeywordToken  {
	
	public IfStatement_THENKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getTHENKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_ExpressionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statements+=Statement+
protected class IfStatement_StatementsAssignment_4 extends AssignmentToken  {
	
	public IfStatement_StatementsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getStatementsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementAccess().getStatementsStatementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_StatementsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new IfStatement_THENKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elsifBranches+=IfStatementElsifBranch*
protected class IfStatement_ElsifBranchesAssignment_5 extends AssignmentToken  {
	
	public IfStatement_ElsifBranchesAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getElsifBranchesAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatementElsifBranch_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elsifBranches",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elsifBranches");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIfStatementElsifBranchRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementAccess().getElsifBranchesIfStatementElsifBranchParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_ElsifBranchesAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new IfStatement_StatementsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elseBranch=IfStatementElseBranch?
protected class IfStatement_ElseBranchAssignment_6 extends AssignmentToken  {
	
	public IfStatement_ElseBranchAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getElseBranchAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatementElseBranch_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elseBranch",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elseBranch");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIfStatementElseBranchRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementAccess().getElseBranchIfStatementElseBranchParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatement_ElsifBranchesAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new IfStatement_StatementsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "END"
protected class IfStatement_ENDKeyword_7 extends KeywordToken  {
	
	public IfStatement_ENDKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getENDKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_ElseBranchAssignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new IfStatement_ElsifBranchesAssignment_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new IfStatement_StatementsAssignment_4(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// "IF"
protected class IfStatement_IFKeyword_8 extends KeywordToken  {
	
	public IfStatement_IFKeyword_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getIFKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_ENDKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ";"
protected class IfStatement_SemicolonKeyword_9 extends KeywordToken  {
	
	public IfStatement_SemicolonKeyword_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementAccess().getSemicolonKeyword_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatement_IFKeyword_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule IfStatement ****************/


/************ begin Rule IfStatementElsifBranch ****************
 *
 * IfStatementElsifBranch:
 * 	"ELSIF" expression=Expression "THEN" statements+=Statement+;
 *
 **/

// "ELSIF" expression=Expression "THEN" statements+=Statement+
protected class IfStatementElsifBranch_Group extends GroupToken {
	
	public IfStatementElsifBranch_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIfStatementElsifBranchAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatementElsifBranch_StatementsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIfStatementElsifBranchRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "ELSIF"
protected class IfStatementElsifBranch_ELSIFKeyword_0 extends KeywordToken  {
	
	public IfStatementElsifBranch_ELSIFKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementElsifBranchAccess().getELSIFKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// expression=Expression
protected class IfStatementElsifBranch_ExpressionAssignment_1 extends AssignmentToken  {
	
	public IfStatementElsifBranch_ExpressionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementElsifBranchAccess().getExpressionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementElsifBranchAccess().getExpressionExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatementElsifBranch_ELSIFKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "THEN"
protected class IfStatementElsifBranch_THENKeyword_2 extends KeywordToken  {
	
	public IfStatementElsifBranch_THENKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementElsifBranchAccess().getTHENKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatementElsifBranch_ExpressionAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statements+=Statement+
protected class IfStatementElsifBranch_StatementsAssignment_3 extends AssignmentToken  {
	
	public IfStatementElsifBranch_StatementsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementElsifBranchAccess().getStatementsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementElsifBranchAccess().getStatementsStatementParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatementElsifBranch_StatementsAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new IfStatementElsifBranch_THENKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule IfStatementElsifBranch ****************/


/************ begin Rule IfStatementElseBranch ****************
 *
 * IfStatementElseBranch:
 * 	"ELSE" statements+=Statement+;
 *
 **/

// "ELSE" statements+=Statement+
protected class IfStatementElseBranch_Group extends GroupToken {
	
	public IfStatementElseBranch_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIfStatementElseBranchAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IfStatementElseBranch_StatementsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIfStatementElseBranchRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "ELSE"
protected class IfStatementElseBranch_ELSEKeyword_0 extends KeywordToken  {
	
	public IfStatementElseBranch_ELSEKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIfStatementElseBranchAccess().getELSEKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// statements+=Statement+
protected class IfStatementElseBranch_StatementsAssignment_1 extends AssignmentToken  {
	
	public IfStatementElseBranch_StatementsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIfStatementElseBranchAccess().getStatementsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIfStatementElseBranchAccess().getStatementsStatementParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IfStatementElseBranch_StatementsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new IfStatementElseBranch_ELSEKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule IfStatementElseBranch ****************/


/************ begin Rule LoopStatement ****************
 *
 * LoopStatement:
 * 	BasicLoopStatement | WhileLoopStatement | ForLoopStatement;
 *
 **/

// BasicLoopStatement | WhileLoopStatement | ForLoopStatement
protected class LoopStatement_Alternatives extends AlternativesToken {

	public LoopStatement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLoopStatementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LoopStatement_BasicLoopStatementParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LoopStatement_WhileLoopStatementParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new LoopStatement_ForLoopStatementParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBasicLoopStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getForLoopStatementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhileLoopStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// BasicLoopStatement
protected class LoopStatement_BasicLoopStatementParserRuleCall_0 extends RuleCallToken {
	
	public LoopStatement_BasicLoopStatementParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLoopStatementAccess().getBasicLoopStatementParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BasicLoopStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBasicLoopStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BasicLoopStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WhileLoopStatement
protected class LoopStatement_WhileLoopStatementParserRuleCall_1 extends RuleCallToken {
	
	public LoopStatement_WhileLoopStatementParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLoopStatementAccess().getWhileLoopStatementParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhileLoopStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWhileLoopStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WhileLoopStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ForLoopStatement
protected class LoopStatement_ForLoopStatementParserRuleCall_2 extends RuleCallToken {
	
	public LoopStatement_ForLoopStatementParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLoopStatementAccess().getForLoopStatementParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForLoopStatement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getForLoopStatementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ForLoopStatement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule LoopStatement ****************/


/************ begin Rule BasicLoopStatement ****************
 *
 * BasicLoopStatement:
 * 	labels+=Label* "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";";
 *
 **/

// labels+=Label* "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";"
protected class BasicLoopStatement_Group extends GroupToken {
	
	public BasicLoopStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBasicLoopStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BasicLoopStatement_SemicolonKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBasicLoopStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// labels+=Label*
protected class BasicLoopStatement_LabelsAssignment_0 extends AssignmentToken  {
	
	public BasicLoopStatement_LabelsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBasicLoopStatementAccess().getLabelsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBasicLoopStatementAccess().getLabelsLabelParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BasicLoopStatement_LabelsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "LOOP"
protected class BasicLoopStatement_LOOPKeyword_1 extends KeywordToken  {
	
	public BasicLoopStatement_LOOPKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBasicLoopStatementAccess().getLOOPKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BasicLoopStatement_LabelsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// statements+=Statement+
protected class BasicLoopStatement_StatementsAssignment_2 extends AssignmentToken  {
	
	public BasicLoopStatement_StatementsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBasicLoopStatementAccess().getStatementsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBasicLoopStatementAccess().getStatementsStatementParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BasicLoopStatement_StatementsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new BasicLoopStatement_LOOPKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "END"
protected class BasicLoopStatement_ENDKeyword_3 extends KeywordToken  {
	
	public BasicLoopStatement_ENDKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBasicLoopStatementAccess().getENDKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BasicLoopStatement_StatementsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "LOOP"
protected class BasicLoopStatement_LOOPKeyword_4 extends KeywordToken  {
	
	public BasicLoopStatement_LOOPKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBasicLoopStatementAccess().getLOOPKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BasicLoopStatement_ENDKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// endLabel=ID?
protected class BasicLoopStatement_EndLabelAssignment_5 extends AssignmentToken  {
	
	public BasicLoopStatement_EndLabelAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBasicLoopStatementAccess().getEndLabelAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BasicLoopStatement_LOOPKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("endLabel",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("endLabel");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBasicLoopStatementAccess().getEndLabelIDTerminalRuleCall_5_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBasicLoopStatementAccess().getEndLabelIDTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class BasicLoopStatement_SemicolonKeyword_6 extends KeywordToken  {
	
	public BasicLoopStatement_SemicolonKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBasicLoopStatementAccess().getSemicolonKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BasicLoopStatement_EndLabelAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BasicLoopStatement_LOOPKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule BasicLoopStatement ****************/


/************ begin Rule WhileLoopStatement ****************
 *
 * WhileLoopStatement:
 * 	labels+=Label* "WHILE" expression=Expression "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";";
 *
 **/

// labels+=Label* "WHILE" expression=Expression "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";"
protected class WhileLoopStatement_Group extends GroupToken {
	
	public WhileLoopStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWhileLoopStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhileLoopStatement_SemicolonKeyword_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWhileLoopStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// labels+=Label*
protected class WhileLoopStatement_LabelsAssignment_0 extends AssignmentToken  {
	
	public WhileLoopStatement_LabelsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWhileLoopStatementAccess().getLabelsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWhileLoopStatementAccess().getLabelsLabelParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WhileLoopStatement_LabelsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "WHILE"
protected class WhileLoopStatement_WHILEKeyword_1 extends KeywordToken  {
	
	public WhileLoopStatement_WHILEKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileLoopStatementAccess().getWHILEKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhileLoopStatement_LabelsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// expression=Expression
protected class WhileLoopStatement_ExpressionAssignment_2 extends AssignmentToken  {
	
	public WhileLoopStatement_ExpressionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWhileLoopStatementAccess().getExpressionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWhileLoopStatementAccess().getExpressionExpressionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WhileLoopStatement_WHILEKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "LOOP"
protected class WhileLoopStatement_LOOPKeyword_3 extends KeywordToken  {
	
	public WhileLoopStatement_LOOPKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileLoopStatementAccess().getLOOPKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhileLoopStatement_ExpressionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statements+=Statement+
protected class WhileLoopStatement_StatementsAssignment_4 extends AssignmentToken  {
	
	public WhileLoopStatement_StatementsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWhileLoopStatementAccess().getStatementsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWhileLoopStatementAccess().getStatementsStatementParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WhileLoopStatement_StatementsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new WhileLoopStatement_LOOPKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "END"
protected class WhileLoopStatement_ENDKeyword_5 extends KeywordToken  {
	
	public WhileLoopStatement_ENDKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileLoopStatementAccess().getENDKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhileLoopStatement_StatementsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "LOOP"
protected class WhileLoopStatement_LOOPKeyword_6 extends KeywordToken  {
	
	public WhileLoopStatement_LOOPKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileLoopStatementAccess().getLOOPKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhileLoopStatement_ENDKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// endLabel=ID?
protected class WhileLoopStatement_EndLabelAssignment_7 extends AssignmentToken  {
	
	public WhileLoopStatement_EndLabelAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWhileLoopStatementAccess().getEndLabelAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhileLoopStatement_LOOPKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("endLabel",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("endLabel");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWhileLoopStatementAccess().getEndLabelIDTerminalRuleCall_7_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWhileLoopStatementAccess().getEndLabelIDTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class WhileLoopStatement_SemicolonKeyword_8 extends KeywordToken  {
	
	public WhileLoopStatement_SemicolonKeyword_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhileLoopStatementAccess().getSemicolonKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WhileLoopStatement_EndLabelAssignment_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WhileLoopStatement_LOOPKeyword_6(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule WhileLoopStatement ****************/


/************ begin Rule ForLoopStatement ****************
 *
 * ForLoopStatement:
 * 	labels+=Label* "FOR" indexVariable=LoopVariableDeclaration "IN" "REVERSE"? lowerBound=Expression ".."
 * 	upperBound=Expression "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";";
 *
 **/

// labels+=Label* "FOR" indexVariable=LoopVariableDeclaration "IN" "REVERSE"? lowerBound=Expression ".."
// upperBound=Expression "LOOP" statements+=Statement+ "END" "LOOP" endLabel=ID? ";"
protected class ForLoopStatement_Group extends GroupToken {
	
	public ForLoopStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForLoopStatement_SemicolonKeyword_13(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getForLoopStatementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// labels+=Label*
protected class ForLoopStatement_LabelsAssignment_0 extends AssignmentToken  {
	
	public ForLoopStatement_LabelsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getLabelsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForLoopStatementAccess().getLabelsLabelParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForLoopStatement_LabelsAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "FOR"
protected class ForLoopStatement_FORKeyword_1 extends KeywordToken  {
	
	public ForLoopStatement_FORKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getFORKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForLoopStatement_LabelsAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// indexVariable=LoopVariableDeclaration
protected class ForLoopStatement_IndexVariableAssignment_2 extends AssignmentToken  {
	
	public ForLoopStatement_IndexVariableAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getIndexVariableAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LoopVariableDeclaration_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("indexVariable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("indexVariable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLoopVariableDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForLoopStatementAccess().getIndexVariableLoopVariableDeclarationParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForLoopStatement_FORKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "IN"
protected class ForLoopStatement_INKeyword_3 extends KeywordToken  {
	
	public ForLoopStatement_INKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getINKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForLoopStatement_IndexVariableAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// lowerBound=Expression
protected class ForLoopStatement_LowerBoundAssignment_5 extends AssignmentToken  {
	
	public ForLoopStatement_LowerBoundAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getLowerBoundAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lowerBound",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lowerBound");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForLoopStatementAccess().getLowerBoundExpressionParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForLoopStatement_INKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ".."
protected class ForLoopStatement_FullStopFullStopKeyword_6 extends KeywordToken  {
	
	public ForLoopStatement_FullStopFullStopKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getFullStopFullStopKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForLoopStatement_LowerBoundAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// upperBound=Expression
protected class ForLoopStatement_UpperBoundAssignment_7 extends AssignmentToken  {
	
	public ForLoopStatement_UpperBoundAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getUpperBoundAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("upperBound",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("upperBound");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForLoopStatementAccess().getUpperBoundExpressionParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForLoopStatement_FullStopFullStopKeyword_6(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "LOOP"
protected class ForLoopStatement_LOOPKeyword_8 extends KeywordToken  {
	
	public ForLoopStatement_LOOPKeyword_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getLOOPKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForLoopStatement_UpperBoundAssignment_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statements+=Statement+
protected class ForLoopStatement_StatementsAssignment_9 extends AssignmentToken  {
	
	public ForLoopStatement_StatementsAssignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getStatementsAssignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getForLoopStatementAccess().getStatementsStatementParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ForLoopStatement_StatementsAssignment_9(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ForLoopStatement_LOOPKeyword_8(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "END"
protected class ForLoopStatement_ENDKeyword_10 extends KeywordToken  {
	
	public ForLoopStatement_ENDKeyword_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getENDKeyword_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForLoopStatement_StatementsAssignment_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "LOOP"
protected class ForLoopStatement_LOOPKeyword_11 extends KeywordToken  {
	
	public ForLoopStatement_LOOPKeyword_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getLOOPKeyword_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForLoopStatement_ENDKeyword_10(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// endLabel=ID?
protected class ForLoopStatement_EndLabelAssignment_12 extends AssignmentToken  {
	
	public ForLoopStatement_EndLabelAssignment_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getEndLabelAssignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForLoopStatement_LOOPKeyword_11(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("endLabel",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("endLabel");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getForLoopStatementAccess().getEndLabelIDTerminalRuleCall_12_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getForLoopStatementAccess().getEndLabelIDTerminalRuleCall_12_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ForLoopStatement_SemicolonKeyword_13 extends KeywordToken  {
	
	public ForLoopStatement_SemicolonKeyword_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getForLoopStatementAccess().getSemicolonKeyword_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ForLoopStatement_EndLabelAssignment_12(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ForLoopStatement_LOOPKeyword_11(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ForLoopStatement ****************/


/************ begin Rule ReturnStatement ****************
 *
 * ReturnStatement:
 * 	{ReturnStatement} labels+=Label* "RETURN" expression=Expression? ";";
 *
 **/

// {ReturnStatement} labels+=Label* "RETURN" expression=Expression? ";"
protected class ReturnStatement_Group extends GroupToken {
	
	public ReturnStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnStatement_SemicolonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReturnStatementAccess().getReturnStatementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ReturnStatement}
protected class ReturnStatement_ReturnStatementAction_0 extends ActionToken  {

	public ReturnStatement_ReturnStatementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getReturnStatementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// labels+=Label*
protected class ReturnStatement_LabelsAssignment_1 extends AssignmentToken  {
	
	public ReturnStatement_LabelsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getLabelsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReturnStatementAccess().getLabelsLabelParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReturnStatement_LabelsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ReturnStatement_ReturnStatementAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "RETURN"
protected class ReturnStatement_RETURNKeyword_2 extends KeywordToken  {
	
	public ReturnStatement_RETURNKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getRETURNKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnStatement_LabelsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReturnStatement_ReturnStatementAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// expression=Expression?
protected class ReturnStatement_ExpressionAssignment_3 extends AssignmentToken  {
	
	public ReturnStatement_ExpressionAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getExpressionAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expression",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReturnStatement_RETURNKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ReturnStatement_SemicolonKeyword_4 extends KeywordToken  {
	
	public ReturnStatement_SemicolonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReturnStatementAccess().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnStatement_ExpressionAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReturnStatement_RETURNKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ReturnStatement ****************/


/************ begin Rule NullStatement ****************
 *
 * NullStatement:
 * 	{NullStatement} labels+=Label* "NULL" ";";
 *
 **/

// {NullStatement} labels+=Label* "NULL" ";"
protected class NullStatement_Group extends GroupToken {
	
	public NullStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNullStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullStatement_SemicolonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNullStatementAccess().getNullStatementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {NullStatement}
protected class NullStatement_NullStatementAction_0 extends ActionToken  {

	public NullStatement_NullStatementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNullStatementAccess().getNullStatementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// labels+=Label*
protected class NullStatement_LabelsAssignment_1 extends AssignmentToken  {
	
	public NullStatement_LabelsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNullStatementAccess().getLabelsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNullStatementAccess().getLabelsLabelParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NullStatement_LabelsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new NullStatement_NullStatementAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "NULL"
protected class NullStatement_NULLKeyword_2 extends KeywordToken  {
	
	public NullStatement_NULLKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNullStatementAccess().getNULLKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullStatement_LabelsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NullStatement_NullStatementAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ";"
protected class NullStatement_SemicolonKeyword_3 extends KeywordToken  {
	
	public NullStatement_SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNullStatementAccess().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NullStatement_NULLKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule NullStatement ****************/


/************ begin Rule RaiseStatement ****************
 *
 * RaiseStatement:
 * 	{RaiseStatement} labels+=Label* "RAISE" exceptionName=ID? ";";
 *
 **/

// {RaiseStatement} labels+=Label* "RAISE" exceptionName=ID? ";"
protected class RaiseStatement_Group extends GroupToken {
	
	public RaiseStatement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRaiseStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RaiseStatement_SemicolonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRaiseStatementAccess().getRaiseStatementAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {RaiseStatement}
protected class RaiseStatement_RaiseStatementAction_0 extends ActionToken  {

	public RaiseStatement_RaiseStatementAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRaiseStatementAccess().getRaiseStatementAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// labels+=Label*
protected class RaiseStatement_LabelsAssignment_1 extends AssignmentToken  {
	
	public RaiseStatement_LabelsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRaiseStatementAccess().getLabelsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Label_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("labels",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("labels");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLabelRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRaiseStatementAccess().getLabelsLabelParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RaiseStatement_LabelsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new RaiseStatement_RaiseStatementAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "RAISE"
protected class RaiseStatement_RAISEKeyword_2 extends KeywordToken  {
	
	public RaiseStatement_RAISEKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRaiseStatementAccess().getRAISEKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RaiseStatement_LabelsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RaiseStatement_RaiseStatementAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// exceptionName=ID?
protected class RaiseStatement_ExceptionNameAssignment_3 extends AssignmentToken  {
	
	public RaiseStatement_ExceptionNameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRaiseStatementAccess().getExceptionNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RaiseStatement_RAISEKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("exceptionName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("exceptionName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRaiseStatementAccess().getExceptionNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRaiseStatementAccess().getExceptionNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class RaiseStatement_SemicolonKeyword_4 extends KeywordToken  {
	
	public RaiseStatement_SemicolonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRaiseStatementAccess().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RaiseStatement_ExceptionNameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RaiseStatement_RAISEKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule RaiseStatement ****************/


/************ begin Rule VariableRef ****************
 *
 * VariableRef:
 * 	isHostRef?=":"? name=QualifiedName;
 *
 **/

// isHostRef?=":"? name=QualifiedName
protected class VariableRef_Group extends GroupToken {
	
	public VariableRef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableRefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableRef_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableRefRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// isHostRef?=":"?
protected class VariableRef_IsHostRefAssignment_0 extends AssignmentToken  {
	
	public VariableRef_IsHostRefAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableRefAccess().getIsHostRefAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isHostRef",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isHostRef");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getVariableRefAccess().getIsHostRefColonKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// name=QualifiedName
protected class VariableRef_NameAssignment_1 extends AssignmentToken  {
	
	public VariableRef_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableRefAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQualifiedNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVariableRefAccess().getNameQualifiedNameParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VariableRef_IsHostRefAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule VariableRef ****************/


/************ begin Rule QualifiedName ****************
 *
 * QualifiedName:
 * 	names+=Name ("." names+=Name)*;
 *
 **/

// names+=Name ("." names+=Name)*
protected class QualifiedName_Group extends GroupToken {
	
	public QualifiedName_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getQualifiedNameAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedName_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new QualifiedName_NamesAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQualifiedNameRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// names+=Name
protected class QualifiedName_NamesAssignment_0 extends AssignmentToken  {
	
	public QualifiedName_NamesAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQualifiedNameAccess().getNamesAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Name_DeclarationAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("names",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("names");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQualifiedNameAccess().getNamesNameParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ("." names+=Name)*
protected class QualifiedName_Group_1 extends GroupToken {
	
	public QualifiedName_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getQualifiedNameAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedName_NamesAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "."
protected class QualifiedName_FullStopKeyword_1_0 extends KeywordToken  {
	
	public QualifiedName_FullStopKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QualifiedName_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new QualifiedName_NamesAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// names+=Name
protected class QualifiedName_NamesAssignment_1_1 extends AssignmentToken  {
	
	public QualifiedName_NamesAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQualifiedNameAccess().getNamesAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Name_DeclarationAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("names",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("names");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNameRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQualifiedNameAccess().getNamesNameParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QualifiedName_FullStopKeyword_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule QualifiedName ****************/


/************ begin Rule Name ****************
 *
 * Name:
 * 	declaration=[NameDeclaration];
 *
 **/

// declaration=[NameDeclaration]
protected class Name_DeclarationAssignment extends AssignmentToken  {
	
	public Name_DeclarationAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNameAccess().getDeclarationAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNameRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("declaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNameAccess().getDeclarationNameDeclarationCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getNameAccess().getDeclarationNameDeclarationCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule Name ****************/


/************ begin Rule LoopVariableDeclaration ****************
 *
 * LoopVariableDeclaration:
 * 	name=ID;
 *
 **/

// name=ID
protected class LoopVariableDeclaration_NameAssignment extends AssignmentToken  {
	
	public LoopVariableDeclaration_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLoopVariableDeclarationAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLoopVariableDeclarationRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLoopVariableDeclarationAccess().getNameIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLoopVariableDeclarationAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule LoopVariableDeclaration ****************/


/************ begin Rule NameDeclaration ****************
 *
 * NameDeclaration:
 * 	VariableDeclaration | ParameterDeclaration | Procedure | Function | Package | ProcedureDefinition |
 * 	LoopVariableDeclaration;
 *
 **/

// VariableDeclaration | ParameterDeclaration | Procedure | Function | Package | ProcedureDefinition |
// LoopVariableDeclaration
protected class NameDeclaration_Alternatives extends AlternativesToken {

	public NameDeclaration_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNameDeclarationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NameDeclaration_VariableDeclarationParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NameDeclaration_ParameterDeclarationParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new NameDeclaration_ProcedureParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new NameDeclaration_FunctionParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new NameDeclaration_PackageParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new NameDeclaration_ProcedureDefinitionParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new NameDeclaration_LoopVariableDeclarationParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunctionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLoopVariableDeclarationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPackageRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getParameterDeclarationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProcedureRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProcedureDefinitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableDeclarationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// VariableDeclaration
protected class NameDeclaration_VariableDeclarationParserRuleCall_0 extends RuleCallToken {
	
	public NameDeclaration_VariableDeclarationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameDeclarationAccess().getVariableDeclarationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableDeclarationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(VariableDeclaration_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ParameterDeclaration
protected class NameDeclaration_ParameterDeclarationParserRuleCall_1 extends RuleCallToken {
	
	public NameDeclaration_ParameterDeclarationParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameDeclarationAccess().getParameterDeclarationParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameterDeclarationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ParameterDeclaration_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Procedure
protected class NameDeclaration_ProcedureParserRuleCall_2 extends RuleCallToken {
	
	public NameDeclaration_ProcedureParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameDeclarationAccess().getProcedureParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Procedure_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcedureRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Procedure_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Function
protected class NameDeclaration_FunctionParserRuleCall_3 extends RuleCallToken {
	
	public NameDeclaration_FunctionParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameDeclarationAccess().getFunctionParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Function_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunctionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Function_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Package
protected class NameDeclaration_PackageParserRuleCall_4 extends RuleCallToken {
	
	public NameDeclaration_PackageParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameDeclarationAccess().getPackageParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Package_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPackageRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Package_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ProcedureDefinition
protected class NameDeclaration_ProcedureDefinitionParserRuleCall_5 extends RuleCallToken {
	
	public NameDeclaration_ProcedureDefinitionParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameDeclarationAccess().getProcedureDefinitionParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProcedureDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProcedureDefinitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ProcedureDefinition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LoopVariableDeclaration
protected class NameDeclaration_LoopVariableDeclarationParserRuleCall_6 extends RuleCallToken {
	
	public NameDeclaration_LoopVariableDeclarationParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNameDeclarationAccess().getLoopVariableDeclarationParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LoopVariableDeclaration_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLoopVariableDeclarationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LoopVariableDeclaration_NameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule NameDeclaration ****************/

}
